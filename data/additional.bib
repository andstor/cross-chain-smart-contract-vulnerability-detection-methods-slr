@inproceedings{albert2018ethir,
  author    = {Albert, Elvira
               and Gordillo, Pablo
               and Livshits, Benjamin
               and Rubio, Albert
               and Sergey, Ilya},
  editor    = {Lahiri, Shuvendu K.
               and Wang, Chao},
  title     = {EthIR: A Framework for High-Level Analysis of Ethereum Bytecode},
  booktitle = {Automated Technology for Verification and Analysis},
  year      = {2018},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {513--520},
  abstract  = {Analyzing Ethereum bytecode, rather than the source code from which it was generated, is a necessity when: (1) the source code is not available (e.g., the blockchain only stores the bytecode), (2) the information to be gathered in the analysis is only visible at the level of bytecode (e.g., gas consumption is specified at the level of EVM instructions), (3) the analysis results may be affected by optimizations performed by the compiler (thus the analysis should be done ideally after compilation). This paper presents EthIR, a framework for analyzing Ethereum bytecode, which relies on (an extension of) Oyente, a tool that generates CFGs; EthIR produces from the CFGs, a rule-based representation (RBR) of the bytecode that enables the application of (existing) high-level analyses to infer properties of EVM code.},
  isbn      = {978-3-030-01090-4}
}

@article{feist2019slither,
  author     = {Josselin Feist and
                Gustavo Grieco and
                Alex Groce},
  title      = {Slither: {A} Static Analysis Framework For Smart Contracts},
  journal    = {CoRR},
  volume     = {abs/1908.09878},
  year       = {2019},
  url        = {http://arxiv.org/abs/1908.09878},
  eprinttype = {arXiv},
  eprint     = {1908.09878},
  timestamp  = {Thu, 29 Aug 2019 16:32:34 +0200}
}


@inproceedings{tsankov2018securify,
  address    = {New York, NY, USA},
  author     = {Tsankov, Petar and Dan, Andrei and Drachsler-Cohen, Dana and Gervais, Arthur and B\"{u}nzli, Florian and Vechev, Martin},
  booktitle  = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
  doi        = {10.1145/3243734.3243780},
  isbn       = {9781450356930},
  keywords   = {verification, security analysis, stratified datalog, smart contracts},
  location   = {Toronto, Canada},
  numpages   = {16},
  pages      = {67--82},
  publisher  = {Association for Computing Machinery},
  series     = {CCS '18},
  title      = {Securify: Practical Security Analysis of Smart Contracts},
  url        = {https://doi.org/10.1145/3243734.3243780},
  year       = {2018},
  bdsk-url-1 = {https://doi.org/10.1145/3243734.3243780}
}


@inproceedings{mossberg2019manticore,
  author            = {Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex
                       and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg,
                       Artem},
  book-group-author = {{IEEE}},
  title             = {{Manticore: A User-Friendly Symbolic Execution Framework for Binaries and
                       Smart Contracts}},
  booktitle         = {{34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING
                       (ASE 2019)}},
  year              = {{2019}},
  pages             = {{1186-1189}},
  note              = {{34th IEEE/ACM International Conference on Automated Software Engineering
                       (ASE), San Diego, CA, NOV 10-11, 2019}},
  organization      = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; IEEE Comp Soc Tech Council
                       Software Engn; ACM Special Interest Grp Artificial Intelligence; ACM
                       Special Interest Grp Software Engn}},
  doi               = {{10.1109/ASE.2019.00133}},
  isbn              = {{978-1-7281-2508-4}},
  unique-id         = {{WOS:000533303400126}}
}

@online{mueller2018mythril,
  author        = {Mueller, Bernhard},
  date-added    = {2021-11-15 05:07:32 +0100},
  date-modified = {2021-11-15 05:09:46 +0100},
  month         = {4},
  title         = {MythX Tech: Behind the Scenes of Smart Contract Security Analysis},
  url           = {https://conference.hitb.org/hitbsecconf2018ams/sessions/smashing-ethereum-smart-contracts-for-fun-and-actual-profit/},
  urldate       = {2021-10-27},
  year          = {2018}
}

@conference{nikolic2018finding,
  author        = {Nikoli{\'c}, I. and Kolluri, A. and Sergey, I. and Saxena, P. and Hobor, A.},
  document_type = {Conference Paper},
  doi           = {10.1145/3274694.3274743},
  journal       = {ACM International Conference Proceeding Series},
  note          = {cited By 142},
  pages         = {653-663},
  title         = {Finding the greedy, prodigal, and suicidal contracts at scale},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060022651&doi=10.1145%2f3274694.3274743&partnerID=40&md5=9bbfbf4caa9303d34c5e6dc974ece9d2},
  year          = {2018},
  bdsk-url-1    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060022651&doi=10.1145%2f3274694.3274743&partnerID=40&md5=9bbfbf4caa9303d34c5e6dc974ece9d2},
  bdsk-url-2    = {https://doi.org/10.1145/3274694.3274743}
}

@misc{nguyen2020sfuzz,
  title         = {sFuzz: An Efficient Adaptive Fuzzer for Solidity Smart Contracts},
  author        = {Tai D. Nguyen and Long H. Pham and Jun Sun and Yun Lin and Quang Tran Minh},
  year          = {2020},
  eprint        = {2004.08563},
  archiveprefix = {arXiv},
  primaryclass  = {cs.SE}
}

@inproceedings{grieco2020echidna,
  author    = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
  title     = {Echidna: Effective, Usable, and Fast Fuzzing for Smart Contracts},
  year      = {2020},
  isbn      = {9781450380089},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3395363.3404366},
  doi       = {10.1145/3395363.3404366},
  abstract  = {Ethereum smart contracts---autonomous programs that run on a blockchain---often control transactions of financial and intellectual property. Because of the critical role they play, smart contracts need complete, comprehensive, and effective test generation. This paper introduces an open-source smart contract fuzzer called Echidna that makes it easy to automatically generate tests to detect violations in assertions and custom properties. Echidna is easy to install and does not require a complex configuration or deployment of contracts to a local blockchain. It offers responsive feedback, captures many property violations, and its default settings are calibrated based on experimental data. To date, Echidna has been used in more than 10 large paid security audits, and feedback from those audits has driven the features and user experience of Echidna, both in terms of practical usability (e.g., smart contract frameworks like Truffle and Embark) and test generation strategies. Echidna aims to be good at finding real bugs in smart contracts, with minimal user effort and maximal speed.},
  booktitle = {Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages     = {557–560},
  numpages  = {4},
  keywords  = {fuzzing, test generation, smart contracts},
  location  = {Virtual Event, USA},
  series    = {ISSTA 2020}
}

@inproceedings{he2019learning,
  author    = {He, Jingxuan and Balunovi{\'c}, Mislav and Ambroladze, Nodar and Tsankov, Petar and Vechev, Martin},
  title     = {Learning to Fuzz from Symbolic Execution with Application to Smart Contracts},
  year      = {2019},
  isbn      = {9781450367479},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3319535.3363230},
  doi       = {10.1145/3319535.3363230},
  abstract  = {Fuzzing and symbolic execution are two complementary techniques for discovering software vulnerabilities. Fuzzing is fast and scalable, but can be ineffective when it fails to randomly select the right inputs. Symbolic execution is thorough but slow and often does not scale to deep program paths with complex path conditions. In this work, we propose to learn an effective and fast fuzzer from symbolic execution, by phrasing the learning task in the framework of imitation learning. During learning, a symbolic execution expert generates a large number of quality inputs improving coverage on thousands of programs. Then, a fuzzing policy, represented with a suitable architecture of neural networks, is trained on the generated dataset. The learned policy can then be used to fuzz new programs. We instantiate our approach to the problem of fuzzing smart contracts, a domain where contracts often implement similar functionality (facilitating learning) and security is of utmost importance. We present an end-to-end system, ILF (for Imitation Learning based Fuzzer), and an extensive evaluation over &gt;18K contracts. Our results show that ILF is effective: (i) it is fast, generating 148 transactions per second, (ii) it outperforms existing fuzzers (e.g., achieving 33% more coverage), and (iii) it detects more vulnerabilities than existing fuzzing and symbolic execution tools for Ethereum.},
  booktitle = {Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
  pages     = {531–548},
  numpages  = {18},
  keywords  = {imitation learning, smart contracts, fuzzing, symbolic execution},
  location  = {London, United Kingdom},
  series    = {CCS '19}
}

@inproceedings{kalra2018zeus,
  author    = {Sukrit Kalra and Seep Goel and Mohan Dhawan and Subodh Sharma},
  booktitle = {NDSS},
  title     = {ZEUS: Analyzing Safety of Smart Contracts},
  year      = {2018}
}

@misc{lutz2021escort,
  title         = {ESCORT: Ethereum Smart COntRacTs Vulnerability Detection using Deep Neural Network and Transfer Learning},
  author        = {Oliver Lutz and Huili Chen and Hossein Fereidooni and Christoph Sendner and Alexandra Dmitrienko and Ahmad Reza Sadeghi and Farinaz Koushanfar},
  year          = {2021},
  eprint        = {2103.12607},
  archiveprefix = {arXiv},
  primaryclass  = {cs.CR}
}


@inproceedings{yang2020seraph,
  author    = {Yang, Zhiqiang and Liu, Han and Li, Yue and Zheng, Huixuan and Wang, Lei and Chen, Bangdao},
  title     = {Seraph: Enabling Cross-Platform Security Analysis for EVM and WASM Smart Contracts},
  year      = {2020},
  isbn      = {9781450371223},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3377812.3382157},
  doi       = {10.1145/3377812.3382157},
  booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: Companion Proceedings},
  pages     = {21–24},
  numpages  = {4},
  keywords  = {symbolic semantic graph, connector API, smart contracts},
  location  = {Seoul, South Korea},
  series    = {ICSE '20}
}