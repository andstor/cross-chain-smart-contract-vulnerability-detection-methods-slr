%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Andr√© Storhaug at 2021-11-07 17:46:26 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{WOS:000525389200002,
	abstract = {{In the last decade, smart contract security issues lead to tremendous
   losses, which has attracted increasing public attention both in industry
   and in academia. Researchers have embarked on efforts with logic rules,
   symbolic analysis, and formal analysis to achieve encouraging results in
   smart contract vulnerability detection tasks. However, the existing
   detection tools are far from satisfactory. In this paper, we attempt to
   utilize the deep learning-based approach, namely bidirectional
   long-short term memory with attention mechanism (BLSTM-ATT), aiming to
   precisely detect reentrancy bugs. Furthermore, we propose contract
   snippet representations for smart contracts, which contributes to
   capturing essential semantic information and control flow dependencies.
   Our extensive experimental studies on over 42,000 real-world smart
   contracts show that our proposed model and contract snippet
   representations significantly outperform state-of-the-art methods. In
   addition, this work proves that it is practical to apply deep
   learning-based technology on smart contract vulnerability detection,
   which is able to promote future research towards this area.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Liu, ZG (Corresponding Author), Zhejiang Gongshang Univ, Sch Comp \& Informat Engn, Hangzhou 310018, Peoples R China. Qian, Peng; Liu, Zhenguang; Wang, Xun, Zhejiang Gongshang Univ, Sch Comp \& Informat Engn, Hangzhou 310018, Peoples R China. He, Qinming, Zhejiang Univ, Dept Comp Sci, Hangzhou 310027, Peoples R China. Zimmermann, Roger, Natl Univ Singapore, Sch Comp, Singapore 117417, Singapore.}},
	author = {Qian, Peng and Liu, Zhenguang and He, Qinming and Zimmermann, Roger and Wang, Xun},
	author-email = {{lzg@zjgsu.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{LC5SE}},
	doi = {{10.1109/ACCESS.2020.2969429}},
	funding-acknowledgement = {{National Key Research and Development Program of China {[}2017YFB1401300, 2017YFB1401304]; National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61902348]; Natural Science Foundation of Zhejiang Province, ChinaNatural Science Foundation of Zhejiang Province {[}LQ19F020001]; Science and Technology Innovation Program of Zhejiang Province, China {[}2019R408070]; General Scienti\~{}c Research Projects of Zhejiang Provincial Department of Education, China {[}Y201942758]}},
	funding-text = {{This work was supported in part by the National Key Research and Development Program of China under Grant 2017YFB1401300 and Grant 2017YFB1401304, in part by the National Natural Science Foundation of China Grant 61902348, in part by the Natural Science Foundation of Zhejiang Province, China, Grant LQ19F020001, in part by the Science and Technology Innovation Program of Zhejiang Province, China, under Grant 2019R408070, and in part by the General Scienti\~{}c Research Projects of Zhejiang Provincial Department of Education, China, under Grant Y201942758.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Blockchain; smart contract; deep learning; sequential models; vulnerability detection}},
	language = {{English}},
	number-of-cited-references = {{40}},
	oa = {{gold}},
	orcid-numbers = {{Qian, Peng/0000-0003-4934-5811}},
	pages = {{19685-19695}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{7}},
	title = {{Towards Automated Reentrancy Detection for Smart Contracts Based on Sequential Models}},
	type = {{Article}},
	unique-id = {{WOS:000525389200002}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{6}},
	volume = {{8}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2020.2969429}}

@inproceedings{WOS:000477742600025,
	abstract = {{Smart Contracts bring Ethereum transactions great convenience, meanwhile
   they can have potentially devastating financial consequences. To address
   the lack of security guarantee, we investigate state-of-art bug
   detection tools and conduct experiments to analyze their pros and cons.
   Finally, we conduct research to answer why they have false positives and
   a convincing bug benchmark is provided.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 IEEE 12TH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION WORKSHOPS (ICSTW 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BN2TK}},
	doi = {{10.1109/ICSTW.2019.00049}},
	isbn = {{978-1-7281-0888-9}},
	issn = {{2159-4848}},
	keywords = {{Ethereum; Smart Contract; Solidity; Vulnerability; Fasle Positive}},
	language = {{English}},
	note = {{12th IEEE International Conference on Software Testing, Verification and Validation (ICST), Xian, PEOPLES R CHINA, APR 22-27, 2019}},
	number-of-cited-references = {{17}},
	organization = {{IEEE; IEEE Comp Soc; CCF; Xian Jiaotong Univ; Xian Univ Posts \& Telecommunicat; Huawei; Beijing Sunwise Informat Technol Ltd; Baidu; www 360 cn; Netflix; TICPSH; Mooctest; Google}},
	pages = {{184-187}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Ye, Jiaming/AAX-4088-2021}},
	series = {{IEEE International Conference on Software Testing Verification and Validation Workshops}},
	times-cited = {{2}},
	title = {{Towards Automated Generation of Bug Benchmark for Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000477742600025}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ICSTW.2019.00049}}

@inproceedings{WOS:000637244600080,
	abstract = {{Reentrancy bugs in smart contracts caused a devastating financial loss
   in 2016, considered as one of the most severe vulnerabilities in smart
   contracts. Most of the existing general-purpose security tools for smart
   contracts have claimed to be able to detect reentrancy bugs. In this
   paper, we present Clairvoyance, a cross-function and cross-contract
   static analysis by identifying infeasible paths to detect reentrancy
   vulnerabilities in smart contracts. To reduce FPs, we have summarized
   five major path protective techniques (PPTs) to support fast yet precise
   path feasibility checking. We have implemented our approach and compared
   Clairvoyance with three state-of-the-art tools on 17770 real-worlds
   contracts. The results show that Clairvoyance yields the best detection
   accuracy among all the tools.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Ye, JM (Corresponding Author), Univ Sci \& Technol China, Hefei, Anhui, Peoples R China. Ye, Jiaming; Ma, Mingliang; Xue, Yinxing, Univ Sci \& Technol China, Hefei, Anhui, Peoples R China. Lin, Yun, Natl Univ Singapore, Singapore, Singapore. Sui, Yulei, Univ Technol Sydney, Sydney, NSW, Australia.}},
	author = {Ye, Jiaming and Ma, Mingliang and Lin, Yun and Sui, Yulei and Xue, Yinxing},
	author-email = {{sa517462@mail.ustc.edu.cn sa517245@mail.ustc.edu.cn llmhyy@gmail.com yulei.sui@uts.edu.au yxxue@ustc.edu.cn}},
	book-group-author = {{IEEE}},
	booktitle = {{2020 ACM/IEEE 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR2CT}},
	doi = {{10.1145/3377812.3390908}},
	issn = {{0270-5257}},
	keywords = {{reentrancy detection; path feasibility analysis; cross contract analysis; smart contract security}},
	language = {{English}},
	note = {{42nd ACM/IEEE International Conference on Software Engineering - Companion Proceedings (ICSE-Companion), ELECTR NETWORK, JUN 27-JUL 19, 2020}},
	number-of-cited-references = {{2}},
	oa = {{Green Published}},
	organization = {{Assoc Comp Machinery; IEEE; IEEE Comp Soc; IEEE Comp Soc Tech Comm Software Engn; ACM Special Interest Grp Software Engn; Korean Inst Informat Scientists \& Engineers; Natl Sci Fdn; Facebook; N Carolina State Univ; Microsoft; Samsung; LG Elect; KAIST; SK Hynix; NAVER; Suresoft; HITACHI; Google}},
	pages = {{274-275}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Ye, Jiaming/AAX-4088-2021}},
	series = {{International Conference on Software Engineering}},
	times-cited = {{0}},
	title = {{Clairvoyance: Cross-contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000637244600080}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3377812.3390908}}

@inproceedings{WOS:000613139300013,
	abstract = {{Ethereum is the largest blockchain platform that supports smart
   contracts. Users deploy smart contracts by publishing the smart
   contract's bytecode to the blockchain. Since the data in the blockchain
   cannot be modified, even if these contracts contain bugs, it is not
   possible to patch deployed smart contracts with code updates. Moreover,
   there is currently neither a comprehensive classification framework for
   Ethereum smart contract bugs, nor detailed criteria for detecting bugs
   in smart contracts, making it difficult for developers to fully
   understand the negative effects of bugs and design new approaches to
   detect bugs. In this paper, to fill the gap, we first collect as many
   smart contract bugs as possible from multiple sources and divide these
   bugs into 9 categories by extending the IEEE Standard Classification for
   Software Anomalies. Then, we design the criteria for detecting each kind
   of bugs, and construct a dataset of smart contracts covering all kinds
   of bugs. With our framework and dataset, developers can learn smart
   contract bugs and develop new tools to detect and locate bugs in smart
   contracts. Moreover, we evaluate the state-of-the-art tools for smart
   contract analysis with our dataset and obtain some interesting findings:
   1) Mythril, Slither and Remix are the most worthwhile combination of
   analysis tools. 2) There are still 10 kinds of bugs that cannot be
   detected by any analysis tool.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Zhang, PC (Corresponding Author), Hohai Univ, Coll Comp \& Informat, Nanjing, Peoples R China. Zhang, Pengcheng; Xiao, Feng, Hohai Univ, Coll Comp \& Informat, Nanjing, Peoples R China. Luo, Xiapu, Hong Kong Polytech Univ, Dept Comp, Hong Kong, Peoples R China.}},
	author = {Zhang, Pengcheng and Xiao, Feng and Luo, Xiapu},
	author-email = {{pchzhang@hhu.edu.cn harleyxiao@foxmail.com csxluo@comp.polyu.edu.hk}},
	book-group-author = {{IEEE}},
	booktitle = {{2020 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE AND EVOLUTION (ICSME 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ6TH}},
	doi = {{10.1109/ICSME46990.2020.00023}},
	funding-acknowledgement = {{Natural Science Foundation of Jiangsu ProvinceNatural Science Foundation of Jiangsu Province {[}BK20191297]; National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61572171]; Hong Kong RGC Project {[}152193/19E]}},
	funding-text = {{The work is is partially supported by the Natural Science Foundation of Jiangsu Province under Grant No. BK20191297, the National Natural Science Foundation of China under Grant No. 61572171, and Hong Kong RGC Project (No. 152193/19E).}},
	isbn = {{978-1-7281-5619-4}},
	issn = {{1063-6773}},
	keywords = {{Ethereum; Solidity; Smart contract bug}},
	language = {{English}},
	note = {{36th IEEE International Conference on Software Maintenance and Evolution (ICSME), ELECTR NETWORK, SEP 27-OCT 03, 2020}},
	number-of-cited-references = {{59}},
	oa = {{Green Submitted}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{139-150}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	series = {{Proceedings-IEEE International Conference on Software Maintenance}},
	times-cited = {{0}},
	title = {{A Framework and DataSet for Bugs in Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000613139300013}},
	usage-count-last-180-days = {{5}},
	usage-count-since-2013 = {{5}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/ICSME46990.2020.00023}}

@article{WOS:000525451000001,
	abstract = {{Smart contracts are programs that reside within decentralized
   blockchains and are executed pursuant to triggered instructions. A smart
   contract acts in a similar way to a traditional agreement but negates
   the necessity for the involvement of a third party. Smart contracts are
   capable of initiating their commands automatically, thus eliminating the
   involvement of a regulatory body. As a consequence of blockchain's
   immutable feature, smart contracts are developed in a manner that is
   distinct from traditional software. Once deployed to the blockchain, a
   smart contract cannot be modified or updated for security patches, thus
   encouraging developers to implement strong security strategies before
   deployment in order to avoid potential exploitation at a later time.
   However, the most recent dreadful attacks and the multifarious existing
   vulnerabilities which result as a consequence of the absence of security
   patches have challenged the sustainability of this technology. Attacks
   such as the Decentralized Autonomous Organization (DAO) attack and the
   Parity Wallet hack have cost millions of dollars simply as a consequence
   of naive bugs in the smart contract code. In this paper, we classify
   blockchain exploitation techniques into 4 categories based on the attack
   rationale; attacking consensus protocols, bugs in the smart contract,
   malware running in the operating system, and fraudulent users. We then
   focus on smart contract vulnerabilities, analyzing the 7 most important
   attack techniques to determine the real impact on smart contract
   technology. We reveal that even adopting the 10 most widely used tools
   to detect smart contract vulnerabilities, these still contain known
   vulnerabilities, providing a dangerously false sense of security. We
   conclude the paper with a discussion about recommendations and future
   research lines to progress towards a secure smart contract solution.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Marco-Gisbert, H (Corresponding Author), Univ West Scotland, Sch Comp Engn \& Phys Sci, Paisley PA1 2BE, Renfrew, Scotland. Sayeed, Sarwar; Marco-Gisbert, Hector; Caira, Tom, Univ West Scotland, Sch Comp Engn \& Phys Sci, Paisley PA1 2BE, Renfrew, Scotland.}},
	author = {Sayeed, Sarwar and Marco-Gisbert, Hector and Caira, Tom},
	author-email = {{hector.marco@uws.ac.uk}},
	da = {{2021-11-07}},
	doc-delivery-number = {{LC6NQ}},
	doi = {{10.1109/ACCESS.2020.2970495}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Smart contracts; attack techniques; DApp; Ethereum; vulnerability}},
	language = {{English}},
	number-of-cited-references = {{73}},
	oa = {{Green Submitted, gold}},
	orcid-numbers = {{Sayeed, Sarwar/0000-0002-9164-7672 Marco, Hector/0000-0001-6976-5763}},
	pages = {{24416-24427}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{17}},
	title = {{Smart Contract: Attacks and Protections}},
	type = {{Article}},
	unique-id = {{WOS:000525451000001}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{10}},
	volume = {{8}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2020.2970495}}

@inproceedings{WOS:000570766300031,
	abstract = {{A smart contract is a decentralized program executed automatically,
   reliably, and transparently on a blockchain. It is now commonly used in
   financial-related applications, which require heavily secure operations
   and transactions. However, like other programs, smart contracts might
   contain some flaws. Thus, developers are encouraged to write secure
   smart contracts, and some approaches are proposed to detect
   vulnerabilities of smart contracts before deployment. Due to the
   immutability property of a blockchain, developers cannot modify the
   smart contract even though there is a vulnerability which may cause
   financial losses. In this paper, we propose the comparison of
   vulnerability detection tools to deployed smart contracts on the
   Ethereum blockchain. We also present the analysis of the state of
   vulnerabilities in smart contracts as well as their characteristics.}},
	address = {{AV D MANUELL, 27A 2 ESQ, SETUBAL, 2910-595, PORTUGAL}},
	affiliation = {{Tantikul, P (Corresponding Author), Mahidol Univ, Fac Informat \& Commun Technol, Salaya, Nakhon Pathom, Thailand. Tantikul, Phitchayaphong; Ngamsuriyaroj, Sudsanguan, Mahidol Univ, Fac Informat \& Commun Technol, Salaya, Nakhon Pathom, Thailand.}},
	author = {Tantikul, Phitchayaphong and Ngamsuriyaroj, Sudsanguan},
	booktitle = {{ICISSP: PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON INFORMATION SYSTEMS SECURITY AND PRIVACY}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP9RT}},
	doi = {{10.5220/0008909803170324}},
	editor = {{Furnell, S and Mori, P and Weippl, E and Camp, O}},
	isbn = {{978-989-758-399-5}},
	keywords = {{Smart Contract; Solidity; Security; Vulnerability}},
	language = {{English}},
	note = {{6th International Conference on Information Systems Security and Privacy (ICISSP), Valletta, MALTA, FEB 25-27, 2020}},
	number-of-cited-references = {{11}},
	oa = {{hybrid}},
	pages = {{317-324}},
	publisher = {{SCITEPRESS}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Exploring Vulnerabilities in Solidity Smart Contract}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000570766300031}},
	usage-count-last-180-days = {{5}},
	usage-count-since-2013 = {{5}},
	web-of-science-categories = {{Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.5220/0008909803170324}}

@inproceedings{WOS:000450109000017,
	abstract = {{Smart contracts enabled a new way to perform cryptocurrency transactions
   over blockchains. While this emerging technique introduces
   free-of-conflicts and transparency, smart contract itself is vulnerable.
   As a special form of computer program, smart contract can hardly get rid
   of bugs. Even worse, an exploitable security bug can lead to
   catastrophic consequences, e.g., loss of cryptocurrency/money. In this
   demo paper, we focus on the most common type of security bugs in smart
   contracts, i.e., reentrancy bug, which caused the famous DAO attack with
   a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based
   analyzer to automatically detect reentrancy bugs in Ethereum smart
   contracts. Specifically, ReGuard performs fuzz testing on smart
   contracts by iteratively generating random but diverse transactions.
   Based on the runtime traces, ReGuard further dynamically identifies
   reentrancy vulnerabilities. In the preliminary evaluation, we have
   analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7
   previously unreported reentrancy bugs. A demo video of ReGuard is at
   https://youtu.be/XxJ3\_-cmUiY.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Chen, Z (Corresponding Author), Peking Univ, Beijing, Peoples R China. Liu, Chao; Chen, Zhong, Peking Univ, Beijing, Peoples R China. Liu, Han; Cao, Zhao; Chen, Bangdao; Roscoe, Bill, Chieftin Lab, Shenzhen, Peoples R China. Liu, Han, Tsinghua Univ, Beijing, Peoples R China. Roscoe, Bill, Univ Oxford, Oxford, England.}},
	author = {Liu, Chao and Liu, Han and Cao, Zhao and Chen, Zhong and Chen, Bangdao and Roscoe, Bill},
	author-email = {{liuchao\_cs@pku.edu.cn liuhan2017@mail.tsinghua.edu.cn zhongchen@pku.edu.cn}},
	book-group-author = {{IEEE}},
	booktitle = {{PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING - COMPANION (ICSE-COMPANION}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BL3YB}},
	doi = {{10.1145/3183440.3183495}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61672060]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2017M620785]}},
	funding-text = {{The authors would like to thank Thomas Gibson-Robinson, Philippa J. Hopcroft and Youcheng Sun for their help in preparing the tool. This work is supported by National Natural Science Foundation of China under the grant No.: 61672060 and China Postdoctoral Science Foundation under the grant No.: 2017M620785.}},
	isbn = {{978-1-4503-5663-3}},
	issn = {{2574-1926}},
	keywords = {{Smart contract; reentrancy bug; dynamic analysis}},
	language = {{English}},
	note = {{40th ACM/IEEE International Conference on Software Engineering (ICSE), Gothenburg, SWEDEN, MAY 27-JUN 03, 2018}},
	number-of-cited-references = {{12}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; Microsoft Res}},
	pages = {{65-68}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	series = {{Proceedings of the IEEE-ACM International Conference on Software Engineering Companion}},
	times-cited = {{41}},
	title = {{ReGuard: Finding Reentrancy Bugs in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000450109000017}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{11}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1145/3183440.3183495}}

@inproceedings{WOS:000651313500158,
	abstract = {{Ethereum has become a widely used platform to enable secure,
   Blockchain-based financial and business transactions. However, many
   identified bugs and vulnerabilities in smart contracts have led to
   serious financial losses, which raises serious concerns about smart
   contract security. Thus, there is a significant need to better maintain
   smart contract code and ensure its high reliability.
   In this research: (1) Firstly, we propose an automated deep learning
   based approach to learn structural code embeddings of smart contracts in
   Solidity, which is useful for clone detection, bug detection and
   contract validation on smart contracts. We apply our approach to more
   than 22K solidity contracts collected from the Ethereum blockchain,
   results show that the clone ratio of solidity code is at around 90\%,
   much higher than traditional software. We collect a list of 52 known
   buggy smart contracts belonging to 10 kinds of common vulnerabilities as
   our bug database. Our approach can identify more than 1000 clone related
   bugs based on our bug databases efficiently and accurately. (2)
   Secondly, according to developers' feedback, we have implemented the
   approach in a web-based tool, named SmartEmbed, to facilitate Solidity
   developers for using our approach. Our tool can assist Solidity
   developers to efficiently identify repetitive smart contracts in the
   existing Ethereum blockchain, as well as checking their contract against
   a known set of bugs. which can help to improve the users' confidence in
   the reliability of the contract. We optimize the implementations of
   SmartEmbed which is sufficient in supporting developers in real-time for
   practical uses. The Ethereum ecosystem as well as the individual
   Solidity developer can both benefit from our research.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Gao, ZP (Corresponding Author), Monash Univ, Clayton, Vic, Australia. Gao, Zhipeng, Monash Univ, Clayton, Vic, Australia.}},
	author = {Gao, Zhipeng},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2020 35TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR4HE}},
	doi = {{10.1145/3324884.3418918}},
	isbn = {{978-1-4503-6768-4}},
	issn = {{1527-1366}},
	language = {{English}},
	note = {{35th IEEE/ACM International Conference on Automated Software Engineering (ASE), ELECTR NETWORK, SEP 21-25, 2020}},
	number-of-cited-references = {{29}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; Monash Univ; NASA Ames Rese Ctr; IEEE Tech Council Software Engn; ACM SIGAI; ACM Special Interest Grp Software Engn; Deakin Univ}},
	pages = {{1400-1402}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Automation \& Control Systems; Computer Science; Engineering}},
	series = {{IEEE ACM International Conference on Automated Software Engineering}},
	times-cited = {{0}},
	title = {{When Deep Learning Meets Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000651313500158}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Automation \& Control Systems; Computer Science, Software Engineering; Engineering, Electrical \& Electronic}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3324884.3418918}}

@inproceedings{WOS:000662832600005,
	abstract = {{Blockchain is deeply integrated into the vertical industry, and
   gradually forms an application ecosphere of blockchain in various
   industries. However, the security incidents of blockchain occur
   frequently, and especially smart contracts have become the
   badly-disastered area. So avoiding security incidents caused by smart
   contracts has become an essential topic for blockchain developing. Up to
   now, there is not generic method for the security auditing of smart
   contracts and most researchers have to use existing vulnerability
   detection technology. To reduce the high false rate of smart contract
   vulnerability detection, we use ReJection, a detection method based on
   abstract syntax tree (AST), to focus on the reentrancy vulnerability
   with obvious harm and features in smart contracts. ReJection consists of
   four steps. Firstly, ReJection obtains the AST corresponding to the
   contract by the smart contract compiler solc. Then, AST is preprocessed
   to eliminate redundant information. Thirdly, ReJection traverses the
   nodes of the AST and records the notations related to reentrancy
   vulnerabilities during the traversal, such as Danger-Transfer function,
   Checks-Effects-Interactions pattern and mutex mechanism. Finally,
   ReJection uses record information and predefined rules to determine
   whether the reentrancy vulnerability is occurred. ReJection is
   implemented based on Slither, which is an open-source smart contract
   vulnerability detection tool. Furthermore, we also use the open-source
   smart contract code as the test program to compare experimental results
   to verify the effects with the ReJection and Slither. The result
   highlights that the ReJection has higher detection accuracy for
   reentrancy vulnerability.}},
	address = {{152 BEACH ROAD, \#21-01/04 GATEWAY EAST, SINGAPORE, 189721, SINGAPORE}},
	affiliation = {{Ma, K (Corresponding Author), China Acad Informat \& Commun Technol, Internet Ctr, Inst Technol \& Stand Res, Beijing 100191, Peoples R China. Ma, Rui; Jian, Zefeng; Chen, Guangyuan; Chen, Yujia, Beijing Inst Technol, Sch Comp Sci \& Technol, Beijing 100081, Peoples R China. Ma, Ke, China Acad Informat \& Commun Technol, Internet Ctr, Inst Technol \& Stand Res, Beijing 100191, Peoples R China.}},
	author = {Ma, Rui and Jian, Zefeng and Chen, Guangyuan and Ma, Ke and Chen, Yujia},
	author-email = {{make@caict.ac.cn}},
	booktitle = {{TRUSTED COMPUTING AND INFORMATION SECURITY, CTCIS 2019}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR6PS}},
	doi = {{10.1007/978-981-15-3418-8\_5}},
	editor = {{Han, W and Zhu, L and Yan, F}},
	eissn = {{1865-0937}},
	isbn = {{978-981-15-3418-8; 978-981-15-3417-1}},
	issn = {{1865-0929}},
	keywords = {{Vulnerability detection; Smart contract; Abstract syntax tree; Reentrancy vulnerability}},
	language = {{English}},
	note = {{13th Chinese Conference on Trusted Computing and Information Security (CTCIS), Shanghai, PEOPLES R CHINA, OCT 24-27, 2019}},
	number-of-cited-references = {{10}},
	organization = {{China Comp Federat; Fudan Univ}},
	pages = {{58-71}},
	publisher = {{SPRINGER-VERLAG SINGAPORE PTE LTD}},
	research-areas = {{Computer Science}},
	series = {{Communications in Computer and Information Science}},
	times-cited = {{0}},
	title = {{ReJection: A AST-Based Reentrancy Vulnerability Detection Method}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000662832600005}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{1149}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1007/978-981-15-3418-8%5C_5}}

@inproceedings{WOS:000454741800002,
	abstract = {{Ethereum is a major blockchain-based platform for smart contracts -
   Turing complete programs that are executed in a decentralized network
   and usually manipulate digital units of value. Solidity is the most
   mature high-level smart contract language. Ethereum is a hostile
   execution environment, where anonymous attackers exploit bugs for
   immediate financial gain. Developers have a very limited ability to
   patch deployed contracts. Hackers steal up to tens of millions of
   dollars from flawed contracts, a well-known example being ``The DAO{''},
   broken in June 2016. Advice on secure Ethereum programming practices is
   spread out across blogs, papers, and tutorials. Many sources are
   outdated due to a rapid pace of development in this field. Automated
   vulnerability detection tools, which help detect potentially problematic
   language constructs, are still underdeveloped in this area.
   We provide a comprehensive classification of code issues in Solidity and
   implement SmartCheck - an extensible static analysis tool that detects
   them(1). SmartCheck translates Solidity source code into an XML-based
   intermediate representation and checks it against XPath patterns. We
   evaluated our tool on a big dataset of real-world contracts and compared
   the results with manual audit on three contracts. Our tool reflects the
   current state of knowledge on Solidity vulnerabilities and shows
   significant improvements over alternatives. SmartCheck has its
   limitations, as detection of some bugs requires more sophisticated
   techniques such as taint analysis or even manual audit. We believe
   though that a static analyzer should be an essential part of contract
   developers' toolbox, letting them fix simple bugs fast and allocate more
   effort to complex issues.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Tikhomirov, S (Corresponding Author), Univ Luxembourg, SnT, Esch Sur Alzette, Luxembourg. Tikhomirov, Sergei, Univ Luxembourg, SnT, Esch Sur Alzette, Luxembourg. Voskresenskaya, Ekaterina; Ivanitskiy, Ivan; Takhaviev, Ramil; Marchenko, Evgeny; Alexandrov, Yaroslav, SmartDec, Moscow, Russia.}},
	author = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},
	author-email = {{sergey.s.tikhomirov@gmail.com voskresenskaya@smartdec.net ivanitskiy@smartdec.net tahaviev@smartdec.net marchenko@smartdec.net alexandrov@smartdec.net}},
	book-group-author = {{IEEE}},
	booktitle = {{2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BL6YE}},
	doi = {{10.1145/3194113.3194115}},
	isbn = {{978-1-4503-5726-5}},
	keywords = {{Ethereum; Solidity; smart contracts; static analysis; bug detection}},
	language = {{English}},
	note = {{1st ACM/IEEE International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB), Gothenburg, SWEDEN, MAY 27-JUN 03, 2018}},
	number-of-cited-references = {{33}},
	organization = {{Assoc Comp Machinery; IEEE Comp Soc; Assoc Comp Machinery Special Interest Grp Software Engn; IEEE Tech Council Software Engn; IEEE}},
	pages = {{9-16}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	times-cited = {{72}},
	title = {{SmartCheck: Static Analysis of Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000454741800002}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{14}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1145/3194113.3194115}}

@article{WOS:000497160500098,
	abstract = {{Smart contract security is an emerging research area that deals with
   security issues arising from the execution of smart contracts in a
   blockchain system. Generally, a smart contract is a piece of executable
   code that automatically runs on the blockchain to enforce an agreement
   preset between parties involved in the transaction. As an innovative
   technology, smart contracts have been applied in various business areas,
   such as digital asset exchange, supply chains, crowdfunding, and
   intellectual property. Unfortunately, many security issues in smart
   contracts have been reported in the media, often leading to substantial
   financial losses. These security issues pose new challenges to security
   research because the execution environment of smart contracts is based
   on blockchain computing and its decentralized nature of execution. Thus
   far, many partial solutions have been proposed to address specific
   aspects of these security issues, and the trend is to develop new
   methods and tools to automatically detect common security
   vulnerabilities. However, smart contract security is systematic
   engineering that should be explored from a global perspective, and a
   comprehensive study of issues in smart contract security is urgently
   needed. To this end, we conduct a literature review of smart contract
   security from a software lifecycle perspective. We first analyze the key
   features of blockchain that can cause security issues in smart contracts
   and then summarize the common security vulnerabilities of smart
   contracts. To address these vulnerabilities, we examine recent advances
   in smart contract security spanning four development phases: 1) security
   design; 2) security implementation; 3) testing before deployment; and 4)
   monitoring and analysis. Finally, we outline emerging challenges and
   opportunities in smart contract security for blockchain engineers and
   researchers.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Bian, YY (Corresponding Author), Nanjing Univ, Sch Informat Management, Nanjing 210000, Jiangsu, Peoples R China. Bian, YY (Corresponding Author), City Univ Hong Kong, Dept Informat Syst, Hong Kong, Peoples R China. Huang, Yongfeng; Li, Renpu; Shi, Peizhong, Jiangsu Univ Technol, Sch Comp Engn, Changzhou 213001, Peoples R China. Bian, Yiyang, Nanjing Univ, Sch Informat Management, Nanjing 210000, Jiangsu, Peoples R China. Huang, Yongfeng; Bian, Yiyang; Zhao, J. Leon; Shi, Peizhong, City Univ Hong Kong, Dept Informat Syst, Hong Kong, Peoples R China.}},
	author = {Huang, Yongfeng and Bian, Yiyang and Li, Renpu and Zhao, J. Leon and Shi, Peizhong},
	author-email = {{bianyiyang@nju.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{JN8SC}},
	doi = {{10.1109/ACCESS.2019.2946988}},
	funding-acknowledgement = {{Shenzhen Science and Technology Innovation Committee {[}JCY20170818100156260]; National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61472166, 61672270, 61602216]; Humanities and Social Science Research Fund of the Ministry of Education in China {[}18YJC840045]; Natural Science Foundation of Jiangsu ProvinceNatural Science Foundation of Jiangsu Province {[}BK20161199]; Natural Science Foundation of the Jiangsu University of Technology {[}KYY16033]}},
	funding-text = {{This work was supported in part by the Shenzhen Science and Technology Innovation Committee under Grant JCY20170818100156260, in part by the National Natural Science Foundation of China under Grant 61472166, Grant 61672270, and Grant 61602216, in part by the Humanities and Social Science Research Fund of the Ministry of Education in China under Grant 18YJC840045, in part by the Natural Science Foundation of Jiangsu Province under Grant BK20161199, and in part by the Natural Science Foundation of the Jiangsu University of Technology under Grant KYY16033.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Smart contracts; Security; Blockchain; Software; Fabrics; Computer bugs; Blockchain; Ethereum; information security; smart contract; software engineering; software lifecycle}},
	keywords-plus = {{BLOCKCHAIN}},
	language = {{English}},
	number-of-cited-references = {{65}},
	oa = {{gold}},
	pages = {{150184-150202}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	researcherid-numbers = {{Zhao, J. Leon/A-3921-2008}},
	times-cited = {{16}},
	title = {{Smart Contract Security: A Software Lifecycle Perspective}},
	type = {{Article}},
	unique-id = {{WOS:000497160500098}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{23}},
	volume = {{7}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2019.2946988}}

@article{WOS:000478981200005,
	abstract = {{Rising to popularity in the last decade, blockchain technology has
   become the preferred platform for the transfer of digital currency.
   Unfortunately, many of these environments are rife with vulnerabilities
   exploited by financially motivated attackers. Worse yet, is that a
   structured analysis and classification of these vulnerabilities is
   lacking. In this paper, we present the first formal classifications of
   these vulnerabilities using National Institute of Standards and
   Technologies Bugs (NIST'S) Framework and propose two new classes:
   distributed system protocol (DSP) and distributed system resource
   management (DRM). (C) 2019 The Authors. Published by Atlantis Press
   SARL.}},
	address = {{29 AVENUE LAUMIERE, PARIS, 75019, FRANCE}},
	affiliation = {{Deng, L (Corresponding Author), Towson Univ, Dept Comp \& Informat Sci, 8000 York Rd, Towson, MD 21252 USA. Dingman, Wesley; Cohen, Aviel; Ferrara, Nick; Lynch, Adam; Jasinski, Patrick; Deng, Lin, Towson Univ, Dept Comp \& Informat Sci, 8000 York Rd, Towson, MD 21252 USA. Black, Paul E., NIST, Informat Technol Lab, Syst \& Software Div, Software Qual Grp, 100 Bur Dr, Gaithersburg, MD 20899 USA.}},
	author = {Dingman, Wesley and Cohen, Aviel and Ferrara, Nick and Lynch, Adam and Jasinski, Patrick and Black, Paul E. and Deng, Lin},
	author-email = {{ldeng@towson.edu}},
	da = {{2021-11-07}},
	doc-delivery-number = {{IN9EF}},
	doi = {{10.2991/ijndc.k.190710.003}},
	eissn = {{2211-7946}},
	funding-acknowledgement = {{Information Security Research and Education (INSuRE) project}},
	funding-text = {{This undergraduate student research project is supported via the Information Security Research and Education (INSuRE) project {[}24].}},
	issn = {{2211-7938}},
	journal = {{INTERNATIONAL JOURNAL OF NETWORKED AND DISTRIBUTED COMPUTING}},
	journal-iso = {{Int. J. Netw. Distrib. Comput.}},
	keywords = {{Blockchain; cryptocurrency; bug; smart contract; solidity; ethereum}},
	language = {{English}},
	month = {{AUG}},
	number = {{3}},
	number-of-cited-references = {{19}},
	oa = {{gold}},
	orcid-numbers = {{Ferrara, Nicola/0000-0001-8200-4942}},
	pages = {{121-132}},
	publisher = {{ATLANTIS PRESS}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Ferrara, Nicola/A-2904-2014}},
	times-cited = {{5}},
	title = {{Defects and Vulnerabilities in Smart Contracts, a Classification using the NIST Bugs Framework}},
	type = {{Article}},
	unique-id = {{WOS:000478981200005}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{4}},
	volume = {{7}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.2991/ijndc.k.190710.003}}

@inproceedings{WOS:000571457400021,
	abstract = {{Blockchain technology has recently emerged as the primary platform for
   the transfer of digital currency. This technology, which has been
   heralded as a revolutionary tool to facilitate the transfer of funds
   between participating parties, is still in its infancy and should be
   subjected to thorough scrutiny. In recent years, researchers have
   attempted to uncover a litany of bugs embedded within these distributed
   systems; however, there does not yet exist a formal and standardized
   method for their classification. In this paper, we present the first
   formal classifications of known bugs in smart contract systems using
   NIST's Bugs Framework and propose two new classes: Distributed System
   Protocol (DSP) and Distributed System Resource Management (DRM).}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Dingman, W (Corresponding Author), Towson Univ, Dept Comp \& Informat Sci, Towson, MD 21252 USA. Dingman, Wesley; Cohen, Aviel; Ferrara, Nick; Lynch, Adam; Jasinski, Patrick; Deng, Lin, Towson Univ, Dept Comp \& Informat Sci, Towson, MD 21252 USA. Black, Paul E., NIST, Gaithersburg, MD 20899 USA.}},
	author = {Dingman, Wesley and Cohen, Aviel and Ferrara, Nick and Lynch, Adam and Jasinski, Patrick and Black, Paul E. and Deng, Lin},
	author-email = {{wdingm1@students.towson.edu acohen41@students.towson.edu nferra9@students.towson.edu alynch14@students.towson.edu pjasin1@students.towson.edu paul.black@nist.gov ldeng@towson.edu}},
	booktitle = {{2019 IEEE/ACIS 17TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS (SERA)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ0BD}},
	editor = {{Song, YT and Acharya, S and Nguyen, NP}},
	funding-acknowledgement = {{Information Security Research and Education (INSuRE) project {[}14]}},
	funding-text = {{This undergraduate student research project is supported via the Information Security Research and Education (INSuRE) project {[}14].}},
	isbn = {{978-1-7281-0798-1}},
	keywords = {{Blockchain; Cryptocurrency; Bug; Smart Contract; Solidity; Ethereum}},
	language = {{English}},
	note = {{IEEE/ACIS 17th International Conference on Software Engineering Research, Management and Applications (SERA), Honolulu, HI, MAY 29-31, 2019}},
	number-of-cited-references = {{16}},
	orcid-numbers = {{Ferrara, Nicola/0000-0001-8200-4942}},
	organization = {{IEEE; IEEE Comp Soc; Int Assoc Comp \& Informat Sci; Yunnan Univ}},
	pages = {{116-123}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science; Mathematics}},
	researcherid-numbers = {{Ferrara, Nicola/A-2904-2014}},
	times-cited = {{2}},
	title = {{Classification of Smart Contract Bugs Using the NIST Bugs Framework}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000571457400021}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Artificial Intelligence; Computer Science, Information Systems; Computer Science, Software Engineering; Computer Science, Theory \& Methods; Mathematics, Applied}},
	year = {{2019}}}

@article{WOS:000672462600013,
	abstract = {{The use of blockchain and smart contracts have not stopped growing in
   recent years. Like all software that begins to expand its use, it is
   also beginning to be targeted by hackers who will try to exploit
   vulnerabilities in both the underlying technology and the smart contract
   code itself. While many tools already exist for analyzing
   vulnerabilities in smart contracts, the heterogeneity and variety of
   approaches and differences in providing the analysis data makes the
   learning curve for the smart contract developer steep. In this article
   the authors present ESAF (Ethereum Security Analysis Framework), a
   framework for analysis of smart contracts that aims to unify and
   facilitate the task of analyzing smart contract vulnerabilities which
   can be used as a persistent security monitoring tool for a set of target
   contracts as well as a classic vulnerability analysis tool among other
   uses.}},
	address = {{RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS}},
	affiliation = {{Villalba, LJG (Corresponding Author), Univ Complutense Madrid UCM, Fac Comp Sci \& Engn, Dept Software Engn \& Artificial Intelligence DISI, Grp Anal Secur \& Syst GASS,Off 431, Calle Prof Jose Garcia Santesmases 9,Ciudad Univ, Madrid 28040, Spain. Lopez Vivar, Antonio; Sandoval Orozco, Ana Lucila; Garcia Villalba, Luis Javier, Univ Complutense Madrid UCM, Fac Comp Sci \& Engn, Dept Software Engn \& Artificial Intelligence DISI, Grp Anal Secur \& Syst GASS,Off 431, Calle Prof Jose Garcia Santesmases 9,Ciudad Univ, Madrid 28040, Spain.}},
	author = {Lopez Vivar, Antonio and Sandoval Orozco, Ana Lucila and Garcia Villalba, Luis Javier},
	author-email = {{alopezvivar@fdi.ucm.es asandoval@fdi.ucm.es javiergv@fdi.ucm.es}},
	da = {{2021-11-07}},
	doc-delivery-number = {{TI0HQ}},
	doi = {{10.1016/j.comcom.2021.03.008}},
	eissn = {{1873-703X}},
	funding-acknowledgement = {{European Unions Horizon 2020 research and innovation programme {[}700326]; THEIA (Techniques for Integrity and Authentication of Multimedia Files of Mobile Devices) UCM project {[}FEI-EU-1904]}},
	funding-text = {{This project has received funding from the European Unions Horizon 2020 research and innovation programme under grant agreement No 700326. Website: http://ramses2020.eu.Also this work has received funding from THEIA (Techniques for Integrity and Authentication of Multimedia Files of Mobile Devices) UCM project (FEI-EU-1904).}},
	issn = {{0140-3664}},
	journal = {{COMPUTER COMMUNICATIONS}},
	journal-iso = {{Comput. Commun.}},
	keywords = {{Blockchain; Ethereum; Secure development; Security; Smart contracts}},
	keywords-plus = {{INTERNET}},
	language = {{English}},
	month = {{APR 15}},
	number-of-cited-references = {{38}},
	orcid-numbers = {{Garcia Villalba, Luis Javier/0000-0001-7573-6272}},
	pages = {{119-129}},
	publisher = {{ELSEVIER}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	researcherid-numbers = {{Garcia Villalba, Luis Javier/N-4631-2014}},
	times-cited = {{2}},
	title = {{A security framework for Ethereum smart contracts}},
	type = {{Article}},
	unique-id = {{WOS:000672462600013}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{4}},
	volume = {{172}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1016/j.comcom.2021.03.008}}

@article{WOS:000591303900040,
	abstract = {{Ethereum started the blockchain-based smart contract technology that due
   to its scalability more and more decentralized applications are now
   based on. On the downside this has led to the exposure of more and more
   security issues and challenges, which has gained widespread attention in
   terms of research in the field of Ethereum smart contract
   vulnerabilities in both academia and industry. This article presents a
   survey of the Ethereum smart contract's various vulnerabilities and the
   corresponding defense mechanisms that have been applied to combat them.
   In particular, we focus on the random number vulnerability in the
   Fomo3d-like game contracts, as well as that attack and defense methods
   applied. Finally, we summarize the existing Ethereum smart contract
   security audit methods and compare several mainstream audit tools from
   various perspectives.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{He, DJ (Corresponding Author), East China Normal Univ, Sch Software Engn, Shanghai, Peoples R China. He, Daojing; Deng, Zhi; Zhang, Yuxing, East China Normal Univ, Sch Software Engn, Shanghai, Peoples R China. Chan, Sammy, City Univ Hong Kong, Dept Elect Engn, Hong Kong, Peoples R China. Cheng, Yao, ASTAR, Inst Infocomm Res, Singapore, Singapore. Guizani, Nadra, Purdue Univ, Sch Elect \& Comp Engn, W Lafayette, IN 47907 USA.}},
	author = {He, Daojing and Deng, Zhi and Zhang, Yuxing and Chan, Sammy and Cheng, Yao and Guizani, Nadra},
	da = {{2021-11-07}},
	doc-delivery-number = {{OU1OI}},
	doi = {{10.1109/MNET.001.1900656}},
	eissn = {{1558-156X}},
	funding-acknowledgement = {{National Key R\&D Program of China {[}2017YFB0802805, 2017YFB0801701]; National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}U1936120, U1636216]; Ministry of Education of China for Equipment Preresearch {[}6141A020333]; Shanghai Knowledge Service Platform for Trustworthy Internet of Things {[}ZF1213]; Fok Ying Tung Education Foundation of ChinaFok Ying Tung Education Foundation {[}171058]; Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities}},
	funding-text = {{This research is supported by the National Key R\&D Program of China (2017YFB0802805 and 2017YFB0801701); the National Natural Science Foundation of China (Grants: U1936120 and U1636216); the Joint Fund of the Ministry of Education of China for Equipment Preresearch (No. 6141A020333); the Shanghai Knowledge Service Platform for Trustworthy Internet of Things (No. ZF1213); the Fok Ying Tung Education Foundation of China (Grant 171058); and the Fundamental Research Funds for the Central Universities. Daojing He is the corresponding author of this article.}},
	issn = {{0890-8044}},
	journal = {{IEEE NETWORK}},
	journal-iso = {{IEEE Netw.}},
	keywords = {{Contracts; Games; Bitcoin; Computer hacking; Industries}},
	language = {{English}},
	month = {{SEP-OCT}},
	number = {{5}},
	number-of-cited-references = {{9}},
	orcid-numbers = {{Deng, Zhi/0000-0002-7462-8410}},
	pages = {{276-282}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{1}},
	title = {{Smart Contract Vulnerability Analysis and Security Audit}},
	type = {{Article}},
	unique-id = {{WOS:000591303900040}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{13}},
	volume = {{34}},
	web-of-science-categories = {{Computer Science, Hardware \& Architecture; Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/MNET.001.1900656}}

@inproceedings{WOS:000542117600042,
	abstract = {{Smart contracts are executable programs that enable the building of a
   programmable trust mechanism between multiple entities without the need
   of a trusted third-party. At the time of this writing, there were over
   10 million smart contracts deployed on the Ethereum networks and this
   number continues to grow at a rapid pace. Smart contracts are often
   written in a Turing-complete programming language called Solidity, which
   is not easy to audit for subtle errors. Further, since smart contracts
   are immutable, errors have led to attacks resulting in losses of
   cryptocurrency worth 100s of millions of USD and reputational damage.
   Unfortunately, manual security analyses do not scale with size and
   number of smart contracts. Automated and scalable mechanisms are
   essential if smart contracts are to gain main-stream acceptance.
   Researchers have developed several security scanners in the past couple
   of years. However, many of these analyzer either do not scale well, or
   if they do, produce many false positives. This issue is exacerbated when
   bugs are triggered only after a series of interactions with the
   functions of the contractunder-test. A depth-n vulnerability, refers to
   a vulnerability that requires invoking a specific sequence of n
   functions to trigger. Depth-n vulnerabilities are time-consuming to
   detect by existing automated analyzers, because of the combinatorial
   explosion of sequences of functions that could be executed on smart
   contracts.
   In this paper, we present a technique to analyze depth-n vulnerabilities
   in an efficient and scalable way by combining symbolic execution and
   data dependency analysis. A significant advantage of combining symbolic
   with static analysis is that it scales much better than symbolic alone
   and does not have the problem of false positive that static analysis
   tools typically have. We have implemented our technique in a tool called
   MPro, a scalable and automated smart contract analyzer based on the
   existing symbolic analysis tool Mythril-Classic and the static analysis
   tool Slither. We analyzed 100 randomly chosen smart contracts on MPro
   and our evaluation shows that MPro is about n-times faster than
   Mythril-Classic for detecting depth-n vulnerabilities, while preserving
   all the detection capabilities of Mythril-Classic.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Zhang, W (Corresponding Author), Univ Waterloo, Waterloo, ON, Canada. Zhang, William; Ganesh, Vijay, Univ Waterloo, Waterloo, ON, Canada. Banescu, Sebastian; Pasos, Leodardo; Stewart, Steven, Quantstamp Inc, Blockchain Dev Labs, San Francisco, CA USA.}},
	author = {Zhang, William and Ganesh, Vijay and Banescu, Sebastian and Pasos, Leodardo and Stewart, Steven},
	author-email = {{william.zhang@waterloo.ca vijay.ganesh@waterloo.ca sebi@quatnstamp.com leo@quatnstamp.com steven@quatnstamp.com}},
	booktitle = {{2019 IEEE 30TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP2EH}},
	doi = {{10.1109/ISSRE.2019.00052}},
	editor = {{Wolter, K and Schieferdecker, I and Gallina, B and Cukier, M and Natella, R and Ivaki, N and Laranjeiro, N}},
	isbn = {{978-1-7281-4982-0}},
	issn = {{1071-9458}},
	keywords = {{Blockchain; Smart Contract; Symbolic Execution; Static Analysis}},
	language = {{English}},
	note = {{30th IEEE International Symposium on Software Reliability Engineering (ISSRE), Berlin, GERMANY, OCT 28-31, 2019}},
	number-of-cited-references = {{18}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Ganesh, Vijay/0000-0002-6029-2047}},
	organization = {{IEEE; IEEE Comp Soc; Bosch; Concordia; iRights Lab; German Testing Board e V; Verteilte Intelligente Systeme e V; IEEE Reliablil Soc}},
	pages = {{456-462}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science; Engineering}},
	series = {{Proceedings International Symposium on Software Reliability Engineering}},
	times-cited = {{1}},
	title = {{MPro: Combining Static and Symbolic Analysis for Scalable Testing of Smart Contract}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000542117600042}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering; Engineering, Electrical \& Electronic}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ISSRE.2019.00052}}

@article{WOS:000546538400002,
	abstract = {{The smart contracts deployed in Ethereum carry huge amounts of virtual
   coins. However, there are vulnerabilities in some of these smart
   contracts, which makes them vulnerable to malicious attacks. Due to the
   characteristics of blockchain, such vulnerable contracts are difficult
   to be revoked. In order to prevent vulnerable contracts, it is very
   important to detect the loopholes in these contracts before their
   deployment. In this paper, we focus on three vulnerabilities of smart
   contract:has\_short\_address,has\_flowsandis\_greedy. For the three
   kinds of vulnerabilities, we propose slicing matrix, a new method to
   extract vulnerability feature, and construct three vulnerability
   detection models for comparison. The experimental results show that the
   detection accuracy based on neural network and slice matrix is better
   than that based on neural network and opcode features. In other words,
   slice matrix can improve the accuracy of vulnerable contract detection.
   Among our three detection models, the model based on random forest and
   opcode features performs best.}},
	address = {{VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS}},
	affiliation = {{Li, J (Corresponding Author), Guangzhou Univ, Coll Comp Sci \& Network Engn, Guangzhou, Peoples R China. Xing, Cipai; Chen, Zhuorong; Chen, Lexin; Li, Jin, Guangzhou Univ, Coll Comp Sci \& Network Engn, Guangzhou, Peoples R China. Guo, Xiaojie, Nankai Univ, Coll Comp Sci, Tianjin, Peoples R China. Zheng, Zibin, Sun Yat Sen Univ, Sch Data \& Comp Sci, Guangzhou, Peoples R China.}},
	author = {Xing, Cipai and Chen, Zhuorong and Chen, Lexin and Guo, Xiaojie and Zheng, Zibin and Li, Jin},
	author-email = {{lijin@gzhu.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{MH2BY}},
	doi = {{10.1007/s11276-020-02379-z}},
	early-access-date = {{JUL 2020}},
	eissn = {{1572-8196}},
	issn = {{1022-0038}},
	journal = {{WIRELESS NETWORKS}},
	journal-iso = {{Wirel. Netw.}},
	keywords = {{Smart contract; Slice matrix; Vulnerability; Multi-label classification; Ethereum}},
	language = {{English}},
	number-of-cited-references = {{30}},
	publisher = {{SPRINGER}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{2}},
	title = {{A new scheme of vulnerability analysis in smart contract with machine learning}},
	type = {{Article; Early Access}},
	unique-id = {{WOS:000546538400002}},
	usage-count-last-180-days = {{15}},
	usage-count-since-2013 = {{21}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	bdsk-url-1 = {https://doi.org/10.1007/s11276-020-02379-z}}

@inproceedings{WOS:000630446300014,
	abstract = {{A blockchain records transactions among users on a public ledger. It has
   become front and center of the technology discussion in recent years. A
   piece of code deployed on a ledger and executed automatically by nodes
   on the network is a smart contract. While smart contracts have enabled a
   variety of applications on blockchain, they may contain security
   vulnerabilities, leading to massive research on smart contract analysis.
   This paper presents the first comprehensive survey over smart contract
   analysis by collecting 391 papers, extracting 67 analysis-related ones,
   and classifying them into three dominant topics: static analysis for
   vulnerability detection, static analysis for program correctness, and
   dynamic analysis. We further classify each topic and conclude with key
   insights in terms of unsolved challenges and directions in future
   research.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Kim, S (Corresponding Author), Korea Adv Inst Sci \& Technol, Sch Comp, Daejeon, South Korea. Kim, Shinhae; Ryu, Sukyoung, Korea Adv Inst Sci \& Technol, Sch Comp, Daejeon, South Korea.}},
	author = {Kim, Shinhae and Ryu, Sukyoung},
	author-email = {{shinhae1106@kaist.ac.kr sryu.cs@kaist.ac.kr}},
	book-group-author = {{IEEE}},
	booktitle = {{2020 IEEE SECURE DEVELOPMENT (SECDEV 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR0TE}},
	doi = {{10.1109/SecDev45635.2020.00026}},
	funding-acknowledgement = {{National Research Foundation of Korea (NRF)National Research Foundation of Korea {[}NRF-2017R1A2B3012020, 2017M3C4A7068177]; Institute for Information AMP; communications Technology Promotion(IITP) - Korea government (MSIT) {[}2018-0-00251]}},
	funding-text = {{This work was supported by National Research Foundation of Korea (NRF) (Grants NRF-2017R1A2B3012020 and 2017M3C4A7068177) and the Institute for Information \& communications Technology Promotion(IITP) grant funded by the Korea government (MSIT) (2018-0-00251).}},
	isbn = {{978-1-7281-8388-6}},
	keywords = {{Blockchain; smart contract; static analysis; dynamic analysis}},
	language = {{English}},
	note = {{IEEE Secure Development (IEEE SecDev) Conference, ELECTR NETWORK, SEP 28-30, 2020}},
	number-of-cited-references = {{101}},
	organization = {{IEEE Comp Soc; NSF; Cisco; Off Naval Res}},
	pages = {{65-73}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science; Engineering}},
	times-cited = {{0}},
	title = {{Analysis of Blockchain Smart Contracts: Techniques and Insights}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000630446300014}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Theory \& Methods; Engineering, Electrical \& Electronic}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/SecDev45635.2020.00026}}

@article{WOS:000484100100001,
	abstract = {{Ethereum is one of the currently popular trading platform, where any one
   can exchange, buy, or sell cryptocurrencies. Smart contract, a computer
   program, can help Ethereum to encode rules or scripts for processing
   transactions. Because the smart contract usually handles large number of
   cryptocurrencies worth billions of dollars apiece, its security has
   gained considerable attention. In this paper, we first investigate the
   security of smart contracts running on the Ethereum and introduce
   several new security vulnerabilities that allow adversaries to exploit
   and gain financial benefits. Then, we propose a more practical smart
   contract analysis tool termed NeuCheck, in which we introduce the syntax
   tree in the syntactical analyzer to complete the transformation from
   source code to intermediate representation, and then adopt the open
   source library working with XML to analyze such tree. We have built a
   prototype of NeuCheck for Ethereum and evaluate it with over 52 000
   existing Ethereum smart contracts. The results show that (1) our new
   documented vulnerabilities are prevalent; (2) NeuCheck improves the
   analysis speed by at least 17.2 times compared to other popular analysis
   tools (eg, Securify and Mythril; and (3) allows for cross-platform
   deployment.}},
	address = {{111 RIVER ST, HOBOKEN 07030-5774, NJ USA}},
	affiliation = {{Shi, WB (Corresponding Author), Northeastern Univ, Coll Comp Sci \& Engn, Shenyang, Liaoning, Peoples R China. Lu, Ning; Wang, Bin; Zhang, Yongxin; Shi, Wenbo, Northeastern Univ, Coll Comp Sci \& Engn, Shenyang, Liaoning, Peoples R China. Lu, Ning, Xidian Univ, Sch Comp Sci \& Technol, Xian, Shaanxi, Peoples R China. Esposito, Christian, Univ Salerno, Dept Comp Sci, Fisciano, Italy.}},
	author = {Lu, Ning and Wang, Bin and Zhang, Yongxin and Shi, Wenbo and Esposito, Christian},
	author-email = {{shiwb@neuq.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{UN1VW}},
	doi = {{10.1002/spe.2745}},
	early-access-date = {{AUG 2019}},
	eissn = {{1097-024X}},
	funding-acknowledgement = {{National Nature Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61601107, U1708262, 61472074]; Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities {[}N172304023]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2019M653568]}},
	funding-text = {{National Nature Science Foundation of China, Grant/Award Number: 61601107, U1708262 and 61472074; Fundamental Research Funds for the Central Universities, Grant/Award Number: N172304023; China Postdoctoral Science Foundation, Grant/Award Number: 2019M653568}},
	issn = {{0038-0644}},
	journal = {{SOFTWARE-PRACTICE \& EXPERIENCE}},
	journal-iso = {{Softw.-Pract. Exp.}},
	keywords = {{blockchain; Ethereum; security analysis; smart contract}},
	language = {{English}},
	month = {{OCT}},
	number = {{10, SI}},
	number-of-cited-references = {{33}},
	orcid-numbers = {{ESPOSITO, Christiancarmine/0000-0002-0085-0748 Lu, ning/0000-0001-7325-7307}},
	pages = {{2065-2084}},
	publisher = {{WILEY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{ESPOSITO, Christiancarmine/AAI-4626-2020 }},
	times-cited = {{2}},
	title = {{NeuCheck: A more practical Ethereum smart contract security analysis tool}},
	type = {{Article}},
	unique-id = {{WOS:000484100100001}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{18}},
	volume = {{51}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1002/spe.2745}}

@article{WOS:000510400600001,
	abstract = {{The second generation of blockchain represented by smart contracts has
   been developing vigorously in recent years. However, frequent smart
   contract vulnerability incidents pose a serious risk to blockchain
   ecosystem security. Since current symbol execution tools often fall into
   path explosion and thus lead to inefficient detection, this paper
   expands Mythril's framework to optimize its performance. Firstly, it
   finds out potential vulnerable code regions using static analysis and
   identifies critical paths that may have security defects. Then, aiming
   at the problem that traditional search algorithms cannot actively locate
   and explore critical paths, this paper presents a multi-objective
   oriented path search (MOPS) strategy based on path priority. This
   strategy guides dynamic symbolic execution to cover critical paths
   quickly, avoiding blind traversal of program execution paths. Finally,
   it describes security rules and proposes corresponding detection logics
   for different vulnerability categories. This paper analyzes over 1000
   smart contracts extracted from Etherscan. Compared with existing tools
   based on symbolic execution, the proposed method can reduce time
   consumption by around 35\% while ensuring the accuracy of vulnerability
   detection. Moreover, existing tools often issue warnings that do not
   actually cause financial losses. But the proposed method only
   concentrates on code regions related to transfer of funds, so it can
   reduce the false alarm rate to some extent.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Wu, LF (Corresponding Author), Nanjing Univ Posts \& Telecommun, Sch Comp Sci, Nanjing 210003, Peoples R China. Fu, Menglin; Hong, Zheng; Sun, He; Feng, Wenbo, Army Engn Univ PLA, Command \& Control Engn Coll, Nanjing 210007, Peoples R China. Wu, Lifa; Zhu, Feng, Nanjing Univ Posts \& Telecommun, Sch Comp Sci, Nanjing 210003, Peoples R China.}},
	author = {Fu, Menglin and Wu, Lifa and Hong, Zheng and Zhu, Feng and Sun, He and Feng, Wenbo},
	author-email = {{wulifa@njupt.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{KH1IR}},
	doi = {{10.1109/ACCESS.2019.2947146}},
	funding-acknowledgement = {{National Key Research and Development Program of China {[}2017YFB08029]; Nanjing University of Posts and Telecommunications Startup Foundation (NUPTSF) {[}NY219004]}},
	funding-text = {{This work was supported in part by the National Key Research and Development Program of China under Grant 2017YFB08029, and in part by the Nanjing University of Posts and Telecommunications Startup Foundation (NUPTSF) under Grant NY219004.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Block chain security; smart contract; vulnerability mining}},
	language = {{English}},
	number-of-cited-references = {{42}},
	oa = {{gold}},
	orcid-numbers = {{Menglin, Fu/0000-0003-2363-3233}},
	pages = {{147327-147344}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{1}},
	title = {{A Critical-Path-Coverage-Based Vulnerability Detection Method for Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000510400600001}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{5}},
	volume = {{7}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2019.2947146}}

@article{WOS:000672695700014,
	abstract = {{A smart contract honeypot is a special type of smart contract. This type
   of contract seems to have obvious vulnerabilities in contract design. If
   a user transfers a certain amount of funds to the contract, then the
   user can withdraw the funds in the contract. However, once users try to
   take advantage of this seemingly obvious vulnerability, they will fall
   into a real trap. Consequently, the user's investment in the contract
   cannot be retrieved. The honeypot induces other accounts to launch
   funds, which seriously threatens the security of property on the
   blockchain. Detection methods for honeypots are available. However,
   studying the manner by which to defend existing honeypots is
   insufficient to fight against honeypots. The new honeypots that may
   appear in the future from the perspective of an attacker must also be
   predicted. Therefore, we propose a type of adversarial honeypot. The
   code and behavioral features of honeypots are obtained through a
   comparative analysis of the 158,568 non-honeypots and 352 honeypots. To
   build an adversarial honeypot, we try to separately hide these features
   and make the honeypot bypass the existing detection technology. We
   construct 18 instances on the basis of the proposed adversarial honeypot
   and use an open-source honeypot detection tool to detect these
   instances. The experimental result shows that the proposed honeypot can
   bypass the detection tool with a 100\% ratio. Therefore, this type of
   honeypot should be given attention, and defensive measures should be
   proposed as soon as possible.}},
	address = {{871 CORONADO CENTER DR, SUTE 200, HENDERSON, NV 89052 USA}},
	affiliation = {{Wang, ZR (Corresponding Author), Beijing Univ Posts \& Telecommun, Minist Educ, Key Lab Trustworthy Distributed Comp \& Serv BUPT, Beijing 100876, Peoples R China. Wang, ZR (Corresponding Author), Chinese Acad Cyberspace Studies, Beijing 100010, Peoples R China. Liu, H (Corresponding Author), Qianxin Technol Grp Co Ltd, Beijing 100088, Peoples R China. Han, Yu; Ji, Tiantian; Wang, Zhongru; Wang, Wendi, Beijing Univ Posts \& Telecommun, Minist Educ, Key Lab Trustworthy Distributed Comp \& Serv BUPT, Beijing 100876, Peoples R China. Wang, Zhongru, Chinese Acad Cyberspace Studies, Beijing 100010, Peoples R China. Liu, Hao, Qianxin Technol Grp Co Ltd, Beijing 100088, Peoples R China. Jiang, Hai, Beijing DigApis Technol Co Ltd, Beijing, Peoples R China. Cui, Xiang, Guangzhou Univ, Cyberspace Inst Adv Technol, Guangzhou 510006, Peoples R China.}},
	author = {Han, Yu and Ji, Tiantian and Wang, Zhongru and Liu, Hao and Jiang, Hai and Wang, Wendi and Cui, Xiang},
	author-email = {{wangzhongru@bupt.edu.cn liuhao@qianxin.com}},
	da = {{2021-11-07}},
	doc-delivery-number = {{TI3LP}},
	doi = {{10.32604/cmes.2021.015809}},
	eissn = {{1526-1506}},
	funding-acknowledgement = {{Guangdong Province Key Field Research and Development Program {[}2019B010137003, 2019B010136004]; National Key Research and Development Program {[}2018YFB0803504, 2019YFA0706404]}},
	funding-text = {{This work was supported by the Guangdong Province Key Field Research and Development Program under Nos. 2019B010137003 and 2019B010136004, the National Key Research and Development Program under Grant Nos. 2018YFB0803504 and 2019YFA0706404.}},
	issn = {{1526-1492}},
	journal = {{CMES-COMPUTER MODELING IN ENGINEERING \& SCIENCES}},
	journal-iso = {{CMES-Comp. Model. Eng. Sci.}},
	keywords = {{Honeypot; smart contract; adversarial; bypass detection}},
	language = {{English}},
	number = {{1}},
	number-of-cited-references = {{22}},
	oa = {{gold}},
	pages = {{247-267}},
	publisher = {{TECH SCIENCE PRESS}},
	research-areas = {{Engineering; Mathematics}},
	times-cited = {{0}},
	title = {{An Adversarial Smart Contract Honeypot in Ethereum}},
	type = {{Article}},
	unique-id = {{WOS:000672695700014}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{4}},
	volume = {{128}},
	web-of-science-categories = {{Engineering, Multidisciplinary; Mathematics, Interdisciplinary Applications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.32604/cmes.2021.015809}}

@inproceedings{WOS:000680713300080,
	abstract = {{Recently, a number of existing blockchain systems have witnessed major
   bugs and vulnerabilities within smart contracts. Although the literature
   features a number of proposals for securing smart contracts, these
   proposals mostly focus on proving the correctness or absence of a
   certain type of vulnerability within a contract, but cannot protect
   deployed (legacy) contracts from being exploited. In this paper, we
   address this problem in the context of re-entrancy exploits and propose
   a novel smart contract security technology, dubbed Sereum (Secure
   Ethereum), which protects existing, deployed contracts against
   re-entrancy attacks in a backwards compatible way based on run-time
   monitoring and validation. Sereum does neither require any modification
   nor any semantic knowledge of existing contracts. By means of
   implementation and evaluation using the Ethereum blockchain, we show
   that Sereum covers the actual execution flow of a smart contract to
   accurately detect and prevent attacks with a false positive rate as
   small as 0.06\% and with negligible run-time overhead. As a by-product,
   we develop three advanced re-entrancy attacks to demonstrate the
   limitations of existing offline vulnerability analysis tools.}},
	address = {{1775 WIEHLE AVE, STE 201, RESTON, VA, UNITED STATES}},
	affiliation = {{Rodler, M (Corresponding Author), Univ Duisburg Essen, Duisburg, Germany. Rodler, Michael; Davi, Lucas, Univ Duisburg Essen, Duisburg, Germany. Li, Wenting; Karame, Ghassan O., NEC Labs Europe, Heidelberg, Germany.}},
	author = {Rodler, Michael and Li, Wenting and Karame, Ghassan O. and Davi, Lucas},
	author-email = {{michael.rodler@uni-due.de wenting.li@neclab.eu ghassan@karame.org lucas.davi@uni-due.de}},
	book-group-author = {{Internet Soc}},
	booktitle = {{26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS0BA}},
	doi = {{10.14722/ndss.2019.23413}},
	funding-acknowledgement = {{DFGGerman Research Foundation (DFG)European Commission {[}CRC 1119 CROSSING]}},
	funding-text = {{This work has been partially funded by the DFG as part of project S2 within the CRC 1119 CROSSING.}},
	isbn = {{978-1-891562-55-6}},
	language = {{English}},
	note = {{26th Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, FEB 24-27, 2019}},
	number-of-cited-references = {{31}},
	oa = {{Green Submitted, Bronze}},
	publisher = {{INTERNET SOC}},
	research-areas = {{Computer Science}},
	times-cited = {{4}},
	title = {{Sereum: Protecting Existing Smart Contracts Against Re-Entrancy Attacks}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000680713300080}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.14722/ndss.2019.23413}}

@article{WOS:000595994900001,
	abstract = {{We address the absence of reliable tests on contract analyzers of smart
   contracts and present a systematic method to diversify test cases by
   combining smart-contract-specific bugs and static analysis barriers in
   this paper. Using contract analyzers is the most practical solution for
   building a secure blockchain service, but they are relatively immature
   and lacking stable performance metrics. Traditionally, performance
   reports only compare static contract analyzers with pre-defined test
   cases, such as the Juliet test suite. However, building such test suites
   is burdensome for smart contracts, which are frequently change. In this
   paper, we propose an automated method to assess contract analyzers of
   smart contracts by diversifying test cases. In the experimental results,
   we identified nine erroneous alarms in the state-of-the-art contract
   analyzers with automatically generated test cases on five
   vulnerabilities.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Lee, J (Corresponding Author), Gachon Univ, Dept Math Finance, Seongnam 13120, South Korea. Kim, Ki Byung; Lee, Jonghyup, Gachon Univ, Dept Math Finance, Seongnam 13120, South Korea.}},
	author = {Kim, Ki Byung and Lee, Jonghyup},
	author-email = {{jonghyup@gachon.ac.kr}},
	da = {{2021-11-07}},
	doc-delivery-number = {{PB0CF}},
	doi = {{10.1109/ACCESS.2020.3039990}},
	funding-acknowledgement = {{National Research Foundation of Korea (NRF) - Korean Government {[}Ministry of Science and ICT (MSIT)] {[}2020R1F1A1071943]}},
	funding-text = {{This work was supported by the National Research Foundation of Korea (NRF) Grant funded by the Korean Government {[}Ministry of Science and ICT (MSIT)] under Grant 2020R1F1A1071943.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Smart contracts; Contracts; Computer bugs; Blockchain; Arrays; Encoding; Static analysis; Smart contracts; static analysis; security audits; honey pots}},
	language = {{English}},
	number-of-cited-references = {{18}},
	oa = {{gold}},
	orcid-numbers = {{Lee, JongHyup/0000-0001-8122-3377}},
	pages = {{209377-209392}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{0}},
	title = {{Automated Generation of Test Cases for Smart Contract Security Analyzers}},
	type = {{Article}},
	unique-id = {{WOS:000595994900001}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{4}},
	volume = {{8}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2020.3039990}}

@inproceedings{WOS:000568240800003,
	abstract = {{The immutable feature of blockchain determines that traditional security
   response mechanisms (e.g., code patching) must change to remedy insecure
   smart contracts. The only proper way to protect a smart contract is to
   fix potential risks in its code before it is deployed to the blockchain.
   However, existing tools for smart contract security analysis focus on
   the detection of bugs but seldom consider the code fix issues.
   Meanwhile, it is often time-consuming and error-prone for a developer to
   understand and fix flawed code manually. In this paper we propose SMART
   SHIELD, a bytecode rectification system, to fix three typical
   security-related bugs (i.e., state changes after external calls, missing
   checks for out-of-bound arithmetic operations, and missing checks for
   failing external calls) in smart contracts automatically and help
   developers release secure contracts. Moreover, SMART SHIELD guarantees
   that the rectified contract is not only immune to certain attacks but
   also gas-friendly (i.e., a slightly increase of gas cost). To evaluate
   the effectiveness and efficiency of SMART SHIELD, we applied it to
   28,621 real-world buggy contracts on Ethereum blockchain (as of January
   2nd 2019). Experiment results demonstrated that among 95,502 insecure
   cases in those contracts, 87,346 (91.5\%) of them were automatically
   fixed by SMART SHIELD. A following test with both program analysis and
   real-world exploits further testified that the rectified contracts were
   secure against common attacks. Moreover, the rectification only
   introduced a 0.2\% gas increment for each contract on average.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Li, JR (Corresponding Author), Shanghai Jiao Tong Univ, Shanghai, Peoples R China. Ma, SQ (Corresponding Author), CSIRO, Data61, Sydney, NSW, Australia. Zhang, Yuyao; Li, Juanru; Li, Kailai; Gu, Dawu, Shanghai Jiao Tong Univ, Shanghai, Peoples R China. Ma, Siqi; Nepal, Surya, CSIRO, Data61, Sydney, NSW, Australia.}},
	author = {Zhang, Yuyao and Ma, Siqi and Li, Juanru and Li, Kailai and Nepal, Surya and Gu, Dawu},
	author-email = {{breakingpoint@sjtu.edu.cn siqi.ma@csiro.au jarod@sjtu.edu.cn silence\_916@sjtu.edu.cn surya.nepal@csiro.au dwgu@sjtu.edu.cn}},
	booktitle = {{PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER `20)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP8WU}},
	editor = {{Kontogiannis, K and Khomh, F and Chatzigeorgiou, A and Fokaefs, ME and Zhou, M}},
	funding-acknowledgement = {{Key Program of National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}U1636217]; General Program of National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61872237]; National Key Research and Development Program of China {[}2016QY071401]; Ant Financial Services Group}},
	funding-text = {{The authors would like to thank the anonymous reviewers for their valuable feedback. This work was partially supported by the Key Program of National Natural Science Foundation of China (Grant No.U1636217), the General Program of National Natural Science Foundation of China (Grant No.61872237), and the National Key Research and Development Program of China (Grant No.2016QY071401). We especially thank Ant Financial Services Group for the support of this research within the SJTU-AntFinancial Security Research Centre.}},
	isbn = {{978-1-7281-5143-4}},
	keywords = {{Ethereum blockchain; Smart contract; Automated bug fix; Bytecode rectification}},
	language = {{English}},
	note = {{27th IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER), London, CANADA, FEB 18-21, 2020}},
	number-of-cited-references = {{36}},
	organization = {{IEEE; IEEE Comp Soc; Western Univ; IEEE Tech Council Software Engn}},
	pages = {{23-34}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{3}},
	title = {{SMARTSHIELD: Automatic Smart Contract Protection Made Easy}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000568240800003}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}}}

@inproceedings{WOS:000448864200073,
	abstract = {{Currently, Bitcoin and Ethereum are the two most popular cryptocurrency
   systems, especially Ethereum. It permits complex financial transactions
   or rules through scripts, which is called smart contracts. Since
   Ethereum smart contracts hold millions of dollars, their execution
   correctness is crucial against attacks which aim at stealing the assets.
   In this paper, we proposed a security assurance method for smart
   contract source code to find potential security risks. It contains two
   main functions, the first is syntax topological analysis of smart
   contract invocation relationship, to help developers to understand their
   code structure clearly; the second is logic risk (which may lead to
   vulnerabilities) detection and location, and label results on topology
   diagram. For developers' convenience, we have built a static analysis
   tool called SASC to generate topology diagram of invocation relationship
   and to find potential logic risks. We have made an evaluation on 2,952
   smart contracts, experiment results proved that our method is intuitive
   and effective.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Zhou, E (Corresponding Author), Fujitsu Res \& Dev Ctr, Informat Technol Lab, Suzhou, Peoples R China. Zhou, Ence; Hua, Song; Pi, Bingfeng, Fujitsu Res \& Dev Ctr, Informat Technol Lab, Suzhou, Peoples R China. Sun, Jun, Fujitsu Res \& Dev Ctr, Informat Technol Lab, Beijing, Peoples R China. Nomura, Yashihide; Yamashita, Kazuhiro; Kurihara, Hidetoshi, Fujitsu Labs Ltd, Informat Syst Technol Lab, Kawasaki, Kanagawa, Japan.}},
	author = {Zhou, Ence and Hua, Song and Pi, Bingfeng and Sun, Jun and Nomura, Yashihide and Yamashita, Kazuhiro and Kurihara, Hidetoshi},
	author-email = {{zhouence@cn.fujitsu.com huasong@cn.fujitsu.com winter.pi@cn.fujitsu.com sunjun@cn.fujitsu.com y.nomura@jp.fujitsu.com y-kazuhiro@jp.fujitsu.com kurihara.hide@jp.fujitsu.com}},
	book-group-author = {{IEEE}},
	booktitle = {{2018 9TH IFIP INTERNATIONAL CONFERENCE ON NEW TECHNOLOGIES, MOBILITY AND SECURITY (NTMS)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BL2CQ}},
	isbn = {{978-1-5386-3662-6}},
	issn = {{2157-4952}},
	keywords = {{ethereum blockchain; smart contract; topological analysis; logic risk location; security assurance}},
	language = {{English}},
	note = {{9th IFIP International Conference on New Technologies, Mobility and Security (NTMS), Paris, FRANCE, FEB 26-28, 2018}},
	number-of-cited-references = {{6}},
	organization = {{IFIP TC6 5 Working Grp; IEEE; System X Inst Rech Technologique; LiP6; CNRS; TELECOM ParisTech; IEEE Commun Soc}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	series = {{International Conference on New Technologies Mobility and Security}},
	times-cited = {{3}},
	title = {{Security Assurance for Smart Contract}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000448864200073}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Theory \& Methods; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2018}}}

@article{WOS:000673738000001,
	abstract = {{Blockchain technology, which provides digital security in a distributed
   manner, has evolved into a key technology that can build efficient and
   reliable decentralized applications (called DApps) beyond the function
   of cryptocurrency. The characteristics of blockchain such as
   immutability and openness, however, have made DApps more vulnerable to
   various security risks, and thus it has become of great significance to
   validate the integrity of DApps before they actually operate upon
   blockchain. Recently, research on vulnerability in smart contracts (a
   building block of DApps) has been actively conducted, and various
   vulnerabilities and their countermeasures were reported. However, the
   effectiveness of such countermeasures has not been studied well, and no
   appropriate methods have been proposed to evaluate them. In this paper,
   we propose a software tool that can easily perform comparative studies
   by adding existing/new countermeasures and labeled smart contract codes.
   The proposed tool demonstrates verification performance using various
   statistical indicators, which helps to identify the most effective
   countermeasures for each type of vulnerability. Using the proposed tool,
   we evaluated state-of-the-art countermeasures with 237 labeled benchmark
   codes. The results indicate that for certain types of vulnerabilities,
   some countermeasures show evenly good performance scores on various
   metrics. However, it is also observed that countermeasures that detect
   the largest number of vulnerable codes typically generate much more
   false positives, resulting in very low precision and accuracy.
   Consequently, under given constraints, different countermeasures may be
   recommended for detecting vulnerabilities of interest. We believe that
   the proposed tool could effectively be utilized for a future
   verification study of smart contract applications and contribute to the
   development of practical and secure smart contract applications.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Kim, D; Im, H (Corresponding Author), Kangwon Natl Univ, Interdisciplinary Grad Program Med Bigdata Conver, Chunchon 24341, South Korea. Kim, D; Im, H (Corresponding Author), Kangwon Natl Univ, Dept Comp Sci \& Engn, Chunchon 24341, South Korea. Ji, Suhwan; Kim, Dohyung; Im, Hyeonseung, Kangwon Natl Univ, Interdisciplinary Grad Program Med Bigdata Conver, Chunchon 24341, South Korea. Kim, Dohyung; Im, Hyeonseung, Kangwon Natl Univ, Dept Comp Sci \& Engn, Chunchon 24341, South Korea.}},
	author = {Ji, Suhwan and Kim, Dohyung and Im, Hyeonseung},
	author-email = {{d.kim@kangwon.ac.kr hsim@kangwon.ac.kr}},
	da = {{2021-11-07}},
	doc-delivery-number = {{TJ8QB}},
	doi = {{10.1109/ACCESS.2021.3091317}},
	funding-acknowledgement = {{National Research Foundation of Korea (NRF) - Korean Government (MSIT) {[}2019R1F1A1063272, 2020R1F1A1048395, 2020R1A4A3079947]}},
	funding-text = {{This work was supported by the National Research Foundation of Korea (NRF) Grant funded by the Korean Government (MSIT) under Grant 2019R1F1A1063272, Grant 2020R1F1A1048395, and Grant 2020R1A4A3079947.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Smart contracts; Blockchain; Tools; Bitcoin; Benchmark testing; Software tools; Licenses; Blockchain; countermeasure; Ethereum; smart contract; vulnerability}},
	language = {{English}},
	number-of-cited-references = {{32}},
	oa = {{gold}},
	pages = {{90029-90042}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{0}},
	title = {{Evaluating Countermeasures for Verifying the Integrity of Ethereum Smart Contract Applications}},
	type = {{Article}},
	unique-id = {{WOS:000673738000001}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{9}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2021.3091317}}

@inproceedings{WOS:000570689200021,
	abstract = {{In recent years, vulnerabilities of smart contracts have frequently
   break out. In particular, integer overflow of smart contracts, a
   high-risk vulnerability, has caused huge financial losses. However, most
   tools currently fail to detect integer overflow in smart contracts. In
   this paper, we summarize 11 types of integer overflow features for
   Solidity smart contracts in Ethereum and abstractly define 83
   corresponding XPath patterns. And we design an extensible static
   analysis tool to detect common integer overflow vulnerabilities of
   Solidity smart contracts in Ethereum through the defined XPath patterns.
   To evaluate our tool, we tested 7,000 verified Solidity smart contracts
   and found that there were 430 smart contracts with vulnerabilities of
   integer overflow. Experimental results show that there are still
   high-risk vulnerabilities of integer overflow in verified smart
   contracts.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Lai, EM (Corresponding Author), Chongqing Univ Posts \& Telecommun, Sch Comp Sci \& Technol, Chongqing, Peoples R China. Lai, Enmei, Chongqing Univ Posts \& Telecommun, Sch Comp Sci \& Technol, Chongqing, Peoples R China. Luo, Wenjun, Chongqing Univ Posts \& Telecommun, Sch Cyber Secur \& Informat Law, Chongqing, Peoples R China.}},
	author = {Lai, Enmei and Luo, Wenjun},
	author-email = {{laienmei96@163.com luowj@cqupt.edu.cn}},
	book-group-author = {{ACM}},
	booktitle = {{2020 4TH INTERNATIONAL CONFERENCE ON CRYPTOGRAPHY, SECURITY AND PRIVACY (ICCSP 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP9RG}},
	doi = {{10.1145/3377644.3377650}},
	isbn = {{978-1-4503-7744-7}},
	keywords = {{smart contract; integer overflow; XPath; vulnerability detection}},
	language = {{English}},
	note = {{4th International Conference on Cryptography, Security and Privacy (ICCSP), Nanjing, PEOPLES R CHINA, JAN 10-12, 2020}},
	number-of-cited-references = {{12}},
	pages = {{110-115}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{3}},
	title = {{Static Analysis of Integer Overflow of Smart Contracts in Ethereum}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000570689200021}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3377644.3377650}}

@inproceedings{WOS:000689112100048,
	abstract = {{As one of the key components of blockchain, smart contract is playing a
   vital role in achieving auto-functions; however, reentrant attacks are
   threatening the implementation of smart contracts, which limits the
   adoption of blockchain systems in various scenarios. To address this
   issue, we propose a reentrant vulnerability detection model based on
   word embedding, similarity detection, and Generative Adversarial
   Networks (GAN). Additionally, we provide a new approach for dynamically
   preventing reentrant attacks. We also implement experiments to evaluate
   our model and results show our scheme achieves 92\% detecting accuracy
   for reentrant attack detection.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Gai, KK (Corresponding Author), Beijing Inst Technol, Sch Cyberspace Sci \& Technol, Beijing 100081, Peoples R China. Zhao, Hui; Su, Peng, Henan Univ, Sch Software, Kaifeng 475000, Peoples R China. Wei, Yihang, Beijing Inst Technol, Sch Comp Sci \& Technol, Beijing 100081, Peoples R China. Gai, Keke, Beijing Inst Technol, Sch Cyberspace Sci \& Technol, Beijing 100081, Peoples R China. Qiu, Meikang, Texas A\&M Univ Commerce, Commerce, TX 75428 USA.}},
	author = {Zhao, Hui and Su, Peng and Wei, Yihang and Gai, Keke and Qiu, Meikang},
	author-email = {{zhh@henu.edu.cn 3120201079@bit.edu.cn gaikeke@bit.edu.cn qiumeikang@ieee.org}},
	booktitle = {{KNOWLEDGE SCIENCE, ENGINEERING AND MANAGEMENT, PT III}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS1GM}},
	doi = {{10.1007/978-3-030-82153-1\_48}},
	editor = {{Qiu, H and Zhang, C and Fei, Z and Qiu, M and Kung, SY}},
	eissn = {{1611-3349}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61972034]; Natural Science Foundation of Beijing MunicipalityBeijing Natural Science Foundation {[}4202068]; Natural Science Foundation of Shandong ProvinceNatural Science Foundation of Shandong Province {[}ZR2019ZD10, ZR2020ZD01]}},
	funding-text = {{This work is partially supported by National Natural Science Foundation of China (Grant No. 61972034), Natural Science Foundation of Beijing Municipality (Grant No. 4202068), Natural Science Foundation of Shandong Province (Grant No. ZR2019ZD10, ZR2020ZD01).}},
	isbn = {{978-3-030-82153-1; 978-3-030-82152-4}},
	issn = {{0302-9743}},
	keywords = {{Blockchain; Smart contract; Reentrant attack; Vulnerability detection; Generative adversarial networks}},
	language = {{English}},
	note = {{14th International Conference on Knowledge Science, Engineering, and Management (KSEM), Tokyo, JAPAN, AUG 14-16, 2021}},
	number-of-cited-references = {{21}},
	orcid-numbers = {{Gai, Keke/0000-0001-6784-0221}},
	organization = {{Springer LNCS; Waseda Univ; N Amer Chinese Talents Assoc; Longxiang High Tech Grp Inc}},
	pages = {{585-597}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Gai, Keke/M-4857-2017}},
	series = {{Lecture Notes in Artificial Intelligence}},
	times-cited = {{0}},
	title = {{GAN-Enabled Code Embedding for Reentrant Vulnerabilities Detection}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000689112100048}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{12817}},
	web-of-science-categories = {{Computer Science, Artificial Intelligence}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-030-82153-1%5C_48}}

@article{WOS:000687462200004,
	abstract = {{In recent years, a lot of vulnerabilities of smart contracts have been
   found. Hackers used these vulnerabilities to attack the corresponding
   contracts developed in the blockchain system such as Ethereum, and it
   has caused lots of economic losses. Therefore, it is very important to
   find out the potential problems of the smart contracts and develop more
   secure smart contracts. As blockchain security events have raised more
   important issues, more and more smart contract security analysis methods
   have been developed. Most of these methods are based on traditional
   static analysis or dynamic analysis methods. There are only a few
   methods that use emerging technologies, such as machine learning. Some
   models that use machine learning to detect smart contract
   vulnerabilities cost much time in extracting features manually. In this
   paper, we introduce a novel machine learning-based analysis model by
   introducing the shared child nodes for smart contract vulnerabilities.
   We build the Abstract-Syntax-Tree (AST) for smart contracts with some
   vulnerabilities from two data sets including SmartBugs and
   SolidiFI-benchmark. Then, we build the Abstract-Syntax-Tree (AST) of the
   labeled smart contract for data sets named Smartbugs-wilds. Next, we get
   the shared child nodes from both of the ASTs to obtain the structural
   similarity, and then, we construct a feature vector composed of the
   values that measure structural similarity automatically to build our
   machine learning model. Finally, we get a KNN model that can predict
   eight types of vulnerabilities including Re-entrancy, Arithmetic, Access
   Control, Denial of Service, Unchecked Low Level Calls, Bad Randomness,
   Front Running, and Denial of Service. The accuracy, recall, and
   precision of our KNN model are all higher than 90\%. In addition,
   compared with some other analysis tools including Oyente and SmartCheck,
   our model has higher accuracy. In addition, we spent less time for
   training .}},
	address = {{ADAM HOUSE, 3RD FL, 1 FITZROY SQ, LONDON, WIT 5HE, ENGLAND}},
	affiliation = {{Hu, GR; You, L (Corresponding Author), Hangzhou Dianzi Univ, Sch Cyberspace, Hangzhou, Peoples R China. Xu, Yingjie; Hu, Gengran; You, Lin; Cao, Chengtang, Hangzhou Dianzi Univ, Sch Cyberspace, Hangzhou, Peoples R China.}},
	article-number = {{5798033}},
	author = {Xu, Yingjie and Hu, Gengran and You, Lin and Cao, Chengtang},
	author-email = {{gengran.hu@gmail.com mryoulin@gmail.com}},
	da = {{2021-11-07}},
	doc-delivery-number = {{UD8OM}},
	doi = {{10.1155/2021/5798033}},
	eissn = {{1939-0122}},
	funding-acknowledgement = {{Key Program of the National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61772166]; Natural Science Foundation of Zhejiang Province of ChinaNatural Science Foundation of Zhejiang Province {[}LZ17F020002]}},
	funding-text = {{This research was partially supported by the Key Program of the National Natural Science Foundation of China (no. 61772166) and the Natural Science Foundation of Zhejiang Province of China (no. LZ17F020002).}},
	issn = {{1939-0114}},
	journal = {{SECURITY AND COMMUNICATION NETWORKS}},
	journal-iso = {{Secur. Commun. Netw.}},
	language = {{English}},
	month = {{AUG 15}},
	number-of-cited-references = {{23}},
	oa = {{gold}},
	orcid-numbers = {{YOU, LIN/0000-0003-2049-8961 Hu, Gengran/0000-0002-3061-2388}},
	publisher = {{WILEY-HINDAWI}},
	research-areas = {{Computer Science; Telecommunications}},
	times-cited = {{0}},
	title = {{A Novel Machine Learning-Based Analysis Model for Smart Contract Vulnerability}},
	type = {{Article}},
	unique-id = {{WOS:000687462200004}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{3}},
	volume = {{2021}},
	web-of-science-categories = {{Computer Science, Information Systems; Telecommunications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1155/2021/5798033}}

@inproceedings{WOS:000629086600116,
	abstract = {{Smart contracts vulnerability auditing is vitally critical to ensure
   transaction execution in normal on blockchain. The current data-driven
   approaches normally tokenize smart contracts into a series of sequences
   according to only one tokenization standard for vulnerability detection
   purpose, resulting some of the semantic contexts could not be reflected
   within restricted sequence length.
   To address this limitation, we generate sequences from smart contracts
   in three tokenization standards for which we utilize ngram language
   model to capture semantic contexts respectively, and finally exploiting
   our effective combination strategy of Intersection or Union to integrate
   the audited results from multiple semantic contexts. In order to
   evaluate the proposed approach, we applied it on over 7200 Ethereum
   smart contract samples. Experimental result shows our proposed method is
   capable of detecting vulnerabilities and competitive with the baseline
   in test sets, with improved precision of over 44\% when Intersection is
   applied in their results, as well as improved Recall measure up by over
   300\% and F-measure up by 220\% when Union is applied. Our proposed
   method for smart contract vulnerability detection, an important tool for
   developing quality decentralized software applications, is able to
   analyze multiple semantic contexts and successfully detects more true
   vulnerabilities with high precision, outperforming that of the baseline
   approaches.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Yang, Z (Corresponding Author), City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China. Yang, Zhen; Keung, Jacky; Zhang, Miao; Huang, Yangyang; Hui, Tik, City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China. Xiao, Yan, Natl Univ Singapore, Sch Comp, Singapore, Singapore.}},
	author = {Yang, Zhen and Keung, Jacky and Zhang, Miao and Xiao, Yan and Huang, Yangyang and Hui, Tik},
	author-email = {{zhyang8-c@my.cityu.edu.hk Jacky.Keung@cityu.edu.hk miazhang9-c@my.cityu.edu.hk dcsxon@nus.edu.sg yhuan5@cityu.edu.hk tikhui@cityu.edu.hk}},
	booktitle = {{2020 IEEE 44TH ANNUAL COMPUTERS, SOFTWARE, AND APPLICATIONS CONFERENCE (COMPSAC 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR0HX}},
	doi = {{10.1109/COMPSAC48688.2020.0-153}},
	editor = {{Chan, WK and Claycomb, B and Takakura, H and Yang, JJ and Teranishi, Y and Towey, D and Segura, S and Shahriar, H and Reisman, S and Ahamed, SI}},
	funding-acknowledgement = {{General Research Fund of the Research Grants Council of Hong Kong {[}11208017]; City University of Hong KongCity University of Hong Kong {[}7005028, 7005217]; IntelIntel Corporation {[}9220097]; {[}9678149]; {[}9440227]; {[}9440180]; {[}9220103]}},
	funding-text = {{This work is supported in part by the General Research Fund of the Research Grants Council of Hong Kong (No.11208017) and the research funds of City University of Hong Kong (7005028, 7005217), and the Research Support Fund by Intel (9220097), and funding supports from other industry partners (9678149, 9440227, 9440180 and 9220103).}},
	isbn = {{978-1-7281-7303-0}},
	issn = {{0730-3157}},
	keywords = {{Software Engineering; Smart Contract; Ethereum; N-gram Language Model; Vulnerability Auditing}},
	language = {{English}},
	note = {{44th Annual IEEE-Computer-Society International Conference on Computers, Software, and Applications (COMPSAC), ELECTR NETWORK, JUL 13-17, 2020}},
	number-of-cited-references = {{22}},
	orcid-numbers = {{Yang, Zhen/0000-0003-0670-4538 ZHANG, Miao/0000-0001-9659-9393 XIAO, Yan/0000-0002-2563-083X KEUNG, Jacky/0000-0002-3803-9600}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{892-901}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	series = {{Proceedings International Computer Software and Applications Conference}},
	times-cited = {{0}},
	title = {{Smart Contracts Vulnerability Auditing With Multi-Semantics}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000629086600116}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{3}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/COMPSAC48688.2020.0-153}}

@inproceedings{WOS:000671077600207,
	abstract = {{The application of blockchain has moved beyond cryptocurrencies, to
   applications such as credentialing and smart contracts. The smart
   contract allows ones to achieve fair exchange for values without relying
   on a centralized entity. However, as the smart contract can be
   automatically executed with token transfers, an attacker can seek to
   exploit vulnerabilities in smart contracts for illicit profits. Thus,
   this paper proposes a support vector machine (SVM)-based scanning system
   for vulnerabilities on smart contracts. Our evaluation on Ethereum
   demonstrate that we achieve a identification rate of over 90\% based on
   several popular attacks.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Ren, W (Corresponding Author), China Univ Geosci, Sch Comp Sci, Wuhan, Peoples R China. Ren, W (Corresponding Author), Guangxi Key Lab Cryptog \& Informat Secur, Guilin 541004, Peoples R China. Ren, W (Corresponding Author), Chinese Acad Sci, CAS Inst Informat Engn, Key Lab Network Assessment Technol, Beijing 100093, Peoples R China. Hao, Xiaohan; Ren, Wei; Zheng, Wenwen; Zhu, Tianqing, China Univ Geosci, Sch Comp Sci, Wuhan, Peoples R China. Ren, Wei, Guangxi Key Lab Cryptog \& Informat Secur, Guilin 541004, Peoples R China. Ren, Wei, Chinese Acad Sci, CAS Inst Informat Engn, Key Lab Network Assessment Technol, Beijing 100093, Peoples R China.}},
	author = {Hao, Xiaohan and Ren, Wei and Zheng, Wenwen and Zhu, Tianqing},
	author-email = {{weirencs@cug.edu.cn}},
	booktitle = {{2020 IEEE 19TH INTERNATIONAL CONFERENCE ON TRUST, SECURITY AND PRIVACY IN COMPUTING AND COMMUNICATIONS (TRUSTCOM 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR8DU}},
	doi = {{10.1109/TrustCom50675.2020.00221}},
	editor = {{Wang, GJ and Ko, R and Bhuiyan, MZA and Pan, Y}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61972366]; Foundation of Key Laboratory of Network Assessment Technology, Chinese Academy of Sciences {[}KFKT2019-003]; Foundation of Guangxi Key Laboratory of Cryptography and Information Security {[}GCIS201913]; Foundation of Guizhou Provincial Key Laboratory of Public Big Data {[}2018BDKFJJ009, 2019BDKFJJ003, 2019BD-KFJJ011]}},
	funding-text = {{The research was financially supported by National Natural Science Foundation of China (No.61972366), the Foundation of Key Laboratory of Network Assessment Technology, Chinese Academy of Sciences (No. KFKT2019-003), the Foundation of Guangxi Key Laboratory of Cryptography and Information Security (No. GCIS201913), and the Foundation of Guizhou Provincial Key Laboratory of Public Big Data (No. 2018BDKFJJ009, No. 2019BDKFJJ003, No. 2019BD-KFJJ011).}},
	isbn = {{978-1-6654-0392-4}},
	issn = {{2324-898X}},
	keywords = {{Blockchain; Ethereum; Smart Contract; Vulnerability Detection; Support Vector Machine}},
	keywords-plus = {{TECHNOLOGY}},
	language = {{English}},
	note = {{19th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (IEEE TrustCom), Guangzhou, PEOPLES R CHINA, DEC 29-JAN 01, 2020-2021}},
	number-of-cited-references = {{21}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{1598-1605}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science; Telecommunications}},
	series = {{IEEE International Conference on Trust Security and Privacy in Computing and Communications}},
	times-cited = {{0}},
	title = {{SCScan: A SVM-based Scanning System for Vulnerabilities in Blockchain Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000671077600207}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Hardware \& Architecture; Computer Science, Information Systems; Computer Science, Theory \& Methods; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/TrustCom50675.2020.00221}}

@inproceedings{WOS:000538781300092,
	abstract = {{A smart contract is a computer protocol intended to digitally facilitate
   and enforce the negotiation of a contract in undependable environment.
   However, the number of attacks using the vulnerabilities of the smart
   contracts is also growing in recent years. Many solutions have been
   proposed in order to deal with them, such as documenting vulnerabilities
   or setting the security strategies. Among them, the most influential
   progress is made by the formal verification method. In this paper, we
   propose a formal verification method based on Colored Petri Nets (CPN)
   to verify smart contracts in blockchain system. First, we develop the
   smart contract models with possible attacker models based on
   hierarchical CPN modeling, then the smart contract models are executed
   by step-by-step simulation to validate their functional correctness, and
   finally we utilize the branch timing logic ASK-CTL based model checking
   technology in the CPN tools to detect latent vulnerabilities in smart
   contracts. We demonstrate that our CPN modeling based verification
   method can not only detect the logical vulnerabilities of the smart
   contract, but also consider the impacts of users behavior to find out
   potential non-logical vulnerabilities in the contracts, such as the
   vulnerabilities caused by the limitations of the Solidity language.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Liu, ZT (Corresponding Author), Inner Mongolia Univ, Coll Comp Sci, Hohhot, Peoples R China. Liu, Zhentian; Liu, Jing, Inner Mongolia Univ, Coll Comp Sci, Hohhot, Peoples R China.}},
	author = {Liu, Zhentian and Liu, Jing},
	author-email = {{1602942580@qq.com liujing@imu.edu.cn}},
	booktitle = {{2019 IEEE 43RD ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE (COMPSAC), VOL 2}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP1DH}},
	doi = {{10.1109/COMPSAC.2019.10265}},
	editor = {{Getov, V and Gaudiot, JL and Yamai, N and Cimato, S and Chang, M and Teranishi, Y and Yang, JJ and Leong, HV and Shahriar, H and Takemoto, M and Towey, D and Takakura, H and Elci, A and Susumu and Puri, S}},
	funding-acknowledgement = {{National Natural Science Foundation of ChainNational Natural Science Foundation of China (NSFC) {[}61662051]}},
	funding-text = {{This work was supported in part by the National Natural Science Foundation of Chain (No. 61662051).}},
	isbn = {{978-1-7281-2607-4}},
	issn = {{0730-3157}},
	keywords = {{blockchain; smart contract; formal verification; CPN}},
	language = {{English}},
	note = {{43rd IEEE-Computer-Society Annual International Computers, Software and Applications Conference (COMPSAC), Marquette Univ, Milwaukee, WI, JUL 15-19, 2019}},
	number-of-cited-references = {{15}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Future Direct}},
	pages = {{555-560}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{Proceedings International Computer Software and Applications Conference}},
	times-cited = {{2}},
	title = {{Formal Verification of Blockchain Smart Contract based on Colored Petri Net Models}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000538781300092}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{5}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/COMPSAC.2019.10265}}

@article{WOS:000569172900008,
	abstract = {{To achieve trust and continuity in the smart contracts-based business
   process execution, the verification of such smart contracts is
   mandatory. A blockchain-based smart contract should work as intended
   before using it. Due to the immutable nature of blockchain, any bugs or
   errors will become permanent once published and could lead to huge
   economic losses. To avoid such problems, verification is required to
   check the correctness and the security of the smart contract. In this
   survey, we consider the smart contracts and we investigate smart
   contacts formal verification methods. We also investigate the security
   assurance for smart contracts using vulnerabilities detection methods.
   In this context, we provide a detailed overview of the different
   approaches to verify the smart contracts and we present the used methods
   and tools. We show a description of each method as well as its
   advantages and limitations and we draw several conclusions. (c) 2020
   Elsevier B.V. All rights reserved.}},
	address = {{RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS}},
	affiliation = {{Almakhour, M (Corresponding Author), Paris Est Creteil Univ, LISSI TincNET Res Team, Creteil, France. Almakhour, M (Corresponding Author), Paris Est Creteil Univ, LISSI TincNET Res Team, Vitry Sur Seine, France. Almakhour, Mouhamad; Mellouk, Abdelhamid, Paris Est Creteil Univ, LISSI TincNET Res Team, Creteil, France. Almakhour, Mouhamad; Mellouk, Abdelhamid, Paris Est Creteil Univ, LISSI TincNET Res Team, Vitry Sur Seine, France. Almakhour, Mouhamad; Samhat, Abed Ellatif, Lebanese Univ, Fac Engn CRSI, Univ Campus, Hadath, Lebanon. Sliman, Layth, EFREI Engn Sch Paris, Villejuif, France.}},
	article-number = {{101227}},
	author = {Almakhour, Mouhamad and Sliman, Layth and Samhat, Abed Ellatif and Mellouk, Abdelhamid},
	author-email = {{mouhamad.almakhour@univ-paris-est.fr layth.sliman@efrei.fr samhat@ul.edu.lb mellouk@u-pec.fr}},
	da = {{2021-11-07}},
	doc-delivery-number = {{NO0JF}},
	doi = {{10.1016/j.pmcj.2020.101227}},
	eissn = {{1873-1589}},
	issn = {{1574-1192}},
	journal = {{PERVASIVE AND MOBILE COMPUTING}},
	journal-iso = {{Pervasive Mob. Comput.}},
	keywords = {{Smart contracts; Blockchain; Verification; Correctness; Security assurance}},
	keywords-plus = {{BLOCKCHAIN}},
	language = {{English}},
	month = {{SEP}},
	number-of-cited-references = {{85}},
	oa = {{Bronze}},
	orcid-numbers = {{SAMHAT, Abed Ellatif/0000-0002-1137-621X ALMAKHOUR, Mouhamad/0000-0002-8234-1145}},
	publisher = {{ELSEVIER}},
	research-areas = {{Computer Science; Telecommunications}},
	times-cited = {{7}},
	title = {{Verification of smart contracts: A survey}},
	type = {{Review}},
	unique-id = {{WOS:000569172900008}},
	usage-count-last-180-days = {{5}},
	usage-count-since-2013 = {{14}},
	volume = {{67}},
	web-of-science-categories = {{Computer Science, Information Systems; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1016/j.pmcj.2020.101227}}

@inproceedings{WOS:000668146200156,
	abstract = {{The invention of Ethereum smart contract has enabled the blockchain
   users to customize computing logic in transactions. However, similar to
   traditional computer programs, smart contracts have vulnerabilities,
   which can be exploited to cause financial loss of contract owners. While
   there are many software tools for detecting vulnerabilities in the smart
   contract bytecode, few have focused on transactions. In this paper, we
   propose TxSPECTOR, a generic, logic-driven framework to investigate
   Ethereum transactions for attack detection. At a high level, TXSPECTOR
   replays history transactions and records EVM bytecode-level traces, and
   then encodes the control and data dependencies into logic relations.
   Instead of setting a pre-defined set of functionalities, TxSPECTOR
   allows users to specify customized rules to uncover various types of
   attacks in the transactions. We have built a prototype of TXSPECTOR and
   evaluated it for the detection of three Ethereum attacks that exploit:
   (i) the Re-entrancy vulnerability, (ii) the UncheckedCall vulnerability,
   and (iii) the Suicidal vulnerability. The results demonstrate that
   TXSPECTOR can effectively detect attacks in the transactions and, as a
   byproduct, the corresponding vulnerabilities in the smart contracts. We
   also show how TXSPECTOR can be used for forensic analysis on
   transactions, and present Detection Rules for detecting other types of
   attacks in addition to the three focused Ethereum attacks.}},
	address = {{SUITE 215, 2560 NINTH ST, BERKELEY, CA 94710 USA}},
	affiliation = {{Zhang, MY (Corresponding Author), Ohio State Univ, Columbus, OH 43210 USA. Zhang, Mengya; Zhang, Xiaokuan; Zhang, Yinqian; Lin, Zhiqiang, Ohio State Univ, Columbus, OH 43210 USA.}},
	author = {Zhang, Mengya and Zhang, Xiaokuan and Zhang, Yinqian and Lin, Zhiqiang},
	book-group-author = {{USENIX Assoc}},
	booktitle = {{PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR7KC}},
	funding-acknowledgement = {{NSFNational Science Foundation (NSF) {[}1718084, 1750809, 1834213, 1834215]}},
	funding-text = {{We thank the anonymous reviewers for their valuable comments. We also thank our shepherd, Thorsten Holz, for helping us improve our paper. This work is supported in part by the NSF grants 1718084, 1750809, 1834213 and 1834215.}},
	isbn = {{978-1-939133-17-5}},
	language = {{English}},
	note = {{29th USENIX Security Symposium, ELECTR NETWORK, AUG 12-14, 2020}},
	number-of-cited-references = {{47}},
	organization = {{USENIX Assoc; Facebook; Microsoft; Salesforce; ByteDance; Cisco; Kaspersky; Baidu; Dropbox; Google; IBM; Intel; Qualcomm; ACM Queue; DMTF; FreeBSD Fdn}},
	pages = {{2775-2792}},
	publisher = {{USENIX ASSOC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{TXSPECTOR: Uncovering Attacks in Ethereum from Transactions}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000668146200156}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2020}}}

@inproceedings{WOS:000517102200060,
	abstract = {{Executing, verifying and enforcing credible transactions on
   permissionless blockchains is done using smart contracts. A key
   challenge with smart contracts is ensuring their correctness and
   security. To address this challenge, we present a fully automated
   technique, SolAnalyser, for vulnerability detection over Solidity smart
   contracts that uses both static and dynamic analysis. Analysis
   techniques in the literature rely on static analysis with a high rate of
   false positives or lack support for vulnerabilities like out of gas,
   unchecked send, timestamp dependency. Our tool, SolAnalyser, supports
   automated detection of 8 different vulnerability types that currently
   lack wide support in existing tools, and can easily be extended to
   support other types. We also implemented a fault seeding tool that
   injects different types of vulnerabilities in smart contracts. We use
   the mutated contracts for assessing the effectiveness of different
   analysis tools. Our experiment uses 1838 real contracts from which we
   generate 12866 mutated contracts by artificially seeding 8 different
   vulnerability types. We evaluate the effectiveness of our technique in
   revealing the seeded vulnerabilities and compare against five existing
   popular analysis tools - Oyente, Securify, Maian, SmartCheck and
   Mythril. This is the first large scale evaluation of existing tools that
   compares their effectiveness by running them on a common set of
   contracts. We find that our technique outperforms all five existing
   tools in supporting detection of all 8 vulnerability types and in
   achieving higher precision and recall rate. SolAnalyser was also faster
   in analysing the different vulnerabilities than any of the existing
   tools in our experiment.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Akca, S (Corresponding Author), Univ Edinburgh, Edinburgh, Midlothian, Scotland. Akca, Sefa; Rajan, Ajitha; Peng, Chao, Univ Edinburgh, Edinburgh, Midlothian, Scotland.}},
	author = {Akca, Sefa and Rajan, Ajitha and Peng, Chao},
	author-email = {{s.akca@sms.ed.ac.uk arajan@ed.ac.uk chao.peng@ed.ac.uk}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 26TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO5CH}},
	doi = {{10.1109/APSEC48747.2019.00071}},
	funding-acknowledgement = {{Huawei Innovation Research ProgramHuawei Technologies}},
	funding-text = {{This work was supported in part by a grant from Huawei Innovation Research Program.}},
	isbn = {{978-1-7281-4648-5}},
	issn = {{1530-1362}},
	keywords = {{blockchain; smart contract; testing; static analysis; assertions; fault seeding}},
	language = {{English}},
	note = {{26th Asia-Pacific Software Engineering Conference (APSEC), Putrajaya, MALAYSIA, DEC 02-05, 2019}},
	number-of-cited-references = {{27}},
	oa = {{Green Submitted}},
	organization = {{Univ Sains Malaysia; Univ Putra Malaysia; Univ Malaysia Terengganu; Malaysian Software Engn Interest Grp; Univ Teknologi Malaysia}},
	pages = {{482-489}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science; Engineering}},
	series = {{Asia-Pacific Software Engineering Conference}},
	times-cited = {{2}},
	title = {{SolAnalyser: A Framework for Analysing and Testing Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000517102200060}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{3}},
	web-of-science-categories = {{Computer Science, Software Engineering; Engineering, Electrical \& Electronic}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/APSEC48747.2019.00071}}

@inproceedings{WOS:000505681100007,
	abstract = {{Much recent work focuses on finding bugs and security vulnerabilities in
   smart contracts written in existing languages. Although this approach
   may be helpful, it does not address flaws in the underlying programming
   language, which can facilitate writing buggy code in the first place. We
   advocate a re-thinking of the blockchain software engineering tool set,
   starting with the programming language in which smart contracts are
   written. In this paper, we propose and justify requirements for a new
   generation of blockchain software development tools. New tools should
   (1) consider users' needs as a primary concern; (2) seek to facilitate
   safe development by detecting relevant classes of serious bugs at
   compile time; (3) as much as possible, be blockchain-agnostic, given the
   wide variety of different blockchain platforms available, and leverage
   the properties that are common among blockchain environments to improve
   safety and developer effectiveness.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Coblenz, M (Corresponding Author), Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA. Coblenz, Michael; Sunshine, Joshua; Aldrich, Jonathan; Myers, Brad A., Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.}},
	author = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A.},
	author-email = {{mcoblenz@cs.cmu.edu sunshine@cs.cmu.edu aldrich@cs.cmu.edu bam@cs.cmu.edu}},
	book-group-author = {{ACM}},
	booktitle = {{2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO2GT}},
	doi = {{10.1109/WETSEB.2019.00013}},
	funding-acknowledgement = {{US Department of DefenseUnited States Department of Defense; NSFNational Science Foundation (NSF) {[}CNS-1734138, CNS-1423054]; NSA lablet contract {[}H98230-14-C-0140]; Software Engineering Institute; AFRLUnited States Department of DefenseUS Air Force Research Laboratory {[}FA8750-16-2-0042]; DARPAUnited States Department of DefenseDefense Advanced Research Projects Agency (DARPA) {[}FA8750-16-2-0042]; IBM PhD fellowshipInternational Business Machines (IBM)}},
	funding-text = {{This material is based upon work supported by the US Department of Defense, by NSF grants CNS-1734138 and CNS-1423054, by NSA lablet contract H98230-14-C-0140, by the Software Engineering Institute, and by AFRL and DARPA under agreement \#FA8750-16-2-0042. Michael Coblenz is supported by an IBM PhD fellowship. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the sponsors.}},
	isbn = {{978-1-7281-2257-1}},
	keywords = {{smart contracts; usability of programming languages; blockchain}},
	language = {{English}},
	note = {{IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB), Montreal, CANADA, MAY 27, 2019}},
	number-of-cited-references = {{25}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc}},
	pages = {{48-51}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{3}},
	title = {{Smarter Smart Contract Development Tools}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000505681100007}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/WETSEB.2019.00013}}

@inproceedings{WOS:000662554700006,
	abstract = {{Smart contract (SC) is an extension of BlockChain technology. Ethereum
   BlockChain was the first to incorporate SC and thus started a new era of
   crypto-currencies and electronic transactions. Solidity helps to program
   the SCs. Still, soon after Solidity's emergence in 2014, Solidity-based
   SCs suffered many attacks that deprived the SC account holders of their
   precious funds. The main reason for these attacks was the presence of
   vulnerabilities in SC. This paper discusses SC vulnerabilities and
   classifies them according to the domain knowledge of the faulty
   operations. This classification is a source of reminding developers and
   software engineers that for SC's safety, each SC requires proper testing
   with effective tools to catch those classes' vulnerabilities.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Khan, ZA (Corresponding Author), Texas Tech Univ, Dept Comp Sci Texas, Lubbock, TX 79409 USA. Khan, Zulfiqar Ali; Namin, Akbar Siami, Texas Tech Univ, Dept Comp Sci Texas, Lubbock, TX 79409 USA.}},
	author = {Khan, Zulfiqar Ali and Namin, Akbar Siami},
	author-email = {{zulfi.khan@ttu.edu akbar.namin@ttu.edu}},
	booktitle = {{2020 IEEE INTERNATIONAL CONFERENCE ON BIG DATA (BIG DATA)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR6NZ}},
	doi = {{10.1109/BigData50022.2020.9439088}},
	editor = {{Wu, XT and Jermaine, C and Xiong, L and Hu, XH and Kotevska, O and Lu, SY and Xu, WJ and Aluru, S and Zhai, CX and Al-Masri, E and Chen, ZY and Saltz, J}},
	funding-acknowledgement = {{National Science Foundation (NSF)National Science Foundation (NSF) {[}1821560]}},
	funding-text = {{This research work is supported by National Science Foundation (NSF) under Grant No: 1821560.}},
	isbn = {{978-1-7281-6251-5}},
	issn = {{2639-1589}},
	keywords = {{Smart Contract; Ethereum; EVM; vulnerabilities; Solidity; tools}},
	language = {{English}},
	note = {{8th IEEE International Conference on Big Data (Big Data), ELECTR NETWORK, DEC 10-13, 2020}},
	number-of-cited-references = {{56}},
	organization = {{IEEE; IEEE Comp Soc; IBM; Ankura}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	series = {{IEEE International Conference on Big Data}},
	times-cited = {{0}},
	title = {{Ethereum Smart Contracts: Vulnerabilities and their Classifications}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000662554700006}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{3}},
	web-of-science-categories = {{Computer Science, Artificial Intelligence; Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/BigData50022.2020.9439088}}

@article{WOS:000618555900005,
	abstract = {{Blockchain platforms and languages for writing smart contracts are
   becoming increasingly popular. However, smart contracts and blockchain
   applications are developed through non-standard software life-cycles, in
   which, for instance, delivered applications can hardly be updated or
   bugs resolved by releasing a new version of the software. Therefore,
   this systematic literature review oriented to software engineering aims
   at highlighting current problems and possible solutions concerning smart
   contracts and blockchain applications development. In this paper, we
   analyze 96 articles (written from 2016 to 2020) presenting solutions to
   tackle software engineering-specific challenges related to the
   development, test, and security assessment of blockchain-oriented
   software. In particular, we review papers (that appeared in
   international journals and conferences) relating to six specific topics:
   smart contract testing, smart contract code analysis, smart contract
   metrics, smart contract security, Dapp performance, and blockchain
   applications. Beyond the systematic review of the techniques, tools, and
   approaches that have been proposed in the literature to address the
   issues posed by the development of blockchain-based software, for each
   of the six aforementioned topics, we identify open challenges that
   require further research. (C) 2021 Elsevier Inc. All rights reserved.}},
	address = {{STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA}},
	affiliation = {{Vacca, A (Corresponding Author), Univ Sannio, Dept Engn, Benevento, Italy. Vacca, Anna; Di Sorbo, Andrea; Visaggio, Corrado A.; Canfora, Gerardo, Univ Sannio, Dept Engn, Benevento, Italy.}},
	article-number = {{110891}},
	author = {Vacca, Anna and Di Sorbo, Andrea and Visaggio, Corrado A. and Canfora, Gerardo},
	author-email = {{avacca@unisannio.it disorbo@unisannio.it visaggio@unisannio.it canfora@unisannio.it}},
	da = {{2021-11-07}},
	doc-delivery-number = {{QH8XE}},
	doi = {{10.1016/j.jss.2020.110891}},
	eissn = {{1873-1228}},
	issn = {{0164-1212}},
	journal = {{JOURNAL OF SYSTEMS AND SOFTWARE}},
	journal-iso = {{J. Syst. Softw.}},
	keywords = {{Software engineering for blockchain technologies; Software quality; Software metrics; Empirical study; Ethereum; Smart contract}},
	language = {{English}},
	month = {{APR}},
	number-of-cited-references = {{112}},
	orcid-numbers = {{Di Sorbo, Andrea/0000-0002-3192-739X}},
	publisher = {{ELSEVIER SCIENCE INC}},
	research-areas = {{Computer Science}},
	times-cited = {{5}},
	title = {{A systematic literature review of blockchain and smart contract development: Techniques, tools, and open challenges}},
	type = {{Review}},
	unique-id = {{WOS:000618555900005}},
	usage-count-last-180-days = {{23}},
	usage-count-since-2013 = {{41}},
	volume = {{174}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1016/j.jss.2020.110891}}

@inproceedings{WOS:000691552500001,
	abstract = {{With the increase of the adoption of blockchain technology in providing
   decentralized solutions to various problems, smart contracts have become
   more popular to the point that billions of US Dollars are currently
   exchanged every day through such technology. Meanwhile, various
   vulnerabilities in smart contracts have been exploited by attackers to
   steal cryptocurrencies worth millions of dollars. The automatic
   detection of smart contract vulnerabilities therefore is an essential
   research problem. Existing solutions to this problem particularly rely
   on human experts to define f eatures o r d ifferent r ules t o detect
   vulnerabilities. However, this often causes many vulnerabilities to be
   ignored, and they are inefficient in detecting new vulnerabilities. In
   this study, to overcome such challenges, we propose the VSCL framework
   to automatically detect vulnerabilities in smart contracts on the
   blockchain. More specifically, first, we utilize novel feature vector
   generation techniques from bytecode of smart contract since the source
   code of smart contracts are rarely available in public. Next, the
   collected vectors are fed into our novel metric learning-based deep
   neural network(DNN) to get the detection result. We conduct
   comprehensive experiments on a large-scale benchmark, and the
   quantitative results demonstrate the effectiveness and efficiency of our
   approach.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Mi, F (Corresponding Author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA. Mi, Feng; Wang, Zhuoyi; Zhao, Chen; Guo, Jinghui; Ahmed, Fawaz; Khan, Latifur, Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.}},
	author = {Mi, Feng and Wang, Zhuoyi and Zhao, Chen and Guo, Jinghui and Ahmed, Fawaz and Khan, Latifur},
	author-email = {{Feng.Mi@utdallas.edu zxw151030@utdallas.edu Chen.Zhao@utdallas.edu Jinghui.Guo@utdallas.edu Fawaz.Ahmed@utdallas.edu lkhan@utdallas.edu}},
	book-group-author = {{IEEE}},
	booktitle = {{2021 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN AND CRYPTOCURRENCY (ICBC)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS1IM}},
	doi = {{10.1109/ICBC51069.2021.9461050}},
	funding-acknowledgement = {{NSFNational Science Foundation (NSF) {[}DMS-1737978, DGE-2039542, OAC-1828467, OAC1931541, DGE-1906630]; IBM faculty awardInternational Business Machines (IBM)}},
	funding-text = {{This material is based upon work supported by NSF awards DMS-1737978, DGE-2039542, OAC-1828467, OAC1931541, DGE-1906630, and an IBM faculty award (Research).}},
	isbn = {{978-1-6654-3578-9}},
	keywords = {{Smart Contract; Vulnerability Detection; Metric Learning; Blockchain}},
	language = {{English}},
	note = {{3rd IEEE International Conference on Blockchain and Cryptocurrency (IEEE ICBC), ELECTR NETWORK, MAY 03-06, 2021}},
	number-of-cited-references = {{29}},
	organization = {{IEEE; IEEE Commun Soc; IBM; CSIRO, Data61}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{VSCL: Automating Vulnerability Detection in Smart Contracts with Deep Learning}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000691552500001}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Interdisciplinary Applications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/ICBC51069.2021.9461050}}

@inproceedings{WOS:000675825200081,
	abstract = {{The Ethereum blockchain enables executing and recording smart contracts.
   The smart contracts can facilitate, verify, and implement the
   negotiation between multiple parties, also guaranteeing transactions
   without a traditional legal entity. Many tools supporting the smart
   contracts development in different areas are flourishing because in
   Ethereum blockchain valuable assets are often involved. Some of the
   tools help the developer to find security vulnerabilities via static
   and/or dynamic analysis or to reduce the Gas fees consumption. Despite
   the plethora of such tools, there is no tool supporting smart contracts
   evaluation and analysis via a graphical representation for expert
   developers.
   The paper embraces this way to facilitate the developers' analysis
   activity, by proposing a graphical representation model to visualize
   smart contract source code. The paper makes available a tool via a web
   interface, which accepts the smart contract address as an input and
   produces a graphical representation of the smart contract as an output.
   The graphical representation can help developers to better understand
   the structure of smart contracts and share it with other developers.
   Moreover, some metrics, such as the relations among smart contracts, are
   easier to be understood via ``spatial{''} than ``tabular{''}
   representation. Indeed, representing smart contracts' metrics via visual
   representation facilitates the developers, who are used to analyse the
   source code by directly inspecting it or using other tools that provide
   the metrics in a table format. Finally, the paper provides detailed data
   regarding a smart contract to the developers and proposes a graphical
   representation of the smart contracts without obscuration of details,
   also highlighting areas of the code that are possibly too big in size
   and/or too complex via a diagram displaying their connections.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Pierro, GA (Corresponding Author), Ctr Inria Lille Nord Europe, Lille, France. Pierro, Giuseppe Antonio, Ctr Inria Lille Nord Europe, Lille, France.}},
	author = {Pierro, Giuseppe Antonio},
	author-email = {{giuseppe.pierro@inria.fr}},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR9HX}},
	doi = {{10.1109/SANER50967.2021.00090}},
	isbn = {{978-1-7281-9630-5}},
	keywords = {{Smart contract; Ethereum blockchain; visual analysis; class diagram}},
	keywords-plus = {{COMPLEXITY; SOFTWARE}},
	language = {{English}},
	note = {{28th IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER), ELECTR NETWORK, MAR 09-12, 2021}},
	number-of-cited-references = {{37}},
	oa = {{Green Submitted}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Tech Council Software Engn}},
	pages = {{708-714}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Smart-Graph: Graphical Representations for Smart Contract on the Ethereum Blockchain}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000675825200081}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/SANER50967.2021.00090}}

@article{WOS:000705870200001,
	abstract = {{In Ethereum blockchain, smart contracts are immutable, public, and
   distributed. However, they are subject to many vulnerabilities stemming
   from coding errors made by developers. Seven cybersecurity incidents
   occurred in Ethereum smart contracts between 2016 and 2018, which led to
   financial losses estimated to be over US\$ 289 million. Reentrancy
   vulnerability was the cause of two of these incidents, and the impacts
   went far beyond financial loss. Several reentrancy countermeasures are
   available, which are based on predefined patterns that are used to
   prevent vulnerability exploitation before the deployment of a smart
   contract; however, several limitations have been identified in these
   countermeasures. Motivated by all these issues, the objective of this
   article is to help developers improve the cybersecurity of smart
   contracts by proposing a solution that calculates the difference between
   the contract balance and the total balance of all participants in a
   smart contract before and after any operation in a transaction that
   changes its state. Proof-of-concept implementations show that this
   solution can provide a detection and prevention mechanism against
   reentrancy attacks during the execution of any smart contract.</p>}},
	address = {{AVENUE DU TRIBUNAL FEDERAL 34, LAUSANNE, CH-1015, SWITZERLAND}},
	affiliation = {{Alkhalifah, A (Corresponding Author), Ayman Alkhalifah, Riyadh, Saudi Arabia. Alkhalifah, Ayman, Ayman Alkhalifah, Riyadh, Saudi Arabia. Ng, Alex; Watters, Paul A., Macquarie Univ, Dept Secur Studies \& Criminol, Sydney, NSW, Australia. Kayes, A. S. M., La Trobe Univ, Dept Comp Sci \& Informat Technol, Melbourne, VI, Australia.}},
	article-number = {{598780}},
	author = {Alkhalifah, Ayman and Ng, Alex and Watters, Paul A. and Kayes, A. S. M.},
	author-email = {{aymankaa@gmail.com}},
	da = {{2021-11-07}},
	doc-delivery-number = {{WE8LI}},
	doi = {{10.3389/fcomp.2021.598780}},
	eissn = {{2624-9898}},
	journal = {{FRONTIERS IN COMPUTER SCIENCE}},
	journal-iso = {{Front. Comput. Sci.-Switz}},
	keywords = {{blockchain technology; Ethereum; cybersecurity; smart contract; reentrancy vulnerability}},
	language = {{English}},
	month = {{FEB 17}},
	number-of-cited-references = {{17}},
	oa = {{gold}},
	orcid-numbers = {{Kayes, A. S. M./0000-0002-2421-2214}},
	publisher = {{FRONTIERS MEDIA SA}},
	research-areas = {{Computer Science}},
	times-cited = {{1}},
	title = {{A Mechanism to Detect and Prevent Ethereum Blockchain Smart Contract Reentrancy Attacks}},
	type = {{Article}},
	unique-id = {{WOS:000705870200001}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{2}},
	volume = {{3}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.3389/fcomp.2021.598780}}

@article{WOS:000703327100001,
	abstract = {{Ethereum smart contracts have been gaining popularity toward the
   automation of so many domains, i.e., FinTech, IoT, and supply chain,
   which are based on blockchain technology. The most critical domain,
   e.g., FinTech, has been targeted by so many successful attacks due to
   its financial worth of billions of dollars. In all attacks, the
   vulnerability in the source code of smart contracts is being exploited
   and causes the steal of millions of dollars. To find the vulnerability
   in the source code of smart contracts written in Solidity language, a
   state-of-the-art work provides a lot of solutions based on dynamic or
   static analysis. However, these tools have shown a lot of false
   positives/negatives against the smart contracts having complex logic.
   Furthermore, the output of these tools is not reported in a standard way
   with their actual vulnerability names as per standards defined by the
   Ethereum community. To solve these problems, we have introduced a static
   analysis tool, SESCon (secure Ethereum smart contract), applying the
   taint analysis techniques with XPath queries. Our tool outperforms other
   analyzers and detected up to 90\% of the known vulnerability patterns.
   SESCon also reports the detected vulnerabilities with their titles,
   descriptions, and remediations as per defined standards by the Ethereum
   community. SESCon will serve as a foundation for the standardization of
   vulnerability detection.}},
	address = {{ADAM HOUSE, 3RD FL, 1 FITZROY SQ, LONDON, WIT 5HE, ENGLAND}},
	affiliation = {{Ali, A (Corresponding Author), Xi An Jiao Tong Univ, Sch Cyber Sci \& Engn, Xian 710049, Shaanxi, Peoples R China. Ali, Amir, Xi An Jiao Tong Univ, Sch Cyber Sci \& Engn, Xian 710049, Shaanxi, Peoples R China. Ul Abideen, Zain, Xi An Jiao Tong Univ, Dept Comp Sci, Xian 710049, Shaanxi, Peoples R China. Ullah, Kalim, CECOS Univ IT \& Emerging Sci, Dept Comp Sci, Peshawar, Pakistan.}},
	article-number = {{2897565}},
	author = {Ali, Amir and Ul Abideen, Zain and Ullah, Kalim},
	author-email = {{amir.ali@stu.xjtu.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{WB1GG}},
	doi = {{10.1155/2021/2897565}},
	eissn = {{1939-0122}},
	issn = {{1939-0114}},
	journal = {{SECURITY AND COMMUNICATION NETWORKS}},
	journal-iso = {{Secur. Commun. Netw.}},
	language = {{English}},
	month = {{SEP 21}},
	number-of-cited-references = {{31}},
	oa = {{gold}},
	publisher = {{WILEY-HINDAWI}},
	research-areas = {{Computer Science; Telecommunications}},
	times-cited = {{0}},
	title = {{SESCon: Secure Ethereum Smart Contracts by Vulnerable Patterns' Detection}},
	type = {{Article}},
	unique-id = {{WOS:000703327100001}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{2021}},
	web-of-science-categories = {{Computer Science, Information Systems; Telecommunications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1155/2021/2897565}}

@article{WOS:000685204500074,
	abstract = {{The term ``smart contracts{''} has become ubiquitous to describe an
   enormous number of programs uploaded to the popular Ethereum blockchain
   system. Despite rapid growth of the smart contract ecosystem, errors and
   exploitations have been constantly reported from online contract
   systems, which has put financial stability at risk with losses totaling
   millions of US dollars. Most existing research focuses on pinpointing
   specific types of vulnerabilities using known patterns. However, due to
   the lack of awareness of the inherent nondeterminism in the Ethereum
   blockchain system and how it affects the funds transfer of smart
   contracts, there can be unknown vulnerabilities that may be exploited by
   attackers to access numerous online smart contracts.
   In this paper, we introduce a methodical approach to understanding the
   inherent nondeterminism in the Ethereum blockchain system and its
   (unwanted) influence on contract payments. We show that our new focus on
   nondeterminism-related smart contract payment bugs captures the root
   causes of many common vulnerabilities without relying on any known
   patterns and also encompasses recently disclosed issues that are not
   handled by existing research. To do so, we introduce techniques to
   systematically model components in the contract execution context and to
   expose various nondeterministic factors that are not yet fully
   understood. We further study how these nondeterministic factors impact
   contract funds transfer using information flow tracking. The technical
   challenge of detecting nondeterministic payments lies in discovering the
   contract global variables subtly affected by read-write hazards because
   of unpredictable transaction scheduling and external callee behavior. We
   show how to augment and instrument a contract program into a
   representation that simulates the execution of a large subset of the
   contract behavior. The instrumented code is then analyzed to flag
   nondeterministic global variables using off-the-shelf model checkers.
   We implement the proposed techniques as a practical tool named NPCHECKER
   (Nondeterministic Payment Checker) and evaluate it on 30K online
   contracts (3,075 distinct) collected from the Ethereum mainnet.
   NPCHECKER has successfully detected nondeterministic payments in 1,111
   online contracts with reasonable cost. Further investigation reports
   high precision of NPCHECKER (only four false positives in a manual study
   of 50 contracts). We also show that NPCHECKER unveils contracts
   vulnerable to recently-disclosed attack vectors. NPCHECKER can identify
   all six new vulnerabilities or variants of common smart contract
   vulnerabilities that are missed by existing research relying on a
   ``contract vulnerability checklist.{''}}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Wang, S (Corresponding Author), Hong Kong Univ Sci \& Technol, Hong Kong, Peoples R China. Wang, Shuai; Su, Zhendong, Hong Kong Univ Sci \& Technol, Hong Kong, Peoples R China. Zhang, Chengyu, East China Normal Univ, Shanghai, Peoples R China. Su, Zhendong, Swiss Fed Inst Technol, Zurich, Switzerland.}},
	article-number = {{189}},
	author = {Wang, Shuai and Zhang, Chengyu and Su, Zhendong},
	author-email = {{shuaiw@cse.ust.hk dale.chengyu.zhang@gmail.com zhendong.su@inf.ethz.ch}},
	da = {{2021-11-07}},
	doc-delivery-number = {{VK3VG}},
	doi = {{10.1145/3360615}},
	eissn = {{2475-1421}},
	funding-acknowledgement = {{China Scholarship CouncilChina Scholarship Council; NSFCNational Natural Science Foundation of China (NSFC) {[}61572197, 61632005]}},
	funding-text = {{We thank the anonymous SPLASH/OOPSLA reviewers for their valuable feedback. Our special thanks go to the JEB3, Smack, and EVMJIT developers who provided us with much help, insight and advice. Chengyu Zhang was partially supported by the China Scholarship Council, and NSFC Projects No. 61572197 and No. 61632005.}},
	journal = {{PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL}},
	journal-iso = {{P. ACM Program. Lang.}},
	keywords = {{Program Analysis; Smart Contracts; Security; Blockchain}},
	language = {{English}},
	month = {{OCT}},
	number-of-cited-references = {{35}},
	oa = {{gold, Green Published}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{6}},
	title = {{Detecting Nondeterministic Payment Bugs in Ethereum Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000685204500074}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{3}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3360615}}

@article{WOS:000580403500006,
	abstract = {{Smart contracts are automated or self-enforcing contracts that can be
   used to exchange assets without having to place trust in third parties.
   Many commercial transactions use smart contracts due to their potential
   benefits in terms of secure peer-to-peer transactions independent of
   external parties. Experience shows that many commonly used smart
   contracts are vulnerable to serious malicious attacks, which may enable
   attackers to steal valuable assets of involving parties. There is,
   therefore, a need to apply analysis and automated repair techniques to
   detect and repair bugs in smart contracts before being deployed. In this
   work, we present the first general-purpose automated smart contract
   repair approach that is also gas-aware. Our repair method is
   search-based and searches among mutations of the buggy contract. Our
   method also considers the gas usage of the candidate patches by
   leveraging our novel notion of gas dominance relationship. We have made
   our smart contract repair tool SCRepair available open-source, for
   investigation by the wider community.}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Roychoudhury, A (Corresponding Author), Natl Univ Singapore, Comp 1,13 Comp Dr, Singapore 117417, Singapore. Yu, Xiao Liang; Al-Bataineh, Omar; Roychoudhury, Abhik, Natl Univ Singapore, Comp 1,13 Comp Dr, Singapore 117417, Singapore. Lo, David, Singapore Management Univ, Sch Informat Syst, 80 Stamford Rd, Singapore 178902, Singapore.}},
	article-number = {{27}},
	author = {Yu, Xiao Liang and Al-Bataineh, Omar and Lo, David and Roychoudhury, Abhik},
	author-email = {{xiaoly@comp.nus.edu.sg omerdep@yahoo.com davidlo@smu.edu.sg abhik@comp.nus.edu.sg}},
	da = {{2021-11-07}},
	doc-delivery-number = {{OE2YX}},
	doi = {{10.1145/3402450}},
	eissn = {{1557-7392}},
	funding-acknowledgement = {{National Satellite of Excellence in Trustworthy Software Systems - National Research Foundation (NRF) Singapore under National Cybersecurity R\&D (NCR) programme; Singapore Ministry of Education (MOE) Academic Research Fund (AcRF) Tier 1Ministry of Education, Singapore {[}17-C220-SMU-008]}},
	funding-text = {{This work was partially supported by the National Satellite of Excellence in Trustworthy Software Systems, funded by National Research Foundation (NRF) Singapore under National Cybersecurity R\&D (NCR) programme, and by a Singapore Ministry of Education (MOE) Academic Research Fund (AcRF) Tier 1 Grant No. 17-C220-SMU-008.}},
	issn = {{1049-331X}},
	journal = {{ACM TRANSACTIONS ON SOFTWARE ENGINEERING AND METHODOLOGY}},
	journal-iso = {{ACM Trans. Softw. Eng. Methodol.}},
	keywords = {{Program repair; smart contract}},
	language = {{English}},
	month = {{OCT}},
	number = {{4}},
	number-of-cited-references = {{42}},
	oa = {{Green Accepted}},
	orcid-numbers = {{Lo, David/0000-0002-4367-7201}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Lo, David/A-2493-2012}},
	times-cited = {{2}},
	title = {{Smart Contract Repair}},
	type = {{Article}},
	unique-id = {{WOS:000580403500006}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{3}},
	volume = {{29}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3402450}}

@inproceedings{WOS:000503498000035,
	abstract = {{We investigate a family of bugs in blockchain-based smart contracts,
   which we dub event-ordering(or EO) bugs. These bugs are intimately
   related to the dynamic ordering of contract events, i.e. calls of its
   functions, and enable potential exploits of millions of USD worth of
   crypto-coins. Previous techniques to detect EO bugs have been restricted
   to those bugs that involve just one or two event orderings. Our work
   provides a new formulation of the general class of EO bugs arising in
   long permutations of such events by using techniques from concurrent
   program analysis.
   The technical challenge in detecting EO bugs in blockchain contracts is
   the inherent combinatorial blowup in path and state space analysis, even
   for simple contracts. We propose the first use of partial-order
   reduction techniques, using automatically extracted happens-before
   relations along with several dynamic symbolic execution optimizations.
   We build ETHRACER, an automatic analysis tool that runs directly on
   Ethereum bytecode and requires no hints from users. It flags 8\% of over
   10, 000 contracts analyzed, providing compact event traces (witnesses)
   that human analysts can examine in only a few minutes per contract. More
   than half of the flagged contracts are likely to have unintended
   behavior.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Kolluri, A (Corresponding Author), NUS, Sch Comp, Singapore, Singapore. Kolluri, Aashish; Nikolic, Ivica; Saxena, Prateek, NUS, Sch Comp, Singapore, Singapore. Sergey, Ilya; Hobor, Aquinas, NUS, Sch Comp, Yale NUS Coll, Singapore, Singapore.}},
	author = {Kolluri, Aashish and Nikolic, Ivica and Sergey, Ilya and Hobor, Aquinas and Saxena, Prateek},
	booktitle = {{PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA `19)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO1ZS}},
	doi = {{10.1145/3293882.3330560}},
	editor = {{Zhang, DM and Moller, A}},
	funding-acknowledgement = {{Crystal Center at National University Of Singapore; Ministry of Education, SingaporeMinistry of Education, Singapore {[}R-252-000-560-112]; Yale-NUS College grant {[}R-607-265-322-121]}},
	funding-text = {{We thank Shweta Shinde and Shiqi Shen for their valuable comments and their help with writing a previous version of this paper. We thank sponsors of the Crystal Center at National University Of Singapore which has supported this work. Further, Ivica Nikolic is supported by the Ministry of Education, Singapore under Grant No. R-252-000-560-112. Aquinas Hobor was partially supported by Yale-NUS College grant R-607-265-322-121.}},
	isbn = {{978-1-4503-6224-5}},
	keywords = {{Smart Contract Security; Concurrency; Ethereum; Happens-Before}},
	keywords-plus = {{RACE DETECTION}},
	language = {{English}},
	note = {{28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), Beijing, PEOPLES R CHINA, JUL 15-19, 2019}},
	number-of-cited-references = {{42}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Sergey, Ilya/0000-0003-4250-5392}},
	organization = {{Assoc Comp Machinery; ACM SIGSOFT; Microsoft Res; DiDi; Google; Huawei; MoocTest; Facebook; Fujitsu; Sourcebrella; UCLouvain}},
	pages = {{363-373}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{9}},
	title = {{Exploiting the Laws of Order in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000503498000035}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3293882.3330560}}

@article{WOS:000701166800009,
	abstract = {{In the new era of blockchain-based multi-agent robotic systems, smart
   contract programs perform an influential role in implementing
   decentralized applications with required task allocations. Smart
   contract programs are developed using script-type of programming
   languages, and they have already deployed several vulnerable patterns
   without proper testing and audit. We studied Solidity smart contracts
   running on the Ethereum platform and identified that they had been
   exploited because of several programming issues, especially using
   low-level external calls to malicious sources. Since smart contracts are
   immutable after their deployment to autonomous multi-robot systems, they
   should be tested to fix possible development phase issues. We
   implemented a prototype plugin called SolGuard by extending the solhint
   linter to prevent three critical issues related to Solidity smart
   contract programs' usage of external calls. The SolGuard plugin checks
   state variable order in the smart contracts, participation of
   delegatecall invocations, address type parameters in the smart
   contract's constructor, and denial of service patterns. We empirically
   evaluate the SolGuard plugin with existing popular static analysis
   tools. Our results indicate that SolGuard outperformed the baseline
   tools in terms of efficiency and accuracy. (c) 2021 Elsevier Inc. All
   rights reserved.}},
	address = {{STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA}},
	affiliation = {{Pan, L (Corresponding Author), Deakin Univ, Ctr Cyber Secur Res \& Innovat CSRI, Geelong, Vic 3220, Australia. Zheng, X (Corresponding Author), Macquarie Univ, Sydney, NSW, Australia. Praitheeshan, Purathani; Pan, Lei; Doss, Robin, Deakin Univ, Ctr Cyber Secur Res \& Innovat CSRI, Geelong, Vic 3220, Australia. Zheng, Xi; Jolfaei, Alireza, Macquarie Univ, Sydney, NSW, Australia.}},
	author = {Praitheeshan, Purathani and Pan, Lei and Zheng, Xi and Jolfaei, Alireza and Doss, Robin},
	author-email = {{l.pan@deakin.edu.au james.zheng@mq.edu.au}},
	da = {{2021-11-07}},
	doc-delivery-number = {{UX9PB}},
	doi = {{10.1016/j.ins.2021.08.007}},
	eissn = {{1872-6291}},
	issn = {{0020-0255}},
	journal = {{INFORMATION SCIENCES}},
	journal-iso = {{Inf. Sci.}},
	keywords = {{Smart contract; Solidity; Security vulnerabilities; External call; Blockchain-based autonomous robotics systems}},
	language = {{English}},
	month = {{NOV}},
	number-of-cited-references = {{48}},
	orcid-numbers = {{Jolfaei, Alireza/0000-0001-7818-459X zheng, xi/0000-0002-2572-2355}},
	pages = {{150-166}},
	publisher = {{ELSEVIER SCIENCE INC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{SolGuard: Preventing external call issues in smart contract-based multi-agent robotic systems}},
	type = {{Article}},
	unique-id = {{WOS:000701166800009}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{579}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1016/j.ins.2021.08.007}}

@article{WOS:000612229800006,
	abstract = {{Blockchain technology brings innovation to various industries. Ethereum
   is currently the second blockchain platform by market capitalization,
   it's also the largest smart contract blockchain platform. Smart
   contracts can simplify and accelerate the development of various
   applications, but they also bring some problems. For example, smart
   contracts are used to commit fraud, vulnerability contracts are
   deliberately developed to undermine fairness, and there are numerous
   duplicative contracts that waste performance with no actual purpose. In
   this paper, we propose a transaction-based classification and detection
   approach for Ethereum smart contract to address these issues. We
   collected over 10,000 smart contracts from Ethereum and focused on the
   data behavior generated by smart contracts and users. We identified four
   behavior patterns from the transactions by manual analysis, which can be
   used to distinguish the difference between different types of contracts.
   Then 14 basic features of a smart contract are constructed from these.
   To construct the experimental dataset, we propose a data slicing
   algorithm for slicing the collected smart contracts. After that, we use
   an LSTM network to train and test our datasets. The extensive
   experimental results show that our approach can distinguish different
   types of contracts and can be applied to anomaly detection and malicious
   contract identification with satisfactory precision, recall, and
   f1-score.}},
	address = {{THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND}},
	affiliation = {{Zhang, XS (Corresponding Author), Univ Elect Sci \& Technol China, Sch Comp Sci \& Engn, Inst Cyber Secur, Chengdu, Peoples R China. Hu, Teng; Chen, Ting; Zhang, Xiaosong; Niu, Weina; Zhou, Kun, Univ Elect Sci \& Technol China, Sch Comp Sci \& Engn, Inst Cyber Secur, Chengdu, Peoples R China. Hu, Teng; Liu, Xiaolei; Zhou, Kun; Liu, Yuan, China Acad Engn Phys, Inst Comp Applicat, Mianyang, Sichuan, Peoples R China. Zhang, Xiaosong, Peng Cheng Lab, Cyberspace Secur Res Ctr, Shenzhen, Peoples R China. Huang, Xiaoming, CETC Cyberspace Secur Res Inst Co Ltd, Beijing, Peoples R China. Lu, Jiazhong, Chengdu Univ Informat Technol, Sch Cybersecur, Chengdu, Peoples R China.}},
	article-number = {{102462}},
	author = {Hu, Teng and Liu, Xiaolei and Chen, Ting and Zhang, Xiaosong and Huang, Xiaoming and Niu, Weina and Lu, Jiazhong and Zhou, Kun and Liu, Yuan},
	author-email = {{mailhuteng@gmail.com johnsonzxs@uestc.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{PY7NV}},
	doi = {{10.1016/j.ipm.2020.102462}},
	eissn = {{1873-5371}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}U19A2066, 61902262]; Institute of Computer Application, China Academy of Engineering Physics {[}SJ2019A05]}},
	funding-text = {{This work was supported by the National Natural Science Foundation of China (No. U19A2066, No. 61902262) and the Institute of Computer Application, China Academy of Engineering Physics (SJ2019A05).}},
	issn = {{0306-4573}},
	journal = {{INFORMATION PROCESSING \& MANAGEMENT}},
	journal-iso = {{Inf. Process. Manage.}},
	keywords = {{Blockchain; Ethereum; Smart contract; Classification; Security}},
	language = {{English}},
	month = {{MAR}},
	number = {{2}},
	number-of-cited-references = {{58}},
	publisher = {{ELSEVIER SCI LTD}},
	research-areas = {{Computer Science; Information Science \& Library Science}},
	times-cited = {{14}},
	title = {{Transaction-based classification and detection approach for Ethereum smart contract}},
	type = {{Article}},
	unique-id = {{WOS:000612229800006}},
	usage-count-last-180-days = {{24}},
	usage-count-since-2013 = {{41}},
	volume = {{58}},
	web-of-science-categories = {{Computer Science, Information Systems; Information Science \& Library Science}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1016/j.ipm.2020.102462}}

@inproceedings{WOS:000573279300032,
	abstract = {{Blockchain has gradually been popularized by its transparency, fairness,
   and democracy. This technology has opened the door to the development of
   Ethereum, a blockchain platform with smart contracts that can hold and
   automatically transfer tokens. Like a legacy computer program, smart
   contracts are vulnerable to security bugs. In recent years, many
   successful attacks on Ethereum network have been recorded, cost victims
   millions of dollars. In this paper, we classify attack vectors of
   Ethereum smart contracts, then propose some behaviour-based methods to
   detect them. To realize the ideas, we implement Abbe, a tool that can
   not only discover known attacks but also detect zero-day
   vulnerabilities.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Nguyen-An, K (Corresponding Author), Univ Technol HCMUT, VNU HCM, Ho Chi Minh City, Vietnam. Quoc-Bao Nguyen; Khuong Nguyen-An, Univ Technol HCMUT, VNU HCM, Ho Chi Minh City, Vietnam. Nguyen, Anh-Quynh, Nanyang Technol Univ, Singapore, Singapore. Van-Hoa Nguyen; Thanh Nguyen-Le, Verichains Lab, Ho Chi Minh City, Vietnam.}},
	author = {Quoc-Bao Nguyen and Nguyen, Anh-Quynh and Van-Hoa Nguyen and Thanh Nguyen-Le and Khuong Nguyen-An},
	author-email = {{1510180@hcmut.edu.vn aqnguyen@ntu.edu.sg vanhoa@verichains.io thanh@verichains.io nakhuong@hcmut.edu.vn}},
	booktitle = {{FUTURE DATA AND SECURITY ENGINEERING (FDSE 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ0OQ}},
	doi = {{10.1007/978-3-030-35653-8\_32}},
	editor = {{Dang, TK and Kung, J and Takizawa, M and Bui, SH}},
	eissn = {{1611-3349}},
	funding-acknowledgement = {{University of Technology (HCMUT), VNU-HCM under ``Student Scientific Research{''} {[}121/H-D-DHBK-KHCNDA]; Vietnam National University-HCMC {[}C2019-2014]}},
	funding-text = {{During the preparation of this work, the first author was partially supported by University of Technology (HCMUT), VNU-HCM under ``Student Scientific Research{''} Grant Number 121/H-D-DHBK-KHCN \& DA; and the last author was partially funded by Vietnam National University-HCMC under Grant C2019-2014. The authors would like to thank Nguyen Van Thanh for his comments helping to improve the manuscript significantly.}},
	isbn = {{978-3-030-35653-8; 978-3-030-35652-1}},
	issn = {{0302-9743}},
	keywords = {{Smart contract; Security; Ethereum; Blockchain}},
	language = {{English}},
	note = {{6th International Conference on Future Data and Security Engineering (FDSE), Telecommunicat Univ, Nha Trang City, VIETNAM, NOV 27-29, 2019}},
	number-of-cited-references = {{25}},
	orcid-numbers = {{Nguyen - An, Khuong/0000-0002-9910-6387}},
	pages = {{485-505}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{0}},
	title = {{Detect Abnormal Behaviours in Ethereum Smart Contracts Using Attack Vectors}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000573279300032}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{11814}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-030-35653-8%5C_32}}

@article{WOS:000510648800015,
	abstract = {{Smart contracts are a special type of programs running inside a
   blockchain. Immutable and transparent, they provide means to implement
   fault-tolerant and censorship-resistant services. Unfortunately, its
   immutability causes a serious challenge of ensuring that a business
   logic and implementation is correct upfront, before publishing in a
   blockchain. Several big accidents have indeed shown that users of this
   technology need special tools to verify smart contract correctness.
   Existing automated checkers are able to detect only well known
   implementation bugs, leaving the question of business logic correctness
   far aside. In this work, we present a symbolic model-checking technique
   along with a formal specification method for a subset of Solidity
   programming language that is able to express both state properties and
   trace properties; the latter constitutes a weak analogy of temporal
   properties. We evaluate the proposed technique on the MiniDAO smart
   contract, a young brother of notorious TheDAO. Our Proof-of-Concept was
   able to detect a non-trivial error in the business logic of this smart
   contract in a few seconds.}},
	address = {{PLEIADES PUBLISHING INC, MOSCOW, 00000, RUSSIA}},
	affiliation = {{Shishkin, E (Corresponding Author), InfoTeCS, Adv Res Dept, Moscow, Russia. Shishkin, E., InfoTeCS, Adv Res Dept, Moscow, Russia.}},
	author = {Shishkin, E.},
	author-email = {{evgeny.shishkin@infotecs.ru}},
	da = {{2021-11-07}},
	doc-delivery-number = {{KH4WD}},
	doi = {{10.1134/S0361768819080164}},
	eissn = {{1608-3261}},
	issn = {{0361-7688}},
	journal = {{PROGRAMMING AND COMPUTER SOFTWARE}},
	journal-iso = {{Program. Comput. Softw.}},
	language = {{English}},
	month = {{DEC}},
	number = {{8}},
	number-of-cited-references = {{13}},
	oa = {{Green Submitted}},
	pages = {{590-599}},
	publisher = {{PLEIADES PUBLISHING INC}},
	research-areas = {{Computer Science}},
	times-cited = {{2}},
	title = {{Debugging Smart Contract's Business Logic Using Symbolic Model Checking}},
	type = {{Article}},
	unique-id = {{WOS:000510648800015}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{8}},
	volume = {{45}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1134/S0361768819080164}}

@inproceedings{WOS:000509760700168,
	abstract = {{In recent years, smart contracts have suffered major exploits, losing
   millions of dollars. Unlike traditional programs, smart contracts cannot
   be updated once deployed. Though various tools were proposed to detect
   vulnerable smart contracts, they all fail to protect contracts that have
   already been deployed on the blockchain. Moreover, they focus on
   vulnerabilities, but do not address scams (e.g., honeypots). In this
   work, we introduce AEGIS, a tool that shields smart contracts and users
   on the blockchain from being exploited. To this end, AEGIS reverts
   transactions in real-time based on pattern matching. These patterns
   encode the detection of malicious transactions that trigger exploits or
   scams. New patterns are voted upon and stored via a smart contract, thus
   leveraging the benefits of tamper-resistance and transparency provided
   by blockchain. By allowing its protection to be updated, the smart
   contract acts as a smart shield.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Torres, CF (Corresponding Author), Univ Luxembourg, SnT, Luxembourg, Luxembourg. Torres, Christof Ferreira; Baden, Mathis; Norvill, Robert, Univ Luxembourg, SnT, Luxembourg, Luxembourg. Jonker, Hugo, Open Univ Netherlands, Heerlen, Netherlands. Jonker, Hugo, Radboud Univ Nijmegen, Nijmegen, Netherlands.}},
	author = {Torres, Christof Ferreira and Baden, Mathis and Norvill, Robert and Jonker, Hugo},
	author-email = {{christof.torres@uni.lu mathis.steichen@uni.lu robert.norvill@uni.lu hugo.jonker@ou.nl}},
	book-group-author = {{ACM}},
	booktitle = {{PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO2ZY}},
	doi = {{10.1145/3319535.3363263}},
	funding-acknowledgement = {{Luxembourg National Research Fund (FNR)Luxembourg National Research Fund {[}13192291]}},
	funding-text = {{Thiswork is partly supported by the Luxembourg National Research Fund (FNR) under grant 13192291.}},
	isbn = {{978-1-4503-6747-9}},
	keywords = {{Ethereum; smart contracts; exploit prevention; security updates}},
	language = {{English}},
	note = {{ACM SIGSAC Conference on Computer and Communications Security (CCS), London, ENGLAND, NOV 11-15, 2019}},
	number-of-cited-references = {{14}},
	organization = {{Assoc Comp Machinery; ACM SIGSAC}},
	pages = {{2589-2591}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science; Telecommunications}},
	times-cited = {{1}},
	title = {{Poster: AEGIS: Smart Shielding of Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000509760700168}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods; Telecommunications}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3319535.3363263}}

@inproceedings{WOS:000485139900078,
	abstract = {{Bug bounties are a popular tool to help prevent software exploits. Yet,
   they lack rigorous principles for setting bounty amounts and require
   high payments to attract economically rational hackers. Rather than
   claim bounties for serious bugs, hackers often sell or exploit them.
   We present the Hydra Framework, the first general, principled approach
   to modeling and administering bug bounties that incentivize bug
   disclosure. Our key idea is an exploit gap, a program transformation
   that enables runtime detection, and rewarding, of critical bugs. Our
   framework transforms programs via N-of-N-version programming, a variant
   of classical N-version programming that runs multiple independent
   program instances.
   We apply the Hydra Framework to smart contracts, small programs that
   execute on blockchains. We show how Hydra contracts greatly amplify the
   power of bounties to incentivize bug disclosure by economically rational
   adversaries, establishing the first framework for rigorous economic
   evaluation of smart contract security. We also model powerful
   adversaries capable of bug withholding, exploiting race conditions in
   blockchains to claim bounties before honest users can. We present
   Submarine Commitments, a countermeasure of independent interest that
   conceals transactions on blockchains.
   We design a simple, automated version of the Hydra Framework for
   Ethereum (ethereum.org) and implement two Hydra contracts, an ERC20
   standard token and a Monty-Hall game. We evaluate our implementation for
   completeness and soundness with the official Ethereum Virtual Machine
   test suite and live blockchain data.}},
	address = {{SUITE 215, 2560 NINTH ST, BERKELEY, CA 94710 USA}},
	affiliation = {{Breidenbach, L (Corresponding Author), Cornell Tech, IC3, New York, NY 10044 USA. Breidenbach, L (Corresponding Author), Swiss Fed Inst Technol, Zurich, Switzerland. Breidenbach, Lorenz; Daian, Philip; Juels, Ari, Cornell Tech, IC3, New York, NY 10044 USA. Breidenbach, Lorenz, Swiss Fed Inst Technol, Zurich, Switzerland. Tramer, Florian, Stanford, Stanford, CA USA. Juels, Ari, Jacobs Inst, Buffalo, NY USA.}},
	author = {Breidenbach, Lorenz and Daian, Philip and Tramer, Florian and Juels, Ari},
	author-email = {{lorenzb@inf.ethz.ch phil@cs.cornell.edu tramer@cs.stanford.edu juels@cornell.edu}},
	book-group-author = {{USENIX Assoc}},
	booktitle = {{PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BN6DY}},
	funding-acknowledgement = {{NSFNational Science Foundation (NSF) {[}CNS-1330599, CNS-1514163, CNS-1564102, CNS-1704615]; ARLUnited States Department of DefenseUS Army Research Laboratory (ARL) {[}W911NF-16-1-0145]; National Science FoundationNational Science Foundation (NSF) {[}DGE-1650441]; ETH Studio New York scholarship}},
	funding-text = {{We thank Paul Grubbs and Rahul Chatterjee for comments and feedback. This research was supported by NSF CNS-1330599, CNS-1514163, CNS-1564102, and CNS-1704615, ARL W911NF-16-1-0145, and IC3 Industry Partners. Philip Daian is supported by the National Science Foundation Graduate Research Fellowship DGE-1650441. Lorenz Breidenbach was supported by the ETH Studio New York scholarship.}},
	isbn = {{978-1-939133-04-5}},
	language = {{English}},
	note = {{27th USENIX Security Symposium, Baltimore, MD, AUG 15-17, 2018}},
	number-of-cited-references = {{56}},
	organization = {{Usenix Assoc; Facebook; NSF; Baidu; Google; Dropbox; Microsoft; NetApp; Private Internet Access}},
	pages = {{1335-1352}},
	publisher = {{USENIX ASSOC}},
	research-areas = {{Computer Science}},
	times-cited = {{6}},
	title = {{Enter the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000485139900078}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2018}}}

@inproceedings{WOS:000481634500148,
	abstract = {{Ethereum provides an open, global computing platform, that allows the
   exchange of value, automated and enforced workflows, and the development
   of general purpose applications and libraries. Smart contracts present a
   foundation for the computational capabilities of the Ethereum network.
   Motivated by the known security breaches and recurring financial losses
   due to smart contracts vulnerabilities, we review the field of security
   of smart contract programming and provide a comprehensive taxonomy of
   all known security issues. We achieve that by a thorough review of known
   vulnerabilities. In this work we also review the security code analysis
   tools used to identify known vulnerabilities. We conduct the
   investigation of security code analysis tools on Ethereum by assessing
   their effectiveness and accuracy on known issues on a representative
   sample of vulnerable contracts. We have used 21 clean, and 24 vulnerable
   contracts and four security tools: Oyente, Securify, Remix, and
   SmartCheck, to assess the quality of contemporary security analysis
   tools specific to Ethereum. The results indicate that there are overall
   inconsistencies between the tools in respect to different security
   properties. SmartCheck outperformed the other tools in terms of
   effectiveness, whereas Oyente performed the best in terms of accuracy.
   Furthermore, based on the limitations we identified, we propose
   improvements within the user interfaces, interpretation of results, and,
   most importantly, an enhanced list for vulnerability checks.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Dika, A (Corresponding Author), Norwegian Univ Sci \& Technol, NTNU, Informat Secur Dept, Gjovik, Norway. Dika, Ardit, Norwegian Univ Sci \& Technol, NTNU, Informat Secur Dept, Gjovik, Norway. Norwegian Univ Sci \& Technol, NTNU, Comp Sci Dept, Gjovik, Norway.}},
	author = {Dika, Ardit and Nowostawski, Mariusz},
	author-email = {{dika.ardit@gmail.com mariusz.nowostawski@ntnu.no}},
	book-group-author = {{IEEE}},
	booktitle = {{IEEE 2018 INTERNATIONAL CONGRESS ON CYBERMATICS / 2018 IEEE CONFERENCES ON INTERNET OF THINGS, GREEN COMPUTING AND COMMUNICATIONS, CYBER, PHYSICAL AND SOCIAL COMPUTING, SMART DATA, BLOCKCHAIN, COMPUTER AND INFORMATION TECHNOLOGY}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BN4AE}},
	doi = {{10.1109/Cybermatics\_2018.2018.00182}},
	isbn = {{978-1-5386-7975-3}},
	language = {{English}},
	note = {{IEEE International Congress on Cybermatics / IEEE Conferences on Internet of Things, Green Computing and Communications, Cyber, Physical and Social Computing, Smart Data, Blockchain, Computer and Information Technology, Halifax, CANADA, JUL 30-AUG 03, 2018}},
	number-of-cited-references = {{19}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{955-962}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{4}},
	title = {{Security Vulnerabilities in Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000481634500148}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1109/Cybermatics%5C_2018.2018.00182}}

@inproceedings{WOS:000693400500011,
	abstract = {{The Ethereum ecosystem has introduced a pervasive blockchain platform
   with programmable transactions. Everyone is allowed to develop and
   deploy smart contracts. Such flexibility can lead to a large collection
   of similar contracts, i.e., clones, especially when Ethereum
   applications are highly domain-specific and may share similar
   functionalities within the same domain, e.g., token contracts often
   provide interfaces for money transfer and balance inquiry. While smart
   contract clones have a wide range of impact across different
   applications, e.g., security, they are relatively little studied.
   Although clone detection has been a long-standing research topic,
   blockchain smart contracts introduce new challenges, e.g., syntactic
   diversity due to trade-off between storage and execution, understanding
   high-level business logic etc.. In this paper, we highlighted the very
   first attempt to clone detection of Ethereum smart contracts. To
   overcome the new challenges, we introduce the concept of smart contract
   birthmark, i.e., a semantic-preserving and computable representation for
   smart contract bytecode. The birthmark captures high-level semantics by
   effectively sketching symbolic execution traces (e.g., data access
   dependencies, path conditions) and maintain syntactic regularities
   (e.g., type and number of instructions) as well. Then, the clone
   detection problem is reduced to a computation of statistical similarity
   between two contract birthmarks. We have implemented a clone detector
   called EClone and evaluated it on Ethereum. The empirical results
   demonstrated the potential of EClone in accurately identifying clones.
   We have also extended EClone for vulnerability search and managed to
   detect CVE-2018-10376 instances.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Liu, H (Corresponding Author), Tsinghua Univ, Beijing, Peoples R China. Liu, Han; Yang, Zhiqiang; Jiang, Yu; Sun, Jiaguang, Tsinghua Univ, Beijing, Peoples R China. Zhao, Wenqi, Ant Financial, Beijing, Peoples R China.}},
	author = {Liu, Han and Yang, Zhiqiang and Jiang, Yu and Zhao, Wenqi and Sun, Jiaguang},
	author-email = {{liuhan2017@tsinghua.edu.cn jy19891@tsinghua.edu.cn muhan.zwq@antfin.com}},
	book-group-author = {{IEEE COMP SOC}},
	booktitle = {{2019 IEEE/ACM 27TH INTERNATIONAL CONFERENCE ON PROGRAM COMPREHENSION (ICPC 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS1MW}},
	doi = {{10.1109/ICPC.2019.00024}},
	funding-acknowledgement = {{NSFCNational Natural Science Foundation of China (NSFC) {[}61527812, 61802223]; MIIT IT funds (Research and application of TCN key technologies) of China; National Science and Technology Major Project {[}2016ZX01038101]; National Key Technology RD ProgramNational Key Technology R\&D Program {[}2015BAG14B01-02]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2017M620785]}},
	funding-text = {{We thank reviewers for their insightful comments. This work is sponsored by NSFC under Grant No.: 61527812, 61802223, MIIT IT funds (Research and application of TCN key technologies) of China, National Science and Technology Major Project under Grant No.: 2016ZX01038101, National Key Technology R\&D Program under Grant No.: 2015BAG14B01-02, and China Postdoctoral Science Foundation under Grant No.: 2017M620785.}},
	isbn = {{978-1-7281-1519-1}},
	issn = {{1092-8138}},
	keywords = {{Ethereum; clone detection; smart contract birthmark; symbolic execution}},
	language = {{English}},
	note = {{27th IEEE/ACM International Conference on Program Comprehension (ICPC), Montreal, CANADA, MAY 25, 2019}},
	number-of-cited-references = {{31}},
	organization = {{IEEE; Assoc Comp Machinery; Concordia Univ; Tourisme Montreal}},
	pages = {{105-115}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{International Conference on Program Comprehension}},
	times-cited = {{5}},
	title = {{Enabling Clone Detection For Ethereum via Smart Contract Birthmarks}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000693400500011}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ICPC.2019.00024}}

@inproceedings{WOS:000491481600004,
	abstract = {{The recent growth of the blockchain technology market puts its main
   cryptocurrencies in the spotlight. Among them, Ethereum stands out due
   to its virtual machine (EVM) supporting smart contracts, i.e.,
   distributed programs that control the flow of the digital currency
   Ether. Being written in a Turing complete language, Ethereum smart
   contracts allow for expressing a broad spectrum of financial
   applications. The price for this expressiveness, however, is a
   significant semantic complexity, which increases the risk of programming
   errors. Recent attacks exploiting bugs in smart contract implementations
   call for the design of formal verification techniques for smart
   contracts. This, however, requires rigorous semantic foundations, a
   formal characterization of the expected security properties, and
   dedicated abstraction techniques tailored to the specific EVM semantics.
   This work will overview the state-of-the-art in smart contract
   verification, covering formal semantics, security definitions, and
   verification tools. We will then focus on EtherTrust {[}1], a framework
   for the static analysis of Ethereum smart contracts which includes the
   first complete small-step semantics of EVM bytecode, the first formal
   characterization of a large class of security properties for smart
   contracts, and the first static analysis for EVM bytecode that comes
   with a proof of soundness.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Grishchenko, I; Maffei, M; Schneidewind, C (Corresponding Author), TU Wien, Vienna, Austria. Grishchenko, Ilya; Maffei, Matteo; Schneidewind, Clara, TU Wien, Vienna, Austria.}},
	author = {Grishchenko, Ilya and Maffei, Matteo and Schneidewind, Clara},
	author-email = {{ilya.grishchenko@tuwien.ac.at matteo.maffei@tuwien.ac.at clara.schneidewind@tuwien.ac.at}},
	booktitle = {{COMPUTER AIDED VERIFICATION (CAV 2018), PT I}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO0KH}},
	doi = {{10.1007/978-3-319-96145-3\_4}},
	editor = {{Chockler, H and Weissenbacher, G}},
	eissn = {{1611-3349}},
	funding-acknowledgement = {{European Research Council (ERC) under the European Union's Horizon 2020 researchEuropean Research Council (ERC) {[}771527-BROWSEC]; Netidee through the project EtherTrust {[}2158]; Austrian Research Promotion Agency through the Bridge-1 project PR4DLT {[}13808694]; COMET K1 SBA}},
	funding-text = {{This work has been partially supported by the European Research Council (ERC) under the European Union's Horizon 2020 research (grant agreement No 771527-BROWSEC), by Netidee through the project EtherTrust (grant agreement 2158), by the Austrian Research Promotion Agency through the Bridge-1 project PR4DLT (grant agreement 13808694) and COMET K1 SBA.}},
	isbn = {{978-3-319-96145-3; 978-3-319-96144-6}},
	issn = {{0302-9743}},
	language = {{English}},
	note = {{30th International Conference on Computer-Aided Verification (CAV) Held as Part of the Federated Logic Conference (FloC), Oxford, ENGLAND, JUL 14-17, 2018}},
	number-of-cited-references = {{36}},
	oa = {{hybrid}},
	pages = {{51-78}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{24}},
	title = {{Foundations and Tools for the Static Analysis of Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000491481600004}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{3}},
	volume = {{10981}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-96145-3%5C_4}}

@inproceedings{WOS:000469754100054,
	abstract = {{Attacks on transactions of Ethereum could be dangerous because they
   could lead to a big loss of money. There are many tools detecting
   vulnerabilities in smart contracts trying to avoid potential attacks.
   However, we found that there are still many missed vulnerabilities in
   contracts. Motivated by this, we propose a methodology to reinforce EVM
   to stop dangerous transactions in real time even when the smart contract
   contains vulnerabilities. Basically, the methodology consists of three
   steps: monitoring strategy definition, opcode-structure maintenance and
   EVM instrumentation. Monitoring strategy definition refers to the
   specific rule to test whether there is a dangerous operation during
   transaction execution. Opcode-structure maintenance is to maintain a
   structure to store the rule related opcodes and analyze it before an
   operation execution. EVM instrumentation inserts the monitoring
   strategy, interrupting mechanism and the opcode-structure operations in
   EVM source code. For evaluation, we implement EVM{*} on js-evm, a
   widely-used EVM platform written in javascript. We collect 10 contracts
   online with known bugs and use each contract to execute a dangerous
   transaction, all of them have been interrupted by our reinforced EVM{*},
   while the original EVM permits all attack transactions. For the time
   overhead, the reinforced EVM{*} is slower than the original one by
   20-30\%, which is tolerable for the financial critical applications.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Ma, FC (Corresponding Author), Beijing Univ Posts \& Telecommun, Beijing, Peoples R China. Ma, Fuchen, Beijing Univ Posts \& Telecommun, Beijing, Peoples R China. Fu, Ying; Wang, Mingzhe; Jiang, Yu, Tsinghua Univ, Beijing, Peoples R China. Ren, Meng, Sun Yat Sen Univ, Guangzhou, Guangdong, Peoples R China. Zhang, Kaixiang; Li, Huizhong; Shi, Xiang, WeBank, Shenzhen, Peoples R China.}},
	author = {Ma, Fuchen and Fu, Ying and Ren, Meng and Wang, Mingzhe and Jiang, Yu and Zhang, Kaixiang and Li, Huizhong and Shi, Xiang},
	author-email = {{mfc@bupt.edu.cn fy17@mails.tsinghua.edu.cn renm8@mail2.sysu.edu.cn wmzhere@gmail.com jiangyu198964@126.com kxzhang@webank.com wheatli@webank.com jimmyshi@webank.com}},
	booktitle = {{2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BM8OM}},
	editor = {{Wang, X and Lo, D and Shihab, E}},
	isbn = {{978-1-7281-0591-8}},
	keywords = {{Blockchain security; Ethereum; EVM defending}},
	language = {{English}},
	note = {{26th IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER), Hangzhou, PEOPLES R CHINA, FEB 24-27, 2019}},
	number-of-cited-references = {{12}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Comp Soc, Tech Council Software Engn; Zhejiang Univ}},
	pages = {{554-558}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{6}},
	title = {{EVM{*}: From Offline Detection to Online Reinforcement for Ethereum Virtual Machine}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000469754100054}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}}}

@article{WOS:000658372100018,
	abstract = {{Smart contracts are more sensitive from a security perspective than
   other software due to several reasons. First, smart contracts are
   immutable thus cannot be easily patched once deployed. Second, smart
   contracts are directly tied to payments and can hold millions of
   dollars' worth of digital currencies. Third, smart contracts are still a
   new practice thus do not have best coding practices and development
   lifecycles tailored for decentralized apps yet. Even though several
   testing and verification tools have been developed, smart contract
   vulnerabilities remain a clear and present danger. In this paper, we
   present an approach that is different from existing ones that attempt to
   eliminate vulnerabilities from smart contracts. Instead, we fortify
   Ethereum virtual machines (EVM) to stop dangerous transactions once
   vulnerabilities are detected in real-time. Since proving programs
   written in Turing-complete languages is undecidable, our approach
   complements current approaches by catching vulnerabilities and
   interrupts their executions during runtime. We have implemented our
   reinforcement on two widely used EVMs (js-evm and FISCO-BCOS-evm). The
   reinforced EVMs detects and interrupts all the vulnerabilities, 20\% of
   them missed by testing tools, in 100 real smart contracts. Our approach
   is practical with less than 34\% overhead. In fact, the reinforced
   FISCO-BCOS-evm has been integrated into the official release of
   FISCO-BCOS adopted by a large Chinese bank WeBank.}},
	address = {{THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND}},
	affiliation = {{Ma, FC (Corresponding Author), Tsinghua Univ, Beijing, Peoples R China. Ma, Fuchen; Ren, Meng; Fu, Ying; Wang, Mingzhe; Jiang, Yu, Tsinghua Univ, Beijing, Peoples R China. Li, Huizhong, WeBank, Shenzhen, Peoples R China. Song, Houbing, Embry Riddle Aeronaut Univ, Daytona Beach, FL USA.}},
	article-number = {{102565}},
	author = {Ma, Fuchen and Ren, Meng and Fu, Ying and Wang, Mingzhe and Li, Huizhong and Song, Houbing and Jiang, Yu},
	author-email = {{mafc19@mails.tsinghua.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{SN6BG}},
	doi = {{10.1016/j.ipm.2021.102565}},
	eissn = {{1873-5371}},
	funding-acknowledgement = {{NSFC ProgramNational Natural Science Foundation of China (NSFC) {[}62022046, U1911401, 61802223]; National Key Research and Development Project {[}2019YFB1706200]}},
	funding-text = {{This research is sponsored in part by the NSFC Program (No. 62022046, U1911401, 61802223), National Key Research and Development Project (Grant No. 2019YFB1706200).}},
	issn = {{0306-4573}},
	journal = {{INFORMATION PROCESSING \& MANAGEMENT}},
	journal-iso = {{Inf. Process. Manage.}},
	keywords = {{Ethereum virtual machine; Online reinforcement; Vulnerability; Smart contract}},
	language = {{English}},
	month = {{JUL}},
	number = {{4}},
	number-of-cited-references = {{34}},
	orcid-numbers = {{Song, Houbing/0000-0003-2631-9223}},
	publisher = {{ELSEVIER SCI LTD}},
	research-areas = {{Computer Science; Information Science \& Library Science}},
	researcherid-numbers = {{Song, Houbing/E-3628-2010}},
	times-cited = {{0}},
	title = {{Security reinforcement for Ethereum virtual machine}},
	type = {{Article}},
	unique-id = {{WOS:000658372100018}},
	usage-count-last-180-days = {{9}},
	usage-count-since-2013 = {{9}},
	volume = {{58}},
	web-of-science-categories = {{Computer Science, Information Systems; Information Science \& Library Science}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1016/j.ipm.2021.102565}}

@inproceedings{WOS:000652529800045,
	abstract = {{Ethereum, one of the most popular blockchain platforms, provides
   financial transactions like payments and auctions through smart
   contracts. Due to the immense interest in smart contracts in academia,
   the research community of smart contract security has made a significant
   improvement recently. Researchers have reported various security
   vulnerabilities in smart contracts, and developed static analysis tools
   and verification frameworks to detect them. However, it is unclear
   whether such great efforts from academia has indeed enhanced the
   security of smart contracts in reality.
   To understand the security level of smart contracts in the wild, we
   empirically studied 55,046 real-world Ethereum smart contracts written
   in Solidity, the most popular programming language used by Ethereum
   smart contract developers. We first examined how many well-known
   vulnerabilities the Solidity compiler has patched, and how frequently
   the Solidity team publishes compiler releases. Unfortunately, we
   observed that many known vulnerabilities are not yet patched, and some
   patches are not even sufficient to avoid their target vulnerabilities.
   Subsequently, we investigated whether smart contract developers use the
   most recent compiler with vulnerabilities patched. We reported that
   developers of more than 98\% of real-world Solidity contracts still use
   older compilers without vulnerability patches, and more than 25\% of the
   contracts are potentially vulnerable due to the missing security
   patches. To understand actual impacts of the missing patches, we
   manually investigated potentially vulnerable contracts that are detected
   by our static analyzer and identified common mistakes by Solidity
   developers, which may cause serious security issues such as financial
   loss. We detected hundreds of vulnerable contracts and about one fourth
   of the vulnerable contracts are used by thousands of people. We
   recommend the Solidity team to make patches that resolve known
   vulnerabilities correctly, and developers to use the latest Solidity
   compiler to avoid missing security patches.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Hwang, S (Corresponding Author), Korea Adv Inst Sci \& Technol, Daejeon, South Korea. Hwang, Sungjae; Ryu, Sukyoung, Korea Adv Inst Sci \& Technol, Daejeon, South Korea.}},
	author = {Hwang, Sungjae and Ryu, Sukyoung},
	author-email = {{sjhwang87@kaist.ac.kr sryu.cs@kaist.ac.kr}},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2020 ACM/IEEE 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR4RH}},
	doi = {{10.1145/3377811.3380424}},
	funding-acknowledgement = {{National Research Foundation of Korea (NRF)National Research Foundation of Korea {[}NRF-2017R1A2B3012020, 2017M3C4A7068177]; Institute for Information \& communications Technology Promotion(IITP) - Korea government (MSIT) {[}2018-0-00251]}},
	funding-text = {{We thank Joonyoung Park and Shinhae Kim for their contribution in implementing some part of the static analysis tool. This work was supported by National Research Foundation of Korea (NRF) (Grants NRF-2017R1A2B3012020 and 2017M3C4A7068177) and the Institute for Information \& communications Technology Promotion(IITP) grant funded by the Korea government (MSIT) (2018-0-00251).}},
	isbn = {{978-1-4503-7121-6}},
	issn = {{0270-5257}},
	keywords = {{Empirical Study; Smart Contracts; Solidity; Security Patches}},
	language = {{English}},
	note = {{42nd ACM/IEEE International Conference on Software Engineering - Companion Proceedings (ICSE-Companion), ELECTR NETWORK, JUN 27-JUL 19, 2020}},
	number-of-cited-references = {{50}},
	organization = {{Assoc Comp Machinery; IEEE; IEEE Comp Soc; IEEE Comp Soc Tech Comm Software Engn; ACM Special Interest Grp Software Engn; Korean Inst Informat Scientists \& Engineers; Natl Sci Fdn; Facebook; N Carolina State Univ; Microsoft; Samsung; LG Elect; KAIST; SK Hynix; NAVER; Suresoft; HITACHI; Google}},
	pages = {{542-553}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{International Conference on Software Engineering}},
	times-cited = {{0}},
	title = {{Gap between Theory and Practice : An Empirical Study of Security Patches in Solidity}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000652529800045}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3377811.3380424}}

@inproceedings{WOS:000445805600011,
	abstract = {{Blockchain-based distributed computing platforms enable the trusted
   execution of computation-defined in the form of smart contracts-without
   trusted agents. Smart contracts are envisioned to have a variety of
   applications, ranging from financial to IoT asset tracking.
   Unfortunately, the development of smart contracts has proven to be
   extremely error prone. In practice, contracts are riddled with security
   vulnerabilities comprising a critical issue since bugs are by design
   nonfixable and contracts may handle financial assets of significant
   value. To facilitate the development of secure smart contracts, we have
   created the FSolidM framework, which allows developers to define
   contracts as finite state machines (FSMs) with rigorous and clear
   semantics. FSolidM provides an easy-to-use graphical editor for
   specifying FSMs, a code generator for creating Ethereum smart contracts,
   and a set of plugins that developers may add to their FSMs to enhance
   security and functionality.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Laszka, A (Corresponding Author), Univ Houston, Houston, TX 77004 USA. Mavridou, Anastasia, Vanderbilt Univ, 221 Kirkland Hall, Nashville, TN 37235 USA. Laszka, Aron, Univ Houston, Houston, TX 77004 USA.}},
	author = {Mavridou, Anastasia and Laszka, Aron},
	author-email = {{alaszka@uh.edu}},
	booktitle = {{PRINCIPLES OF SECURITY AND TRUST, POST 2018}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BL0GW}},
	doi = {{10.1007/978-3-319-89722-6\_11}},
	editor = {{Bauer, L and Kusters, R}},
	eissn = {{1611-3349}},
	isbn = {{978-3-319-89722-6; 978-3-319-89721-9}},
	issn = {{0302-9743}},
	keywords = {{Smart contract; Security; Finite state machine Ethereum; Solidity; Automatic code generation; Design patterns}},
	language = {{English}},
	note = {{7th International Conference on Principles of Security and Trust (POST) Held as Part of the 21st European Joint Conferences on Theory and Practice of Software (ETAPS), Thessaloniki, GREECE, APR 14-20, 2018}},
	number-of-cited-references = {{15}},
	oa = {{Green Submitted, hybrid}},
	orcid-numbers = {{Laszka, Aron/0000-0001-7400-2357}},
	pages = {{270-277}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014 Laszka, Aron/AAA-2038-2020}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{15}},
	title = {{Tool Demonstration: FSolidM for Designing Secure Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000445805600011}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{3}},
	volume = {{10804}},
	web-of-science-categories = {{Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-89722-6%5C_11}}

@inproceedings{WOS:000540656400028,
	abstract = {{The adoption of blockchain-based distributed computation platforms is
   growing fast. Some of these platforms, such as Ethereum, provide support
   for implementing smart contracts, which are envisioned to have novel
   applications in a broad range of areas, including finance and the
   Internet-of-Things. However, a significant number of smart contracts
   deployed in practice suffer from security vulnerabilities, which enable
   malicious users to steal assets from a contract or to cause damage.
   Vulnerabilities present a serious issue since contracts may handle
   financial assets of considerable value, and contract bugs are
   non-fixable by design. To help developers create more secure smart
   contracts, we introduce FSolidM, a framework rooted in rigorous
   semantics for designing contracts as Finite State Machines (FSM). We
   present a tool for creating FSM on an easy-to-use graphical interface
   and for automatically generating Ethereum contracts. Further, we
   introduce a set of design patterns, which we implement as plugins that
   developers can easily add to their contracts to enhance security and
   functionality.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Mavridou, A (Corresponding Author), Vanderbilt Univ, 221 Kirkland Hall, Nashville, TN 37235 USA. Mavridou, Anastasia, Vanderbilt Univ, 221 Kirkland Hall, Nashville, TN 37235 USA. Laszka, Aron, Univ Houston, Houston, TX USA.}},
	author = {Mavridou, Anastasia and Laszka, Aron},
	author-email = {{anastasia.mavridou@vanderbilt.edu}},
	booktitle = {{FINANCIAL CRYPTOGRAPHY AND DATA SECURITY, FC 2018}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP1RW}},
	doi = {{10.1007/978-3-662-58387-6\_28}},
	editor = {{Meiklejohn, S and Sako, K}},
	eissn = {{1611-3349}},
	isbn = {{978-3-662-58387-6; 978-3-662-58386-9}},
	issn = {{0302-9743}},
	keywords = {{Smart contract; Security; Finite state machine; Ethereum; Solidity; Automatic code generation; Design patterns}},
	language = {{English}},
	note = {{22nd International Conference on Financial Cryptography and Data Security (FC), Nieuwpoort, CURACAO, FEB 26-MAR 02, 2018}},
	number-of-cited-references = {{20}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Laszka, Aron/0000-0001-7400-2357}},
	organization = {{Blockchain Inst; Ethereum Fdn; Zcash; Kadena; Maker; Protocol Labs; BANEX; Blockstream; Chia; Journal Cybersecur; Mosaic; TrueBit; WorldPay}},
	pages = {{523-540}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{7}},
	title = {{Designing Secure Ethereum Smart Contracts: A Finite State Machine Based Approach}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000540656400028}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{5}},
	volume = {{10957}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-662-58387-6%5C_28}}

@inproceedings{WOS:000648806200014,
	abstract = {{Background: Millions of smart contracts have been deployed to Ethereum
   for providing various applications. Recent studies discovered many
   severe security and performance issues in smart contracts by applying
   static program analysis techniques to them. Given a smart contract, the
   majority of these analysis techniques need to first construct its
   control flow graph, which connects basic blocks through control How
   transfers (CFTs), before conducting further analysis. Aims: The
   objective of this work is to understand the capabilities of static
   program analysis techniques to identify CFTs, and to investigate how
   static program analysis techniques can be improved if the CFTs are
   complemented. Method: We perform a comprehensive empirical study on six
   widely-used tools for smart contract analysis by using all deployed
   smart contracts to understand their capabilities to recognize CFTs. We
   capture all execution traces of all smart contracts to evaluate the
   number of CFTs covered by traces that are not found by those tools. We
   enhance a state-of-the-art tool. OYENTE for discovering vulnerabilities
   in smart contracts with the CFTs covered by traces to investigate how
   the tool is improved. Results: These studied tools fail to identify all
   CFTs due to several reasons, e.g., incomplete code patterns. Execution
   traces effectively complement these tool in recognizing CFTs. By
   including the CFCs covered by traces, the false negative rate of oYENTE
   can be reduced by up to 30\%. Conclusions: Our study underlines the
   ineffectiveness of static analysis techniques due to the incapabilities
   of CFT identification.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Luo, XP (Corresponding Author), Hong Kong Polytech Univ, Dept Comp, Kowloon, Hong Kong, Peoples R China. Chen, Ting, Univ Elect Sci \& Technol China UESTC, Ctr Cybersecur, Chengdu, Peoples R China. Li, Zihao; Zhang, Yufei; Hu, Teng; Xiao, Xiuzhuo; Zhang, Xiaosong, UESTC, Ctr Cybersecur, Chengdu, Peoples R China. Luo, Xiapu, Hong Kong Polytech Univ, Dept Comp, Kowloon, Hong Kong, Peoples R China. Wang, Ting, Penn State Univ, University Pk, PA 16802 USA. Wang, Dong; Huang, Jin, ADLab Venustech, Chengdu, Peoples R China.}},
	author = {Chen, Ting and Li, Zihao and Zhang, Yufei and Luo, Xiapu and Wang, Ting and Hu, Teng and Xiao, Xiuzhuo and Wang, Dong and Huang, Jin and Zhang, Xiaosong},
	author-email = {{brokendragon@uestc.edu.cn gforiq@qq.com 2235285714@qq.com daniel.xiapu.luo@polyu.edu.hk inbox.ting@gmail.com mailhuteng@gmail.com 1015981305@qq.com wangdong2@venustech.com.cn huangjin2@venustech.com.cn johnsonzxs@uestc.edu.cn}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 13TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR3QI}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61872057]; National Key R\&D Program of China {[}2018YFB0804100]; National Science FoundationNational Science Foundation (NSF) {[}1566526, 1718787]}},
	funding-text = {{Ting Chen is partially supported by National Natural Science Foundation of China (61872057) and National Key R\&D Program of China (2018YFB0804100). Ting Wang is partially supported by the National Science Foundation under Grant No.1566526 and 1718787.}},
	isbn = {{978-1-7281-2968-6}},
	issn = {{1938-6451}},
	language = {{English}},
	note = {{13th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), Pernambuco, BRAZIL, SEP 19-20, 2019}},
	number-of-cited-references = {{37}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; Brazilian Comp Soc; CESAR Sch; State Pernambuco Fdn Sci \& Technol; Natl Council Sci \& Technol Dev, Brazilian Minist Sci, Technol, Innovat, \& Commun}},
	pages = {{106-116}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{International Symposium on Empirical Software Engineering and Measurement}},
	times-cited = {{0}},
	title = {{A Large-Scale Empirical Study on Control Flow Identification of Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000648806200014}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}}}

@inproceedings{WOS:000553784500027,
	abstract = {{Decentralized cryptocurrencies feature the use of blockchain to transfer
   values among peers on networks without central agency. Smart contracts
   are programs running on top of the blockchain consensus protocol to
   enable people make agreements while minimizing trusts. Millions of smart
   contracts have been deployed in various decentralized applications. The
   security vulnerabilities within those smart contracts pose significant
   threats to their applications. Indeed, many critical security
   vulnerabilities within smart contracts on Ethereum platform have caused
   huge financial losses to their users. In this work, we present
   ContractFuzzer, a novel fuzzer to test Ethereum smart contracts for
   security vulnerabilities. ContractFuzzer generates fuzzing inputs based
   on the ABI specifications of smart contracts, defines test oracles to
   detect security vulnerabilities, instruments the EVM to log smart
   contracts runtime behaviors, and analyzes these logs to report security
   vulnerabilities. Our fuzzing of 6991 smart contracts has flagged more
   than 459 vulnerabilities with high precision. In particular, our fuzzing
   tool successfully detects the vulnerability of the DAO contract that
   leads to \$60 million loss and the vulnerabilities of Parity Wallet that
   have led to the loss of \$30 million and the freezing of \$150 million
   worth of Ether.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Jiang, B (Corresponding Author), Beihang Univ, Sch Comp Sci \& Engn, Beijing, Peoples R China. Jiang, Bo; Liu, Ye, Beihang Univ, Sch Comp Sci \& Engn, Beijing, Peoples R China. Chan, W. C., City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.}},
	author = {Jiang, Bo and Liu, Ye and Chan, W. C.},
	author-email = {{jiangbo@buaa.edu.cn franklin@buaa.edu.cn wkchan@city.edu.hk}},
	booktitle = {{PROCEEDINGS OF THE 2018 33RD IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMTED SOFTWARE ENGINEERING (ASE' 18)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP4SF}},
	doi = {{10.1145/3238147.3238177}},
	editor = {{Huchard, M and Kastner, C and Fraser, G}},
	funding-acknowledgement = {{NSFCNational Natural Science Foundation of China (NSFC) {[}61772056]; MITT of China {[}MJ-Y-2012-07]; GRF of Research Grants Council {[}11214116, 11200015, 11201114]; State Key Laboratory of Virtual Reality Technology and Systems}},
	funding-text = {{This research is supported in part by NSFC (project no. 61772056), the Research Fund of the MITT of China (project no. MJ-Y-2012-07), the GRF of Research Grants Council (project no. 11214116, 11200015, and 11201114), and the State Key Laboratory of Virtual Reality Technology and Systems.}},
	isbn = {{978-1-4503-5937-5}},
	issn = {{1527-1366}},
	keywords = {{Fuzzing; Fuzzer; Smart contract; Vulnerability; Test oracle; Ethereum; Blockchain}},
	language = {{English}},
	note = {{33rd IEEE/ACM International Conference on Automated Software Engineering (ASE), Montpellier, FRANCE, SEP 03-07, 2018}},
	number-of-cited-references = {{15}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; ACM SIGSOFT; ACM SIGAI; CNRS; IEEE CS; Huawei; Berger Levrault; Mobioos; Toyota InfoTechnol Ctr; Reg Occitanie; Inria; LIRMM; Univ Montpellier; Inst Mines Telecom Ecole Mines Telecom; Montpellier Univ Excellence; Investissements DAvenir}},
	pages = {{259-269}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	series = {{IEEE ACM International Conference on Automated Software Engineering}},
	times-cited = {{56}},
	title = {{ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000553784500027}},
	usage-count-last-180-days = {{7}},
	usage-count-since-2013 = {{10}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1145/3238147.3238177}}

@inproceedings{WOS:000387820900011,
	abstract = {{Cryptocurrencies record transactions in a decentralized data structure
   called a blockchain. Two of the most popular cryptocurrencies, Bitcoin
   and Ethereum, support the feature to encode rules or scripts for
   processing transactions. This feature has evolved to give practical
   shape to the ideas of smart contracts, or full-fledged programs that are
   run on blockchains. Recently, Ethereum's smart contract system has seen
   steady adoption, supporting tens of thousands of contracts, holding
   millions dollars worth of virtual coins.
   In this paper, we investigate the security of running smart contracts
   based on Ethereum in an open distributed network like those of
   cryptocurrencies. We introduce several new security problems in which an
   adversary can manipulate smart contract execution to gain pro fit. These
   bugs suggest subtle gaps in the understanding of the distributed
   semantics of the underlying platform. As a refinement, we propose ways
   to enhance the operational semantics of Ethereum to make contracts less
   vulnerable. For developers writing contracts for the existing Ethereum
   system, we build a symbolic execution tool called OYENTE to find
   potential security bugs. Among 19; 366 existing Ethereum contracts,
   OYENTE flags 8; 833 of them as vulnerable, including the TheDAO bug
   which led to a 60 million US dollar loss in June 2016. We also discuss
   the severity of other attacks for several case studies which have source
   code available and confirm the attacks (which target only our accounts)
   in the main Ethereum network.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Luu, L (Corresponding Author), Natl Univ Singapore, Singapore 117548, Singapore. Luu, Loi; Chu, Duc-Hiep; Saxena, Prateek; Hobor, Aquinas, Natl Univ Singapore, Singapore 117548, Singapore. Olickel, Hrishi; Hobor, Aquinas, Yale NUS Coll, Singapore, Singapore.}},
	author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
	author-email = {{loiluu@comp.nus.edu.sg hiepcd@comp.nus.edu.sg hrishi.olickel@yale-nus.edu.sg prateeks@comp.nus.edu.sg hobor@comp.nus.edu.sg}},
	book-group-author = {{ACM}},
	booktitle = {{CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BG2ZW}},
	doi = {{10.1145/2976749.2978309}},
	isbn = {{978-1-4503-4139-4}},
	language = {{English}},
	note = {{23rd ACM Conference on Computer and Communications Security (CCS), Vienna, AUSTRIA, OCT 24-28, 2016}},
	number-of-cited-references = {{28}},
	organization = {{Assoc Comp Machinery; ACM Special Interest Grp Secur Audit \& Control}},
	pages = {{254-269}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science; Telecommunications}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	times-cited = {{395}},
	title = {{Making Smart Contracts Smarter}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000387820900011}},
	usage-count-last-180-days = {{11}},
	usage-count-since-2013 = {{132}},
	web-of-science-categories = {{Computer Science, Information Systems; Telecommunications}},
	year = {{2016}},
	bdsk-url-1 = {https://doi.org/10.1145/2976749.2978309}}

@inproceedings{WOS:000528931600050,
	abstract = {{An Ethereum bytecode rewriting and validation architecture is proposed
   and evaluated for securing smart contracts in decentralized
   cryptocurrency systems without access to contract source code. This
   addresses a wave of smart contract vulnerabilities that have been
   exploited by cybercriminals in recent years to steal millions of dollars
   from victims. Such attacks have motivated various best practices
   proposals for helping developers write safer contracts; but as the
   number of programming languages used to develop smart contracts
   increases, implementing these best practices can be cumbersome and hard
   to enforce across the development tool chain. Automated hardening at the
   bytecode level bypasses this source-level heterogeneity to enforce
   safety and code integrity properties of contracts independently of the
   sources whence they were derived. In addition, a binary code
   verification tool implemented atop the Coq interactive theorem prover
   establishes input-output equivalence between the original code and the
   modified code. Evaluation demonstrates that the system can enforce
   policies that protect against integer overflow and underfiow
   vulnerabilities in real Ethereum contract bytecode, and overhead is
   measured in terms of instruction counts.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Ayoade, G (Corresponding Author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA. Ayoade, Gbadebo; Bauman, Erick; Khan, Latifur; Hamlen, Kevin W., Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.}},
	author = {Ayoade, Gbadebo and Bauman, Erick and Khan, Latifur and Hamlen, Kevin W.},
	author-email = {{gbadebo.ayoade@utdallas.edu erick.bauman@utdallas.edu lkhan@utdallas.edu hamlen@utdallas.edu}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO8PX}},
	doi = {{10.1109/Blockchain.2019.00059}},
	funding-acknowledgement = {{NSFNational Science Foundation (NSF) {[}DMS-1737978, DGE 17236021, OAC-1828467, 1513704]; ARO {[}W911-NF-18-1-0249]; IBM faculty awardInternational Business Machines (IBM); NSANational Security Agency; ONROffice of Naval Research {[}N00014-17-1-2995]; DARPAUnited States Department of DefenseDefense Advanced Research Projects Agency (DARPA) {[}FA8750-19-C-0006]}},
	funding-text = {{This research was supported in part by NSF awards DMS-1737978, DGE 17236021, OAC-1828467, and 1513704; ARO award W911-NF-18-1-0249; an IBM faculty award (Research); an award from NSA; ONR award N00014-17-1-2995; DARPA award FA8750-19-C-0006; and a gift from the Eugene McDermott family.}},
	isbn = {{978-1-7281-4693-5}},
	keywords = {{blockchain; Ethereum; in-lined reference mom-tors; formal methods}},
	language = {{English}},
	note = {{2nd IEEE International Conference on Blockchain (Blockchain), Atlanta, GA, JUL 14-17, 2019}},
	number-of-cited-references = {{18}},
	orcid-numbers = {{Khan, Latifur/0000-0002-9300-1576}},
	organization = {{IEEE; IEEE Tech Comm Scalable Comp; IEEE Comp Soc; IEEE Future Direct Comm}},
	pages = {{384-389}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Khan, Latifur/AAE-8134-2021 }},
	times-cited = {{0}},
	title = {{Smart Contract Defense Through Bytecode Rewriting}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000528931600050}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/Blockchain.2019.00059}}

@inproceedings{WOS:000561703600033,
	abstract = {{In this paper, we introduce a machine learning predictive model that
   detects patterns of security vulnerabilities in smart contracts. We
   adapted two static code analyzers to label more than 1000 smart
   contracts that were verified and used on the Ethereum platform. Our
   model predicted a number of major software vulnerabilities with the
   average accuracy of 95 percent. The model currently supports smart
   contracts developed in Solidity, however, the approach described in this
   paper can be applied to other languages and blockchain platforms.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Momeni, P (Corresponding Author), McMaster Univ, Hamilton, ON, Canada. Momeni, Pouyan; Wang, Yu; Samavi, Reza, McMaster Univ, Hamilton, ON, Canada.}},
	author = {Momeni, Pouyan and Wang, Yu and Samavi, Reza},
	author-email = {{momenip@mcmaster.ca wang873@mcmaster.ca samavir@mcmaster.ca}},
	booktitle = {{2019 17TH INTERNATIONAL CONFERENCE ON PRIVACY, SECURITY AND TRUST (PST)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP7DZ}},
	editor = {{Ghorbani, A and Ray, I and Lashkari, AH and Zhang, J and Lu, R}},
	funding-acknowledgement = {{NSERCNatural Sciences and Engineering Research Council of Canada (NSERC); MITACS}},
	funding-text = {{Supports from NSERC, MITACS and Vector Institute for Artificial Intelligence are acknowledged.}},
	isbn = {{978-1-7281-3265-5}},
	issn = {{1712-364X}},
	keywords = {{blockchain; smart contract; security vulnerability; machine learning; code analysis; software testing}},
	language = {{English}},
	note = {{17th International Conference on Privacy, Security and Trust (PST), Fredericton, CANADA, AUG 26-28, 2019}},
	number-of-cited-references = {{25}},
	organization = {{IEEE; Atlantic Canada Opportunities Agcy; TD Bank; IEEE New Brunswick Sect; CyberNB; Ignite Fredericton; ARMIS}},
	pages = {{272-277}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	series = {{Annual Conference on Privacy Security and Trust-PST}},
	times-cited = {{0}},
	title = {{Machine Learning Model for Smart Contracts Security Analysis}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000561703600033}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2019}}}

@inproceedings{WOS:000656861800038,
	abstract = {{In the blockchain 2.0 era, smart contracts based on blockchain
   technology have been widely used in many fields such as sharing economy,
   digital payment, and financial asset disposal because of its dispersion,
   observability, verifiability and automatic execution. With the
   widespread application of smart contracts, the researchers gradually
   found many types of security problems, so the audit of smart contracts
   has become the vital way to ensure its security. This paper introduces
   the implementation mechanism of smart contract model, and summarizes 11
   kinds of high frequency smart contract vulnerabilities, such as
   transaction order dependence, constructor out of control, denial of
   service, etc. Then, this paper selects the newly released BitUnits
   contract for auditing, find out its security hole and give the solution.}},
	address = {{152 BEACH ROAD, \#21-01/04 GATEWAY EAST, SINGAPORE, 189721, SINGAPORE}},
	affiliation = {{Fan, HP (Corresponding Author), PLA Strateg Support Force Informat Engn Univ, Zhengzhou 450000, Peoples R China. Fan, HP (Corresponding Author), Henan Prov Key Lab Network Cryptog, Zhengzhou 450000, Peoples R China. Lu, Siqi; Fan, Haopeng; Wang, Yongjuan; Mi, Huizhe, PLA Strateg Support Force Informat Engn Univ, Zhengzhou 450000, Peoples R China. Lu, Siqi; Fan, Haopeng; Wang, Yongjuan, Henan Prov Key Lab Network Cryptog, Zhengzhou 450000, Peoples R China. Qin, Ling, Hunan Agr Univ, Changsha 410128, Peoples R China.}},
	author = {Lu, Siqi and Fan, Haopeng and Wang, Yongjuan and Mi, Huizhe and Qin, Ling},
	author-email = {{fanhaopeng15gc@sina.com}},
	booktitle = {{BLOCKCHAIN AND TRUSTWORTHY SYSTEMS, BLOCKSYS 2019}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR5RE}},
	doi = {{10.1007/978-981-15-2777-7\_38}},
	editor = {{Zheng, Z and Dai, HN and Tang, M and Chen, X}},
	eissn = {{1865-0937}},
	isbn = {{978-981-15-2777-7; 978-981-15-2776-0}},
	issn = {{1865-0929}},
	keywords = {{Smart contracts; Manual audit; BitUnits contract; Vulnerability analysis; Contract security}},
	language = {{English}},
	note = {{1st International Conference on Blockchain and Trustworthy Systems (BlockSys), Guangzhou, PEOPLES R CHINA, DEC 07-08, 2019}},
	number-of-cited-references = {{10}},
	pages = {{476-482}},
	publisher = {{SPRINGER-VERLAG SINGAPORE PTE LTD}},
	research-areas = {{Computer Science}},
	series = {{Communications in Computer and Information Science}},
	times-cited = {{0}},
	title = {{Manual Audit for BitUnits Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000656861800038}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{1156}},
	web-of-science-categories = {{Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1007/978-981-15-2777-7%5C_38}}

@article{WOS:000697350100010,
	abstract = {{At present, various types of code vulnerabilities lead to a huge
   workload of detection. Although multi-party cooperation detection
   methods can be applied to improve efficiency, common crowdsourcing
   models are difficult to guarantee the privacy of code and identity. We
   design a code and identity privacy vulnerability crowdsourcing detection
   system ConGradetect. The system is built on a blockchain and solves code
   privacy issues, identity privacy issues, and reward preemption issues
   during the crowdsourcing detection process of vulnerabilities. In
   ConGradetect, users have a dynamic fake identity, which ensures that the
   identity of the user is not exposed, thereby avoiding the problem of
   information exposure caused by data accumulation. In the meantime,
   ConGradetect uses a local code granulation tool to perform off-line code
   cutting for task publishers, and uses proxy re-encryption to allocate
   task code blocks to ensure that the complete original code is only known
   to the code owner. When the task is received, a trusted key conversion
   is performed using smart contract. Further, we propose a method for
   anonymous verification of the binding relationship between task and user
   to prevent reward preemption and ensure that task performers can obtain
   corresponding legal benefits. Finally, we run the system on the Ethereum
   blockchain and test its performance. After testing, the feasibility of
   ConGradetect is proved.}},
	address = {{RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS}},
	affiliation = {{Sun, GZ (Corresponding Author), Nanjing Univ Posts \& Telecommun, Sch Comp Sci, Nanjing, Peoples R China. Wang, Jitao; Sun, Guozi; Gu, Yu; Liu, Kun, Nanjing Univ Posts \& Telecommun, Sch Comp Sci, Nanjing, Peoples R China.}},
	article-number = {{101910}},
	author = {Wang, Jitao and Sun, Guozi and Gu, Yu and Liu, Kun},
	author-email = {{1018041020@njupt.edu.cn sun@njupt.edu.cn 1219043736@njupt.edu.cn 1319045427@njupt.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{US3RH}},
	doi = {{10.1016/j.sysarc.2020.101910}},
	eissn = {{1873-6165}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61906099]; Open Fund of Key Laboratory of Urban Land Resources Monitoring and Simulation, Ministry of Natural Resources {[}KF-2019-04-065]}},
	funding-text = {{The authors would like to thank the anonymous reviewers for their elaborate reviews and feedback. This work is supported by the National Natural Science Foundation of China (No. 61906099) , the Open Fund of Key Laboratory of Urban Land Resources Monitoring and Simulation, Ministry of Natural Resources (No. KF-2019-04-065) .}},
	issn = {{1383-7621}},
	journal = {{JOURNAL OF SYSTEMS ARCHITECTURE}},
	journal-iso = {{J. Syst. Architect.}},
	keywords = {{Crowdsourcing; Code privacy; Identity privacy; Blockchain}},
	keywords-plus = {{INCENTIVE MECHANISM; TASK; INTERNET}},
	language = {{English}},
	month = {{MAR}},
	number-of-cited-references = {{52}},
	publisher = {{ELSEVIER}},
	research-areas = {{Computer Science}},
	times-cited = {{1}},
	title = {{ConGradetect: Blockchain-based detection of code and identity privacy vulnerabilities in crowdsourcing}},
	type = {{Article}},
	unique-id = {{WOS:000697350100010}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{114}},
	web-of-science-categories = {{Computer Science, Hardware \& Architecture; Computer Science, Software Engineering}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1016/j.sysarc.2020.101910}}

@article{WOS:000685939000001,
	abstract = {{Smart contract has shown its potential in cutting down the cost of
   administration through reshaping conventional business processes and in
   expanding the application of blockchain to areas that are beyond the
   cryptocurrency. However, with the rapid development and wide application
   of smart contracts, security issues have become a serious concern and
   have thus attracted widespread attention. As the result, a great deal of
   effort has been spent on improving and supporting secure development and
   on the application of smart contracts by introducing new and advanced
   vulnerability detection and privacy protection techniques in recent
   years. There is therefore the need for a comprehensive review of the new
   development on security enhancement technologies of smart contracts for
   the blockchain. This paper provides a review of the current research
   status and advances in smart contract security based on related
   literature published in recent years. Our review is divided into six
   categories along the line of the technology, which includes symbolic
   execution, abstract interpretation, fuzz testing, formal verification,
   deep learning, and privacy enhancement. A comparison of the various
   tools and methods developed to tackle security issues is provided.
   Challenges in the research of smart contract security as well as future
   directions are discussed. This paper intends to provide the inspiration
   and reference for follow-up research on the security issues of smart
   contracts in the blockchain.}},
	address = {{111 RIVER ST, HOBOKEN 07030-5774, NJ USA}},
	affiliation = {{Zhu, NF (Corresponding Author), Beijing Univ Technol, Fac Informat Technol, Beijing 100124, Peoples R China. Wang, Yajing; He, Jingsha; Zhu, Nafei; Yi, Yuzi; Zhang, Qingqing; Song, Hongyu; Xue, Ruixin, Beijing Univ Technol, Fac Informat Technol, Beijing 100124, Peoples R China.}},
	article-number = {{e4341}},
	author = {Wang, Yajing and He, Jingsha and Zhu, Nafei and Yi, Yuzi and Zhang, Qingqing and Song, Hongyu and Xue, Ruixin},
	author-email = {{znf@bjut.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{UB6FF}},
	doi = {{10.1002/ett.4341}},
	early-access-date = {{AUG 2021}},
	funding-acknowledgement = {{National Key Research and Development Program of China {[}2019QY(Y)0601]}},
	funding-text = {{The work in this article has been partially supported by National Key Research and Development Program of China (2019QY(Y)0601).}},
	issn = {{2161-3915}},
	journal = {{TRANSACTIONS ON EMERGING TELECOMMUNICATIONS TECHNOLOGIES}},
	journal-iso = {{Trans. Emerg. Telecommun. Technol.}},
	keywords-plus = {{CHALLENGES; INTERNET; PRIVACY}},
	language = {{English}},
	number-of-cited-references = {{132}},
	publisher = {{WILEY}},
	research-areas = {{Telecommunications}},
	times-cited = {{0}},
	title = {{Security enhancement technologies for smart contracts in the blockchain: A survey}},
	type = {{Article; Early Access}},
	unique-id = {{WOS:000685939000001}},
	usage-count-last-180-days = {{5}},
	usage-count-since-2013 = {{5}},
	web-of-science-categories = {{Telecommunications}},
	bdsk-url-1 = {https://doi.org/10.1002/ett.4341}}

@article{WOS:000575515300019,
	abstract = {{Ethereum is a distributed blockchain platform, serving as an ecosystem
   for smart contracts: full-fledged intercommunicating programs that
   capture the transaction logic of an account. A gas limit caps the
   execution of an Ethereum smart contract: instructions, when executed,
   consume gas, and the execution proceeds as long as gas is available.
   Gas-focused vulnerabilities permit an attacker to force key contract
   functionality to run out of gas-effectively performing a permanent
   denial-of-service attack on the contract. Such vulnerabilities are among
   the hardest for programmers to protect against, as out-of-gas behavior
   may be uncommon in nonattack scenarios and reasoning about these
   vulnerabilities is nontrivial.
   In this paper, we identify gas-focused vulnerabilities and present
   MadMax: a static program analysis technique that automatically detects
   gas-focused vulnerabilities with very high confidence. MadMax combines a
   smart contract decompiler and semantic queries in Datalog. Our approach
   captures high-level program modeling concepts (such as ``dynamic data
   structure storage{''} and ``safely resumable loops{''}) and delivers
   high precision and scalability. MadMax analyzes the entirety of smart
   contracts in the Ethereum blockchain in just 10 hours and flags
   vulnerabilities in contracts with a monetary value in billions of
   dollars. Manual inspection of a sample of flagged contracts shows that
   81\% of the sampled warnings do indeed lead to vulnerabilities.}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Grech, N (Corresponding Author), Univ Athens, Athens, Greece. Grech, Neville; Smaragdakis, Yannis, Univ Athens, Athens, Greece. Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard, Univ Sydney, Sydney, NSW, Australia.}},
	author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
	author-email = {{me@nevillegrech.com mkon1090@uni.sydney.edu ajur4521@uni.sydney.edu lexi.brent@sydney.edu.au bernhard.scholz@sydney.edu.au smaragd@di.uoa.gr}},
	da = {{2021-11-07}},
	doc-delivery-number = {{NX1ZP}},
	doi = {{10.1145/3416262}},
	eissn = {{1557-7317}},
	funding-acknowledgement = {{Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC) {[}DP180104030]; European Research CouncilEuropean Research Council (ERC)European Commission {[}307334, 790340]; REACH HIGH Scholars Programme; European Union, Operational Program II, Cohesion Policy}},
	funding-text = {{This research was supported partially by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). We gratefully acknowledge funding by the European Research Council, grants 307334 and 790340. In addition, the research work disclosed is partially funded by the REACH HIGH Scholars Programme -Post-Doctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the well-being of society - European Social Fund).}},
	issn = {{0001-0782}},
	journal = {{COMMUNICATIONS OF THE ACM}},
	journal-iso = {{Commun. ACM}},
	language = {{English}},
	month = {{OCT}},
	number = {{10}},
	number-of-cited-references = {{17}},
	pages = {{87-95}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Smaragdakis, Yannis/AAM-2851-2021}},
	times-cited = {{2}},
	title = {{MadMax: Analyzing the Out-of-Gas World of Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000575515300019}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{4}},
	volume = {{63}},
	web-of-science-categories = {{Computer Science, Hardware \& Architecture; Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3416262}}

@inproceedings{WOS:000695315600002,
	abstract = {{Smart contracts are self-enforcing agreements that are employed to
   exchange assets without the approval of trusted third parties. This
   feature has encouraged various sectors to make use of smart contracts
   when transacting. Experience shows that many deployed contracts are
   vulnerable to exploitation due to their poor design, which allows
   attackers to steal valuable assets from the involved parties. Therefore,
   an assessment approach that allows developers to recognise the
   consequences of deploying vulnerable contracts is needed. In this paper,
   we propose a debtaware approach for assessing security design
   vulnerabilities in smart contracts. Our assessment approach involves two
   main steps: (i) identification of design vulnerabilities using security
   analysis techniques and (ii) an estimation of the ramifications of the
   identified vulnerabilities leveraging the technical debt metaphor, its
   principal and interest. We use examples of vulnerable contracts to
   demonstrate the applicability of our approach. The results show that our
   assessment approach increases the visibility of security design issues.
   It also allows developers to concentrate on resolving smart contract
   vulnerabilities through technical debt impact analysis and
   prioritisation. Developers can use our approach to inform the design of
   more secure contracts and for reducing unintentional debts caused by a
   lack of awareness of security issues.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Ahmadjee, S (Corresponding Author), Univ Birmingham, Sch Comp Sci, Birmingham, W Midlands, England. Ahmadjee, S (Corresponding Author), Umm Al Qura Univ, Coll Comp \& Informat Syst, Mecca, Saudi Arabia. Ahmadjee, Sabreen; Bahsoon, Rami, Univ Birmingham, Sch Comp Sci, Birmingham, W Midlands, England. Ahmadjee, Sabreen, Umm Al Qura Univ, Coll Comp \& Informat Syst, Mecca, Saudi Arabia. Mera-Gomez, Carlos, ESPOL Polythecn Univ, Escuela Super Politecn Litoral, ESPOL, Fac Ingn Elect \& Comp, Campus Gustavo Galindo Km 30-5 Via Perimetral, Guayaquil, Ecuador.}},
	author = {Ahmadjee, Sabreen and Mera-Gomez, Carlos and Bahsoon, Rami},
	author-email = {{smahmadjee@uqu.edu.sa cjmera@espol.edu.ec r.bahsoon@cs.bham.ac.uk}},
	book-group-author = {{IEEE COMP SOC}},
	booktitle = {{2021 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT 2021)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS1RX}},
	doi = {{10.1109/TechDebt52882.2021.00010}},
	isbn = {{978-1-6654-1405-0}},
	keywords = {{smart contract; technical debt; security}},
	language = {{English}},
	note = {{4th IEEE/ACM International Conference on Technical Debt (TechDebt), ELECTR NETWORK, MAY 22-30, 2021}},
	number-of-cited-references = {{35}},
	oa = {{Green Published, Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc}},
	pages = {{6-15}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Assessing Smart Contracts Security Technical Debts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000695315600002}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/TechDebt52882.2021.00010}}

@article{WOS:000680892400029,
	abstract = {{Smart contracts are decentralized applications running on Blockchain. A
   very large number of smart contracts has been deployed on Ethereum.
   Meanwhile, security flaws of contracts have led to huge pecuniary losses
   and destroyed the ecological stability of contract layer on Blockchain.
   It is thus an emerging yet crucial issue to effectively and efficiently
   detect vulnerabilities in contracts. Existing detection methods like
   Oyente and Securify are mainly based on symbolic execution or analysis.
   These methods are very time-consuming, as the symbolic execution
   requires the exploration of all executable paths or the analysis of
   dependency graphs in a contract. In this work, we propose ContractWard
   to detect vulnerabilities in smart contracts with machine learning
   techniques. First, we extract bigram features from simplified operation
   codes of smart contracts. Second, we employ five machine learning
   algorithms and two sampling algorithms to build the models. ContractWard
   is evaluated with 49502 real-world smart contracts running on Ethereum.
   The experimental results demonstrate the effectiveness and efficiency of
   ContractWard. The predictive Micro-F1 and Macro-F1 of ContractWard are
   over 96\% and the average detection time is 4 seconds on each smart
   contract when we use XGBoost for training the models andSMOTETomek for
   balancing the training sets.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
	affiliation = {{Li, YD (Corresponding Author), Beijing Jiaotong Univ, Beijing Key Lab Secur \& Privacy Intelligent Trans, Beijing 100044, Peoples R China. Xu, GQ (Corresponding Author), Tianjin Univ, Coll Intelligence \& Comp, Tianjin Key Lab Adv Networking, Tianjin 300350, Peoples R China. Wang, Wei; Song, Jingjing; Li, Yidong, Beijing Jiaotong Univ, Beijing Key Lab Secur \& Privacy Intelligent Trans, Beijing 100044, Peoples R China. Wang, Wei, King Abdullah Univ Sci \& Technol KAUST, Div Comp Elect \& Math Sci \& Engn CEMSE, Thuwal 239556900, Saudi Arabia. Xu, Guangquan, Tianjin Univ, Coll Intelligence \& Comp, Tianjin Key Lab Adv Networking, Tianjin 300350, Peoples R China. Wang, Hao, Norwegian Univ Sci \& Technol, Dept Comp Sci, N-2815 Gjovik, Norway. Su, Chunhua, Univ Aizu, Div Comp Sci, Aizu Wakamatsu, Fukushima 9658580, Japan.}},
	author = {Wang, Wei and Song, Jingjing and Xu, Guangquan and Li, Yidong and Wang, Hao and Su, Chunhua},
	author-email = {{wangwei1@bjtu.edu.cn 17120479@bjtu.edu.cn losin@tju.edu.cn ydli@bjtu.edu.cn hawa@ntnu.no suchunhua@gmail.com}},
	da = {{2021-11-07}},
	doc-delivery-number = {{TU2SY}},
	doi = {{10.1109/TNSE.2020.2968505}},
	funding-acknowledgement = {{Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}U1736114]; National Key R\&D Program of China {[}2017YFB0802805]; JSPS Kiban(B) {[}18H03240]; JSPS Kiban(C) {[}18K11298]}},
	funding-text = {{The work reported in this paper was supported in part by the Natural Science Foundation of China under Grant U1736114 and in part by the National Key R\&D Program of China under Grant 2017YFB0802805. Chunhua Su was supported in part by JSPS Kiban(B) 18H03240 and in part by JSPS Kiban(C) 18K11298.}},
	issn = {{2327-4697}},
	journal = {{IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING}},
	journal-iso = {{IEEE Trans. Netw. Sci. Eng.}},
	keywords = {{Blockchain; machine learning; smart contracts; vulnerability detection}},
	keywords-plus = {{BEHAVIOR; APPS}},
	language = {{English}},
	month = {{APR-JUN}},
	number = {{2}},
	number-of-cited-references = {{51}},
	oa = {{Green Submitted}},
	orcid-numbers = {{WANG, WEI/0000-0002-5974-1589 Wang, Hao/0000-0001-9301-5989}},
	pages = {{1133-1144}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Engineering; Mathematics}},
	researcherid-numbers = {{Wang, Hao/B-3650-2019}},
	times-cited = {{12}},
	title = {{ContractWard: Automated Vulnerability Detection Models for Ethereum Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000680892400029}},
	usage-count-last-180-days = {{11}},
	usage-count-since-2013 = {{14}},
	volume = {{8}},
	web-of-science-categories = {{Engineering, Multidisciplinary; Mathematics, Interdisciplinary Applications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/TNSE.2020.2968505}}

@inproceedings{WOS:000469455400001,
	abstract = {{Blockchain is a decentralized ledger technology, and it is the
   technology underlying Bitcoin and Ethereum. The interest in blockchain
   has been increasing since its emergence. Hyperledger Fabric is one of
   the permissioned blockchain frameworks. One of the characteristics of
   Hyperledger Fabric is it utilizes general-purpose programming languages,
   e.g., Go, Node.js, and Java, to implement smart contracts (called
   chaincode in Hyperledger Fabric). The advantages of utilizing these
   languages are already known to potential developers, and development
   tools might already exist. However, one of the disadvantages is that
   these languages were not originally designed for writing smart
   contracts. Hence, there may be risks that developers do not need to
   consider when using specific languages such as Solidity of Ethereum.
   Furthermore, even though development tools exist, how many risks are
   covered by the tools is an open question. In this paper, we focus on Go
   language and the tools. First, we surveyed what kind of risks are
   associated with chaincodes are developed using Go language and observed
   there are 14 potential risks. Then, we investigated how many risks can
   be covered by Go tools, e.g., golint and gosec, and a vulnerability
   detection tool for chaincodes called Chaincode Scanner. From our
   results, we observed that some risks are not covered by the existing
   tools. Hence, we develop a detection tool to cover risks by static
   analysis. Finally, in this paper, we describe how to find the risks with
   our tool and evaluate the usefulness.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Yamashita, K (Corresponding Author), Fujitsu Labs Ltd, Kawasaki, Kanagawa, Japan. Yamashita, Kazuhiro; Nomura, Yoshihide, Fujitsu Labs Ltd, Kawasaki, Kanagawa, Japan. Zhou, Ence; Pi, Bingfeng; Jun, Sun, FUJITSU Res \& Dev Ctr, Beijing, Peoples R China.}},
	author = {Yamashita, Kazuhiro and Nomura, Yoshihide and Zhou, Ence and Pi, Bingfeng and Jun, Sun},
	author-email = {{y-kazuhiro@fujitsu.com y.nomura@fujitsu.com zhouence@cn.fujitsu.com winter.pi@cn.fujitsu.com sunjung@cn.fujitsu.com}},
	booktitle = {{2019 IEEE 2ND INTERNATIONAL WORKSHOP ON BLOCKCHAIN ORIENTED SOFTWARE ENGINEERING (IWBOSE)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BM8NJ}},
	editor = {{Tonelli, R and Ducasse, S and Marchesi, M and Bracciali, A}},
	isbn = {{978-1-7281-1807-9}},
	keywords = {{Smart Contract; Validation Tool; Blockchain; Hyperledger Fabric}},
	language = {{English}},
	note = {{2nd IEEE International Workshop on Blockchain Oriented Software Engineering (IWBOSE), Hangzhou, PEOPLES R CHINA, FEB 24, 2019}},
	number-of-cited-references = {{28}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{1-10}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{24}},
	title = {{Potential Risks of Hyperledger Fabric Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000469455400001}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{8}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}}}

@article{WOS:000464107100001,
	abstract = {{Blockchain-based decentralized cryptocurrency platforms are currently
   one of the hottest topics in technology. Although most of the interest
   is generated by cryptocurrency related activities, it is becoming
   apparent that a much wider spectrum of applications can leverage the
   blockchain technology. The primary concepts enabling such general use of
   the blockchain are the so-called smart contracts, which are special
   programs that run on the blockchain. One of the most popular blockchain
   platforms that supports smart contracts is Ethereum. As smart contracts
   typically handle money, ensuring their low number of faults and
   vulnerabilities are essential. To aid smart contract developers and help
   to mature the technology, we need analysis tools and studies for smart
   contracts. As an initiative for this, we propose the adoption of some
   well-known OO metrics for Solidity smart contracts. Furthermore, we
   analyze more than 40 thousand Solidity source files with our prototype
   tool. The results suggest that smart contract programs are short,
   neither overly complex nor coupled too much, do not rely heavily on
   inheritance, and either quite well-commented or not commented at all.
   Moreover, smart contracts could benefit from an external library and
   dependency management mechanism, as more than 85\% of the defined
   libraries in Solidity files code the same functionalities.}},
	address = {{ST ALBAN-ANLAGE 66, CH-4052 BASEL, SWITZERLAND}},
	affiliation = {{Hegedus, P (Corresponding Author), MTA SZTE Res Grp Artificial Intelligence, H-6720 Szeged, Hungary. Hegedus, Peter, MTA SZTE Res Grp Artificial Intelligence, H-6720 Szeged, Hungary.}},
	article-number = {{6}},
	author = {Hegedus, Peter},
	author-email = {{hpeter@inf.u-szeged.hu}},
	da = {{2021-11-07}},
	doc-delivery-number = {{HS8GB}},
	doi = {{10.3390/technologies7010006}},
	funding-acknowledgement = {{New National Excellence Program of the Ministry of Human Capacities, Hungary {[}UNKP-17-4]}},
	funding-text = {{This research was supported by the UNKP-17-4 New National Excellence Program of the Ministry of Human Capacities, Hungary.}},
	issn = {{2227-7080}},
	journal = {{TECHNOLOGIES}},
	journal-iso = {{Technologies}},
	keywords = {{static analysis; ethereum; smart contracts; metrics; complexity; blockchain}},
	keywords-plus = {{METRICS; SOFTWARE; VALIDATION}},
	language = {{English}},
	month = {{JAN 3}},
	number = {{1}},
	number-of-cited-references = {{34}},
	oa = {{gold}},
	orcid-numbers = {{Hegedus, Peter/0000-0003-4592-6504}},
	publisher = {{MDPI}},
	research-areas = {{Engineering}},
	researcherid-numbers = {{Hegedus, Peter/ABA-8580-2021}},
	times-cited = {{13}},
	title = {{Towards Analyzing the Complexity Landscape of Solidity Based Ethereum Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000464107100001}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{3}},
	volume = {{7}},
	web-of-science-categories = {{Engineering, Multidisciplinary}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.3390/technologies7010006}}

@inproceedings{WOS:000614622300031,
	abstract = {{Smart contracts on permissionless blockchains are exposed to inherent
   security risks due to interactions with untrusted entities. Static
   analyzers are essential for identifying security risks and avoiding
   millions of dollars worth of damage.
   We introduce Ethainter, a security analyzer checking information flow
   with data sanitization in smart contracts. Ethainter identifies
   composite attacks that involve an escalation of tainted information,
   through multiple transactions, leading to severe violations. The
   analysis scales to the entire blockchain, consisting of hundreds of
   thousands of unique smart contracts, deployed over millions of accounts.
   Ethainter is more precise than previous approaches, as we confirm by
   automatic exploit generation (e.g., destroying over 800 contracts on the
   Ropsten network) and by manual inspection, showing a very high precision
   of 82.5\% valid warnings for end-to-end vulnerabilities. Ethainter's
   balance of precision and completeness offers significant advantages over
   other tools such as Securify, Securify2, and teEther.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Brent, L (Corresponding Author), Intl Comp Sci Inst, Berkeley, CA 94704 USA. Brent, Lexi, Intl Comp Sci Inst, Berkeley, CA 94704 USA. Grech, Neville; Lagouvardos, Sifis; Smaragdakis, Yannis, Univ Athens, Athens, Greece. Brent, Lexi; Scholz, Bernhard, Univ Sydney, Sydney, NSW, Australia.}},
	author = {Brent, Lexi and Grech, Neville and Lagouvardos, Sifis and Scholz, Bernhard and Smaragdakis, Yannis},
	author-email = {{lexi@icsi.berkeley.edu me@nevillegrech.com sifis.lag@di.uoa.gr bernhard.scholz@sydney.edu.au yannis@smaragd.org}},
	booktitle = {{PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI `20)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ7DO}},
	doi = {{10.1145/3385412.3385990}},
	editor = {{Donaldson, AF and Torlak, E}},
	funding-acknowledgement = {{European Research CouncilEuropean Research Council (ERC)European Commission {[}790340]; Hellenic Foundation for Research and Innovation (project DEAN-BLOCK); Australian Government through the Australian Research CouncilAustralian Research Council {[}ARC DP180104030]; REACH HIGH Scholars Programs-Post-Doctoral Grants; European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of societysEuropean Social Fund)}},
	funding-text = {{We thank the anonymous reviewers for their valuable suggestions. We gratefully acknowledge funding by the European Research Council, grant 790340 (PARSE), and by the Hellenic Foundation for Research and Innovation (project DEAN-BLOCK). This research was partially supported by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). In addition, the researchwork disclosed is partially funded by the REACH HIGH Scholars ProgramsPostDoctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of societysEuropean Social Fund).}},
	isbn = {{978-1-4503-7613-6}},
	keywords = {{static analysis; information flow; smart contracts}},
	language = {{English}},
	note = {{41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), ELECTR NETWORK, JUN 15-20, 2020}},
	number-of-cited-references = {{43}},
	organization = {{Assoc Comp Machinery; ACM SIGPLAN}},
	pages = {{454-469}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Smaragdakis, Yannis/AAM-2851-2021}},
	times-cited = {{0}},
	title = {{Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000614622300031}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3385412.3385990}}

@inproceedings{WOS:000693400500033,
	abstract = {{Blockchain-based decentralized applications (DApp) have been widely
   adopted in different areas and trusted by more and more users due to the
   fact that the back end code of a DApp is publicly run on the blockchain
   and cannot be modified implicitly. However, there are few effective
   methods and tools for testing DApps and bugs can be easily introduced by
   inexperienced developers. The existing testing techniques either focus
   on testing front-end programs or back-end code but ignore the
   interaction between them, which makes it difficult to apply the
   techniques directly on DApp. In this paper, we present an automated
   testing technique for DApps which works in a two-phase manner. First, we
   employ random events to infer an abstract relation between browser-side
   events and blockchain-side contracts. Second, our technique generates a
   set of test cases under the guidance of inferred relations and orders
   the test cases based on a read-write graph. We also use taint analysis
   to track data flow of the smart contract and feed it to the generation
   procedure for following test cases. We have developed a tool called
   Sungari to implement our approach, and evaluated it on representative
   real-world DApps. The preliminary evaluation results demonstrated the
   potential of Sungari in achieving a significant optimization compared to
   random testing approaches.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Guan, Z (Corresponding Author), Peking Univ, Natl Engn Res Ctr Software Engn, Beijing, Peoples R China. Gao, Jianbo; Li, Yue; Liu, Chao; Li, Qingshan; Chen, Zhong, Peking Univ, Sch EECS, Beijing, Peoples R China. Liu, Han; Yang, Zhiqiang, Tsinghua Univ, Sch Software, Beijing, Peoples R China. Guan, Zhi, Peking Univ, Natl Engn Res Ctr Software Engn, Beijing, Peoples R China.}},
	author = {Gao, Jianbo and Liu, Han and Li, Yue and Liu, Chao and Yang, Zhiqiang and Li, Qingshan and Guan, Zhi and Chen, Zhong},
	author-email = {{gaojianbo@pku.edu.cn liuhan0518@163.com liyue\_cs@pku.edu.cn liuchao\_cs@pku.edu.cn softwareyangzq12@163.com liqs@pku.edu.cn guan@pku.edu.cn zhongchen@pku.edu.cn}},
	book-group-author = {{IEEE COMP SOC}},
	booktitle = {{2019 IEEE/ACM 27TH INTERNATIONAL CONFERENCE ON PROGRAM COMPREHENSION (ICPC 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS1MW}},
	doi = {{10.1109/ICPC.2019.00048}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61672060, 61802223]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2017M620785]}},
	funding-text = {{This work is supported by National Natural Science Foundation of China under the grant No.: 61672060, 61802223 and China Postdoctoral Science Foundation under Grant No.: 2017M620785.}},
	isbn = {{978-1-7281-1519-1}},
	issn = {{1092-8138}},
	keywords = {{Decentralized Application; Blockchain; Smart Contract; Dynamic Testing}},
	language = {{English}},
	note = {{27th IEEE/ACM International Conference on Program Comprehension (ICPC), Montreal, CANADA, MAY 25, 2019}},
	number-of-cited-references = {{27}},
	organization = {{IEEE; Assoc Comp Machinery; Concordia Univ; Tourisme Montreal}},
	pages = {{294-299}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{International Conference on Program Comprehension}},
	times-cited = {{2}},
	title = {{Towards Automated Testing of Blockchain-based Decentralized Applications}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000693400500033}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ICPC.2019.00048}}

@inproceedings{WOS:000621654000009,
	abstract = {{Ethereum is a cryptographic currency system built on top of blockchain.
   It allows anyone to write smart contracts in high-level programming
   languages, solidity is the most popular and mature one. In the last few
   years, the use of smart contracts across domains has increased a lot,
   security analysis to detect the potential issues in contracts thus
   becomes crucial. Theorem proving is a formal method technique which
   mathematically prove the correctness of a design with respect to a
   mathematical formal specification, that can be applied to smart
   contracts' secure analysis. The successful implementation of a deduction
   calculs of theorem proving in an automated reasoning program requires
   the integration of search strategies that reduce the search space by
   pruning unnecessary deduction paths.
   This paper desribes SPrune, a code pruning tool designed to simplify
   static analysis for solidity contracts. It works by unfolding derived
   contracts based on the inheritance between contracts in one smart
   contract, and execute code pruning on the unfolded contract. Our tool
   allows for the application of static code pruning and provides facility
   for solidity contract developers and testers to trace and localize bugs
   in contracts.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Zhou, ZH (Corresponding Author), Univ Sci \& Technol China, Sch Comp Sci \& Technol, Hefei, Anhui, Peoples R China. Zhou, Zihan; Xiong, Yan; Huang, Wenchao, Univ Sci \& Technol China, Sch Comp Sci \& Technol, Hefei, Anhui, Peoples R China. Ma, Lu, Beijing Inst Remote Sensing, Beijing 122000, Peoples R China.}},
	author = {Zhou, Zihan and Xiong, Yan and Huang, Wenchao and Ma, Lu},
	author-email = {{zihzh@mail.ustc.edu.cn yxiong@ustc.edu.cn huangwc@ustc.edu.cn syml1234@163.com}},
	book-group-author = {{IEEE}},
	booktitle = {{2020 6TH INTERNATIONAL CONFERENCE ON BIG DATA COMPUTING AND COMMUNICATIONS (BIGCOM 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ8TW}},
	doi = {{10.1109/BigCom51056.2020.00015}},
	funding-acknowledgement = {{National Key R\&D Program of China {[}2018YFB0803400, 2018YFB2100300]; National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61972369, 61572453, 61520106007, 61572454]; Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities {[}WK2150110009]}},
	funding-text = {{The research is supported by the National Key R\&D Program of China 2018YFB0803400, 2018YFB2100300, National Natural Science Foundation of China under Grant No.61972369, No.61572453, No.61520106007, No.61572454, and the Fundamental Research Funds for the Central Universities, No. WK2150110009.}},
	isbn = {{978-1-7281-8275-9}},
	keywords = {{Ethereum; Solidity; smart contracts; static analysis}},
	language = {{English}},
	note = {{6th International Conference on Big Data Computing and Communications (BIGCOM), Deqing, PEOPLES R CHINA, JUL 24-25, 2020}},
	number-of-cited-references = {{14}},
	pages = {{66-70}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science; Telecommunications}},
	times-cited = {{0}},
	title = {{SPrune: A Code Pruning Tool for Ethereum Solidity Contract Static Analysis}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000621654000009}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/BigCom51056.2020.00015}}

@inproceedings{WOS:000568594800023,
	abstract = {{Blockchain gaming is an emerging entertainment paradigm. However,
   blockchain games are still suffering from security issues, due to the
   immature blockchain technologies and its unsophisticated developers. In
   this work, we analyzed the blockchain game architecture and reveal the
   possible penetration methods of cracking. We scanned more than 600
   commercial blockchain games to summarize a security overview from the
   perspective of the web server and smart contract, respectively. We also
   conducted three case studies for blockchain games to show detailed
   vulnerability detection.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Min, T (Corresponding Author), Chinese Univ Hong Kong, Sch Sci \& Engn, Shenzhen, Peoples R China. Min, Tian; Cai, Wei, Chinese Univ Hong Kong, Sch Sci \& Engn, Shenzhen, Peoples R China.}},
	author = {Min, Tian and Cai, Wei},
	author-email = {{tianmin@link.cuhk.edu.cn caiwei@cuhk.edu.cn}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 IEEE GAMES, ENTERTAINMENT, MEDIA CONFERENCE (GEM)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP8ZN}},
	isbn = {{978-1-7281-2404-9}},
	keywords = {{Blockchain; Game; Architecture; Security}},
	language = {{English}},
	note = {{IEEE Games, Entertainment, Media Conference (GEM), Yale Univ, New Haven, CT, JUN 18-21, 2019}},
	number-of-cited-references = {{10}},
	organization = {{IEEE}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{1}},
	title = {{A Security Case Study for Blockchain Games}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000568594800023}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Interdisciplinary Applications; Computer Science, Theory \& Methods}},
	year = {{2019}}}

@article{WOS:000688034000010,
	abstract = {{Ethereum is a distributed blockchain platform, serving as an ecosystem
   for smart contracts: full-fledged intercommunicating programs that
   capture the transaction logic of an account. Unlike programs in
   mainstream languages, a gas limit restricts the execution of an Ethereum
   smart contract: execution proceeds as long as gas is available. Thus,
   gas is a valuable resource that can be manipulated by an attacker to
   provoke unwanted behavior in a victim's smart contract (e.g., wasting or
   blocking funds of said victim). Gas-focused vulnerabilities exploit
   undesired behavior when a contract (directly or through other
   interacting contracts) runs out of gas. Such vulnerabilities are among
   the hardest for programmers to protect against, as out-of-gas behavior
   may be uncommon in non-attack scenarios and reasoning about it is far
   from trivial.
   In this paper, we classify and identify gas-focused vulnerabilities, and
   present MadMax: a static program analysis technique to automatically
   detect gas-focused vulnerabilities with very high confidence. Our
   approach combines a control-flow-analysis-based decompiler and
   declarative program-structure queries. The combined analysis captures
   high-level domain-specific concepts (such as ``dynamic data structure
   storage{''} and ``safely resumable loops{''}) and achieves high
   precision and scalability. MadMax analyzes the entirety of smart
   contracts in the Ethereum blockchain in just 10 hours (with
   decompilation timeouts in 8\% of the cases) and flags contracts with a
   (highly volatile) monetary value of over \$2.8B as vulnerable. Manual
   inspection of a sample of flagged contracts shows that 81\% of the
   sampled warnings do indeed lead to vulnerabilities, which we report on
   in our experiment.}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Grech, N (Corresponding Author), Univ Athens, Athens, Greece. Grech, N (Corresponding Author), Univ Malta, Msida, Malta. Grech, Neville; Smaragdakis, Yannis, Univ Athens, Athens, Greece. Grech, Neville, Univ Malta, Msida, Malta. Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard, Univ Sydney, Sydney, NSW, Australia.}},
	article-number = {{116}},
	author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
	author-email = {{me@nevillegrech.com mkon1090@uni.sydney.edu.au ajur4521@uni.sydney.edu.au lexi.brent@sydney.edu.au bernhard.scholz@sydney.edu.au smaragd@di.uoa.gr}},
	da = {{2021-11-07}},
	doc-delivery-number = {{VK3YJ}},
	doi = {{10.1145/3276486}},
	eissn = {{2475-1421}},
	funding-acknowledgement = {{Australian Government through the Australian Research CouncilAustralian Research Council {[}ARC DP180104030]; European Research CouncilEuropean Research Council (ERC)European Commission {[}307334, 790340]; REACH HIGH Scholars Program s Post-Doctoral Grants; European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of society -European Social Fund)}},
	funding-text = {{This research was supported partially by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). We gratefully acknowledge funding by the European Research Council, grants 307334 and 790340. In addition, the research work disclosed is partially funded by the REACH HIGH Scholars Program s Post-Doctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of society -European Social Fund).}},
	journal = {{PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL}},
	journal-iso = {{P. ACM Program. Lang.}},
	keywords = {{Program Analysis; Smart Contracts; Security; Blockchain}},
	language = {{English}},
	month = {{NOV}},
	number-of-cited-references = {{49}},
	oa = {{gold}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{62}},
	title = {{MadMax: Surviving Out-of-Gas Conditions in Ethereum Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000688034000010}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{2}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1145/3276486}}

@inproceedings{WOS:000647642100039,
	abstract = {{Ethereum smart contracts are programs that are deployed and executed in
   a consensus-based blockchain managed by a peer-to-peer network. Several
   re-entrancy attacks that aim to steal Ether, the cryptocurrency used in
   Ethereum, stored in deployed smart contracts were found in the recent
   years. A countermeasure to such attacks is based on dynamic analysis
   that executes the smart contracts themselves, but it requires the
   spending of Ether and knowledge of attack patterns for analysis in
   advance. In this paper, we present a static analysis tool named RA
   (Re-entrancy Analyzer), a combination of symbolic execution and
   equivalence checking by a satisfiability modulo theories solver to
   analyze smart contract vulnerabilities against re-entrancy attacks. In
   contrast to existing tools, RA supports analysis of inter-contract
   behaviors by using only the Ethereum Virtual Machine bytecodes of target
   smart contracts, i.e., even without prior knowledge of attack patterns
   and without spending Ether. Furthermore, RA can verify existence of
   vulnerabilities against re-entrancy attacks without execution of smart
   contracts and it does not provide false positives and false negatives.
   We also present an implementation of RA to evaluate its performance in
   analyzing the vulnerability of deployed smart contracts against
   re-entrancy attacks and show that RA can precisely determine which smart
   contracts are vulnerable.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Chinen, Y (Corresponding Author), Osaka Univ, Grad Sch Informat Sci \& Technol, Osaka, Japan. Chinen, Yuchiro; Yanai, Naoto; Cruz, Jason Paul, Osaka Univ, Grad Sch Informat Sci \& Technol, Osaka, Japan. Okamura, Shingo, Natl Inst Technol, Nara Coll, Dept Informat Engn, Nara, Japan.}},
	author = {Chinen, Yuchiro and Yanai, Naoto and Cruz, Jason Paul and Okamura, Shingo},
	author-email = {{t-yuichiro@ist.osaka-u.ac.jp yanai@ist.osaka-u.ac.jp cruz@ist.osaka-u.ac.jp okamura@info.nara-k.ac.jp}},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2020 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR3LS}},
	doi = {{10.1109/Blockchain50366.2020.00048}},
	isbn = {{978-0-7381-0495-9}},
	keywords = {{Ethereum; smart contracts; static analysis; EVM; symbolic execution; SMT solver}},
	language = {{English}},
	note = {{3rd IEEE International Conference on Blockchain (Blockchain), ELECTR NETWORK, NOV 02-06, 2020}},
	number-of-cited-references = {{26}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Tech Comm Scalable Comp}},
	pages = {{327-336}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	times-cited = {{1}},
	title = {{RA: Hunting for Re-Entrancy Attacks in Ethereum Smart Contracts via Static Analysis}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000647642100039}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Interdisciplinary Applications; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/Blockchain50366.2020.00048}}

@inproceedings{WOS:000668146200157,
	abstract = {{Smart contract security has drawn much attention due to many severe
   incidents with huge ether and token losses. As a consequence,
   researchers have proposed to detect smart contract vulnerabilities via
   code analysis. However, code analysis only shows what contracts can be
   attacked, but not what have been attacked, and more importantly, what
   attacks have been prevented in the real world.
   In this paper, we present the first comprehensive measurement study to
   analyze real-world attacks and defenses adopted in the wild based on the
   transaction logs produced by uninstrumented Ethereum Virtual Machine
   (EVM). Specifically, our study decouples two important factors of an
   adversarial transaction-i.e., (i) an adversarial action exploiting the
   vulnerable contract and (ii) an adversarial consequence like ether or
   token transfers resulted from the action-for the analysis of attacks and
   defenses.
   The results of our study reveal a huge volume of attacks beyond what
   have been studied in the literature, e.g., those targeting new
   vulnerability types like airdrop hunting and those targeting zero-day
   variants of known vulnerabilities. Besides successful attacks, our study
   also shows attempted attacks that are prevented due to the deployments
   of defenses. As the nature of cyber-security, those defenses have also
   been evaded, mainly due to incomplete defense deployments. To summarize
   it, we believe that this is an ever-evolving game between adversaries
   obtaining illegal profits and defenders shielding their own contracts.}},
	address = {{SUITE 215, 2560 NINTH ST, BERKELEY, CA 94710 USA}},
	affiliation = {{Zhou, SF (Corresponding Author), Fudan Univ, Shanghai, Peoples R China. Zhou, Shunfan; Yang, Zhemin; Xiang, Jie; Yang, Min; Zhang, Yuan, Fudan Univ, Shanghai, Peoples R China. Cao, Yinzhi, Johns Hopkins Univ, Baltimore, MD 21218 USA.}},
	author = {Zhou, Shunfan and Yang, Zhemin and Xiang, Jie and Cao, Yinzhi and Yang, Min and Zhang, Yuan},
	author-email = {{sfzhou17@fudan.edu.cn yangzhemin@fudan.edu.cn jxiang17@fudan.edu.cn yinzhi.cao@jhu.edu m\_yang@fudan.edu.cn yuanxzhangj@fudan.edu.cn}},
	book-group-author = {{USENIX Assoc}},
	booktitle = {{PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR7KC}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}U1636204, U1736208, U1836210, U1836213, 61972099, 61602121, 61602123]; Natural Science Foundation of ShanghaiNatural Science Foundation of Shanghai {[}19ZR1404800]; National Science Foundation (NSF)National Science Foundation (NSF) {[}CNS-18-54000, CNS-18-54001]}},
	funding-text = {{We would like to thank the anonymous reviewers for their insightful comments that helped improve the quality of the paper, and the authors of related researches {[}23,28-31,39-41] for their datasets that help us evaluate our tool. This work was supported in part by the National Natural Science Foundation of China (U1636204, U1736208, U1836210, U1836213, 61972099, 61602121, 61602123), Natural Science Foundation of Shanghai (19ZR1404800). Min Yang is the corresponding author, and a faculty of Shanghai Institute of Intelligent Electronics \& Systems, Shanghai Institute for Advanced Communication and Data Science, and Engineering Research Center of Cyber Security Auditing and Monitoring, Ministry of Education, China. This work was supported in part by National Science Foundation (NSF) grants CNS-18-54000 and CNS-18-54001. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of NSF.}},
	isbn = {{978-1-939133-17-5}},
	language = {{English}},
	note = {{29th USENIX Security Symposium, ELECTR NETWORK, AUG 12-14, 2020}},
	number-of-cited-references = {{30}},
	organization = {{USENIX Assoc; Facebook; Microsoft; Salesforce; ByteDance; Cisco; Kaspersky; Baidu; Dropbox; Google; IBM; Intel; Qualcomm; ACM Queue; DMTF; FreeBSD Fdn}},
	pages = {{2793-2809}},
	publisher = {{USENIX ASSOC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{An Ever-evolving Game: Evaluation of Real-world Attacks and Defenses in Ethereum Ecosystem}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000668146200157}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2020}}}

@article{WOS:000528625100011,
	abstract = {{Ethereum smart contracts are programs that can be collectively executed
   by a network of mutually untrusted nodes. Smart contracts handle and
   transfer assets of values, offering strong incentives for malicious
   attacks. Intrusion attacks are a popular type of malicious attacks. In
   this article, we propose ContractGuard, the first intrusion detection
   system (IDS) to defend Ethereum smart contracts against such attacks.
   Like IDSs for conventional programs, ContractGuard detects intrusion
   attempts as abnormal control flow. However, existing IDS
   techniques/tools are inapplicable to Ethereum smart contracts due to
   Ethereum's decentralized nature and its highly restrictive execution
   environment. To address these issues, we design ContractGuard by
   embedding it in the contracts to profile context-tagged acyclic paths,
   and optimizing it under the Ethereum gas-oriented performance model. The
   main goal is to minimize the overheads, to which the users will be
   extremely sensitive since the cost needs to be paid upfront in digital
   concurrency. Empirical investigation using real-life contracts deployed
   in the Ethereum mainnet shows that on average, ContractGuard only adds
   to 36.14 percent of the deployment overhead and 28.27 percent of the
   runtime overhead. Furthermore, we conducted controlled experiments and
   show that ContractGuard successfully guard against attacks on all
   real-world vulnerabilities and 83 percent of the seeded vulnerabilities.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
	affiliation = {{Zhao, GS (Corresponding Author), South China Normal Univ, Sch Comp Sci, Zhongshan Rd 55, Guangzhou, Guangdong, Peoples R China. Cheung, SC (Corresponding Author), Hong Kong Univ Sci \& Technol, Dept Comp Sci \& Engn, Kowloon, Clear Water Bay, Hong Kong, Peoples R China. Wang, Xinming, Lakala Grp, Bldg D1,Beiqing Rd, Beijing, Peoples R China. He, Jiahao; Xie, Zhijian; Zhao, Gansen, South China Normal Univ, Sch Comp Sci, Zhongshan Rd 55, Guangzhou, Guangdong, Peoples R China. Cheung, Shing-Chi, Hong Kong Univ Sci \& Technol, Dept Comp Sci \& Engn, Kowloon, Clear Water Bay, Hong Kong, Peoples R China.}},
	author = {Wang, Xinming and He, Jiahao and Xie, Zhijian and Zhao, Gansen and Cheung, Shing-Chi},
	author-email = {{wangxinming@lakala.com hejiahao@m.scnu.edu.cn xiezhijian@m.scnu.edu.cn gzhao@m.scnu.edu.cn scc@cse.ust.hk}},
	da = {{2021-11-07}},
	doc-delivery-number = {{LH2NS}},
	doi = {{10.1109/TSC.2019.2949561}},
	funding-acknowledgement = {{HKSAR RGC/GRFHong Kong Research Grants Council {[}16202917]; National Key R\&D Program of China {[}2018YFB1404402]; Key R\&D Program for Guangdong {[}2019B010137003]; Science and Technology Planning Project of Guangdong {[}2016B030305006, 2018A07071702, 201804010314, 2012224-12]}},
	funding-text = {{This work was supported in part by HKSAR RGC/GRF 16202917, National Key R\&D Program of China 2018YFB1404402, the Key R\&D Program for Guangdong (2019B010137003), the Science and Technology Planning Project of Guangdong (2016B030305006, 2018A07071702, 201804010314, 2012224-12).}},
	issn = {{1939-1374}},
	journal = {{IEEE TRANSACTIONS ON SERVICES COMPUTING}},
	journal-iso = {{IEEE Trans. Serv. Comput.}},
	keywords = {{Smart contracts; Blockchain; Intrusion detection; Peer-to-peer computing; Context modeling; Runtime; Blockchain; ethereum smart contract; intrusion detection system; anomaly detection}},
	language = {{English}},
	month = {{MAR-APR}},
	number = {{2}},
	number-of-cited-references = {{43}},
	oa = {{Green Submitted, Green Published}},
	orcid-numbers = {{He, Jiahao/0000-0002-6837-2682 Cheung, Shing Chi/0000-0002-3508-7172}},
	pages = {{314-328}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{He, Jiahao/AAO-7588-2020 Cheung, Shing Chi/U-5882-2018}},
	times-cited = {{5}},
	title = {{ContractGuard: Defend Ethereum Smart Contracts with Embedded Intrusion Detection}},
	type = {{Article}},
	unique-id = {{WOS:000528625100011}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{5}},
	volume = {{13}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/TSC.2019.2949561}}

@inproceedings{WOS:000667971400131,
	abstract = {{Smart contracts on the Ethereum blockchain are notoriously known as
   vulnerable to external attacks. Many of their issues led to a
   considerably large financial loss as they resulted from broken payments
   by digital assets, e.g., cryptocurrency. Existing research focused on
   specific patterns to find such problems, e.g., reentrancy bug,
   nondeterministic recipient etc., yet may lead to false alarms or miss
   important issues. To mitigate these limitations, we designed the SAFEPAY
   analysis framework to find unfair payments in Ethereum smart contracts.
   Compared to existing analyzers, SAFEPAY can detect potential blockchain
   transactions with feasible exploits thus effectively avoid false
   reports. Specifically, the detection is driven by a systematic search
   for violations on fair value exchange (FVE), i.e., a new security
   invariant introduced in SAFEPAY to indicate that each party ``fairly{''}
   pays to others. The preliminary evaluation validated the efficacy of
   SAFEPAY by reporting previously unknown issues and decreasing the number
   of false alarms.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Li, Y (Corresponding Author), Oxford Hainan Blockchain Res Inst, Haikou, Hainan, Peoples R China. Li, Yue; Liu, Han; Yang, Zhiqiang; Ren, Qian; Wang, Lei; Chen, Bangdao, Oxford Hainan Blockchain Res Inst, Haikou, Hainan, Peoples R China. Wang, Lei, Shanghai Jiao Tong Univ, Shanghai, Peoples R China.}},
	author = {Li, Yue and Liu, Han and Yang, Zhiqiang and Ren, Qian and Wang, Lei and Chen, Bangdao},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2020 IEEE 40TH INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS (ICDCS)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR7JC}},
	doi = {{10.1109/ICDCS47774.2020.00116}},
	funding-acknowledgement = {{National Key Research and Development Program of China {[}2018YFB0803400, 2019YFB2101601]}},
	funding-text = {{Lei Wang is supported by National Key Research and Development Program of China (No.2018YFB0803400, No.2019YFB2101601).}},
	isbn = {{978-1-7281-7002-2}},
	issn = {{1063-6927}},
	keywords = {{Smart contract; Symbolic execution; Taint analysis; Insecure message call}},
	language = {{English}},
	note = {{40th IEEE International Conference on Distributed Computing Systems (ICDCS), ELECTR NETWORK, NOV 29-DEC 01, 2020}},
	number-of-cited-references = {{8}},
	organization = {{IEEE; IEEE Comp Soc; Nanyang Technol Univ; Natl Univ Singapore; Conflux}},
	pages = {{1219-1222}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{IEEE International Conference on Distributed Computing Systems}},
	times-cited = {{0}},
	title = {{SAFEPAY on Ethereum: A Framework For Detecting Unfair Payments in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000667971400131}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Hardware \& Architecture; Computer Science, Information Systems; Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/ICDCS47774.2020.00116}}

@article{WOS:000678340800019,
	abstract = {{Smart contracts, one of the success stories in blockchain 2.0, have been
   widely utilized in a broad range of applications, including those
   involving Internet of Things (IoT). Given the fast-pace nature of the
   topic, it can be challenging for the research community to keep track of
   the latest advances. Hence, in this article, we perform a comprehensive,
   in-depth review of known security challenges (e.g., inherently
   vulnerable particularities, programming vulnerabilities, and attacks)
   and potential research opportunities associated with the deploying of
   smart contracts in an IoT setting. We hope this survey will serve as a
   starting point for the readers seeking to understand and explore the
   potential applications of smart contracts.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Wang, C (Corresponding Author), Huazhong Univ Sci \& Technol, Sch Elect Informat \& Commun, Wuhan 430074, Peoples R China. Peng, Kai; Li, Meijun; Huang, Haojun; Wang, Chen, Huazhong Univ Sci \& Technol, Sch Elect Informat \& Commun, Wuhan 430074, Peoples R China. Peng, Kai; Wang, Chen, China Univ Geosci, Hubei Key Lab Intelligent Geoinformat Proc, Wuhan 430078, Peoples R China. Wan, Shaohua, Zhongnan Univ Econ \& Law, Sch Informat \& Safety Engn, Wuhan 430073, Peoples R China. Choo, Kim-Kwang Raymond, Univ Texas San Antonio, Dept Informat Syst \& Cyber Secur, San Antonio, TX 78249 USA.}},
	author = {Peng, Kai and Li, Meijun and Huang, Haojun and Wang, Chen and Wan, Shaohua and Choo, Kim-Kwang Raymond},
	author-email = {{pkhust@hust.edu.cn meijunli@hust.edu.cn hjhuang@hust.edu.cn chenwang@hust.edu.cn shaohua.wan@ieee.org raymond.choo@fulbrightmail.org}},
	da = {{2021-11-07}},
	doc-delivery-number = {{TQ5SV}},
	doi = {{10.1109/JIOT.2021.3074544}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61872416, 62002104, 52031009, 62071192]; Fundamental Research Funds for the Central Universities of ChinaFundamental Research Funds for the Central Universities {[}2019kfyXJJS017]; Natural Science Foundation of Hubei Province of ChinaNatural Science Foundation of Hubei Province {[}2019CFB191]; Open Research Project of Hubei Key Laboratory of Intelligent Geo-Information Processing {[}KLIGIP-2018A03]; Cloud Technology Endowed Professorship}},
	funding-text = {{This work was supported in part by the National Natural Science Foundation of China under Grant 61872416, Grant 62002104, Grant 52031009, and Grant 62071192; in part by the Fundamental Research Funds for the Central Universities of China under Grant 2019kfyXJJS017; in part by the Natural Science Foundation of Hubei Province of China under Grant 2019CFB191; and in part by the Open Research Project of Hubei Key Laboratory of Intelligent Geo-Information Processing under Grant KLIGIP-2018A03. The work of KimKwang Raymond Choo was supported by the Cloud Technology Endowed Professorship.}},
	issn = {{2327-4662}},
	journal = {{IEEE INTERNET OF THINGS JOURNAL}},
	journal-iso = {{IEEE Internet Things J.}},
	keywords = {{Security; Smart contracts; Blockchain; Internet of Things; Tools; Peer-to-peer computing; Systematics; Blockchain; Internet of Things (IoT); programming vulnerability; security auditing; smart contract}},
	keywords-plus = {{BLOCKCHAIN; PERFORMANCE; FRAMEWORK; PRIVACY; ISSUES; SYSTEM}},
	language = {{English}},
	month = {{AUG 1}},
	number = {{15}},
	number-of-cited-references = {{111}},
	orcid-numbers = {{Wan, Shaohua/0000-0001-7013-9081 Wang, Chen/0000-0003-1963-4954 Choo, Kim-Kwang Raymond/0000-0001-9208-5336}},
	pages = {{12004-12020}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	researcherid-numbers = {{Wan, Shaohua/B-9243-2014 Wang, Chen/E-3121-2010 }},
	times-cited = {{1}},
	title = {{Security Challenges and Opportunities for Smart Contracts in Internet of Things: A Survey}},
	type = {{Article}},
	unique-id = {{WOS:000678340800019}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{8}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/JIOT.2021.3074544}}

@article{WOS:000473770600001,
	abstract = {{A smart contract is an agreement between two or more parties, which is
   executed by the computer code. The code does the execution without
   giving either party the ability to back out, so it ensures the trustless
   execution. The smart contract is one of the most important features in
   blockchain applications, which implements trusted transactions without
   third parties. However, with the rapid development, blockchain smart
   contracts have also exposed many security problems, and some attacks
   caused by contract vulnerabilities have led to terrible losses. In order
   to better deal with such dilemma, making a comprehensive survey about
   the security verification of blockchain smart contracts from major
   scientific databases is quite indispensable. Even though the
   significance of studying security verification of blockchain smart
   contracts is evident, it is really fresh yet. The major contributions of
   our survey work come from three aspects. First, after retrieving
   all-sided research studies, we select 53 most related papers to show the
   state-of-the art of this topic, where 20 papers focus on dealing with
   security assurance of blockchain smart contracts, and 33 papers focus on
   the correctness verification of blockchain smart contracts. Second, we
   propose a taxonomy toward the topic of security verification of
   blockchain smart contracts and discuss the pros and cons of each
   category of related studies. Third, through in-depth analysis of these
   studies, we come to know that the correctness verification of smart
   contracts based on the formal method has already become the more
   significant and more effective method to validate whether a smart
   contract is credible and accurate. So, we further present representative
   studies of formal verification of smart contracts in detail to
   demonstrate that using a formal method to validate blockchain smart
   contracts must have a promising and meritorious future.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Liu, J (Corresponding Author), Inner Mongolia Univ, Coll Comp Sci, Hohhot 010021, Peoples R China. Liu, Jing; Liu, Zhentian, Inner Mongolia Univ, Coll Comp Sci, Hohhot 010021, Peoples R China.}},
	author = {Liu, Jing and Liu, Zhentian},
	author-email = {{liujing@imu.edu.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{IG4JT}},
	doi = {{10.1109/ACCESS.2019.2921624}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61662051]}},
	funding-text = {{This work was supported in part by the National Natural Science Foundation of China under Grant 61662051.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Blockchain; formal method; security verification; smart contract; survey}},
	language = {{English}},
	number-of-cited-references = {{69}},
	oa = {{gold}},
	orcid-numbers = {{Liu, Jing/0000-0003-4641-1326}},
	pages = {{77894-77904}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{42}},
	title = {{A Survey on Security Verification of Blockchain Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000473770600001}},
	usage-count-last-180-days = {{8}},
	usage-count-since-2013 = {{15}},
	volume = {{7}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2019.2921624}}

@inproceedings{WOS:000614362600006,
	abstract = {{Blockchain is a promising infrastructural technology that is finding its
   way into a growing number of domains like big data, finance, and
   medical. While blockchain has come to be thought of primarily as the
   foundation for Bitcoin, it has evolved far beyond underpinning the
   virtual currency. As it becomes progressively popular, the need for
   effective programming means would be more demanding. Blockchain
   programming as a core means provides accounts of the `code is law' that
   specifies agreements between parties and allows its stakeholders to
   still trust the platform to execute the agreed-upon contract (known as
   smart contract) as expected. Although it seems straightforward in
   theory, it is hardly the case when it comes to real-life situations.
   There have been several instances that show smart contracts are riddled
   with issues and vulnerabilities in code, causing damages. What's for
   sure is lacking is that the existing languages are not living up to the
   point to be able to unleash the full potential of the blockchain, as
   often have resulted in buggy code with a steep learning curve for
   developers. This denotes that the current research on contract
   development is not sufficient and is still in a stage of infancy. In
   order to advance the state of the research in this area, an evaluation
   of the current state-of-the-art practices in a thorough and experimental
   manner is required. Thus, the objective of this paper is to give a
   comprehensive analysis of such domain-specific programming practices
   from critical points of usability and security to provide a working
   guideline for newcomers and researchers.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Parizi, RM (Corresponding Author), Kennesaw State Univ, Dept Software Engn \& Game Dev, Kennesaw, GA 30060 USA. Parizi, Reza M.; Amritraj, Kennesaw State Univ, Dept Software Engn \& Game Dev, Kennesaw, GA 30060 USA. Dehghantanha, Ali, Univ Sheffield, Dept Comp Sci, Sheffield, S Yorkshire, England.}},
	author = {Parizi, Reza M. and Amritraj and Dehghantanha, Ali},
	author-email = {{rparizil@kennesaw.edu amritra@students.kennesaw.edu a.dehghantanha@sheffield.ac.uk}},
	booktitle = {{BLOCKCHAIN - ICBC 2018}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ7CF}},
	doi = {{10.1007/978-3-319-94478-4\_6}},
	editor = {{Chen, S and Wang, H and Zhang, LJ}},
	eissn = {{1611-3349}},
	isbn = {{978-3-319-94478-4; 978-3-319-94477-7}},
	issn = {{0302-9743}},
	keywords = {{Blockchain; Blockchain coding; Smart contract platforms; Smart contract programming; Decentralized computing and development}},
	language = {{English}},
	note = {{1st International Conference on Blockchain (ICBC) Held as Part of the Services Conference Federation (SCF), Seattle, WA, JUN 25-30, 2018}},
	number-of-cited-references = {{35}},
	pages = {{75-91}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Parizi, Reza/AAF-3813-2019}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{15}},
	title = {{Smart Contract Programming Languages on Blockchains: An Empirical Evaluation of Usability and Security}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000614362600006}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{10974}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-94478-4%5C_6}}

@inproceedings{WOS:000569720900052,
	abstract = {{In recent years we have seen a great deal of attention to the topic of
   security analysis in smart contracts, especially those developed for the
   Ethereum blockchain. As a result, there seems to be an ever-growing
   demand for secure smart contracts to protect what could potentially be
   worth billions. In this paper, we introduce Etherolic as a robust,
   scalable and efficient fuzzing tool based on concolic testing for
   performing security analysis on smart contracts. Our approach works
   based on a successful combination of dynamic taint tracking (DTA) and
   concolic testing that allows users to analyze the bytecode of smart
   contracts being run on the Ethereum Virtual Machine. Moreover, Etherolic
   is not only able to identify a wide spectrum of recent vulnerabilities
   in smart contracts, but also it generates exploits to trigger unknown
   errors in the code. In order to demonstrate the usefulness of our
   approach, we evaluated Etherolic on a crafted benchmark suite,
   comprising several real-world and synthetic smart contracts along with
   98 safety features. The result of our preliminary evaluation reveals 204
   security violations in the benchmarks.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Ashouri, M (Corresponding Author), Univ Potsdam, Potsdam, Germany. Ashouri, Mohammadreza, Univ Potsdam, Potsdam, Germany.}},
	author = {Ashouri, Mohammadreza},
	author-email = {{ashouri@uni-potsdam.de}},
	book-group-author = {{ACM}},
	booktitle = {{PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP9ND}},
	doi = {{10.1145/3341105.3374226}},
	isbn = {{978-1-4503-6866-7}},
	keywords = {{Ethereum; Security Analysis; Smart Contract; Concolic Testing; Taint Analysis}},
	language = {{English}},
	note = {{35th Annual ACM Symposium on Applied Computing (SAC), Czech Tech Univ, ELECTR NETWORK, MAR 30-APR 03, 2020}},
	number-of-cited-references = {{16}},
	organization = {{ACM; Masaryk Univ Czechia; Microsoft Res; ACM Special Interest Grp Appl Comp; Natl Inst Technol Calicut}},
	pages = {{353-356}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Etherolic: A Practical Security Analyzer for Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000569720900052}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Artificial Intelligence; Computer Science, Information Systems; Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3341105.3374226}}

@article{WOS:000524655600001,
	abstract = {{Applications of Blockchain (BC) technology and Cyber-Physical Systems
   (CPS) are increasing exponentially. However, framing resilient and
   correct smart contracts (SCs) for these smart application is a quite
   challenging task because of the complexity associated with them. SC is
   modernizing the traditional industrial, technical, and business
   processes. It is self-executable, self-verifiable, and embedded into the
   BC that eliminates the need for trusted third-party systems, which
   ultimately saves administration as well as service costs. It also
   improves system efficiency and reduces the associated security risks.
   However, SCs are well encouraging the new technological reforms in
   Industry 4.0, but still, various security and privacy challenges need to
   be addressed. In this paper, a survey on SC security vulnerabilities in
   the software code that can be easily hacked by a malicious user or may
   compromise the entire BC network is presented. As per the literature,
   the challenges related to SC security and privacy are not explored much
   by the authors around the world. From the existing proposals, it has
   been observed that designing a complex SCs cannot mitigate its privacy
   and security issues. So, this paper investigates various Artificial
   Intelligence (AI) techniques and tools for SC privacy protection. Then,
   open issues and challenges for AI-based SC are analyzed. Finally, a case
   study of retail marketing is presented, which uses AI and SC to preserve
   its security and privacy.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Kim, SW (Corresponding Author), Yeungnam Univ, Dept Informat \& Commun Engn, Gyongsan 38541, South Korea. Gupta, Rajesh; Tanwar, Sudeep; Italiya, Prit, Nirma Univ, Dept Comp Sci \& Engn Inst Technol, Ahmadabad 382481, Gujarat, India. Al-Turjman, Fadi, Near East Univ, Artificial Intelligence Dept, TR-99138 Mersin, Turkey. Al-Turjman, Fadi, Near East Univ, Res Ctr \& IoT, TR-99138 Mersin, Turkey. Nauman, Ali; Kim, Sung Won, Yeungnam Univ, Dept Informat \& Commun Engn, Gyongsan 38541, South Korea.}},
	author = {Gupta, Rajesh and Tanwar, Sudeep and Al-Turjman, Fadi and Italiya, Prit and Nauman, Ali and Kim, Sung Won},
	author-email = {{swon@yu.ac.kr}},
	da = {{2021-11-07}},
	doc-delivery-number = {{LB5DR}},
	doi = {{10.1109/ACCESS.2020.2970576}},
	esi-highly-cited-paper = {{Y}},
	esi-hot-paper = {{N}},
	funding-acknowledgement = {{Brain Korea 21 Plus Program - National Research Foundation of Korea (NRF) {[}22A20130012814]; MSIT (Ministry of Science and ICT), South Korea, through the Information Technology Research Center (ITRC) {[}IITP-2019-2016-0-00313]; Basic Science Research Program through the National Research Foundation of Korea (NRF) - Ministry of Education {[}2018R1D1A1A09082266]}},
	funding-text = {{This work was supported in part by the Brain Korea 21 Plus Program funded by the National Research Foundation of Korea (NRF), under Grant 22A20130012814, in part by the MSIT (Ministry of Science and ICT), South Korea, through the Information Technology Research Center (ITRC) Support Program supervised by the Institute for Information and communications Technology Planning and Evaluation (IITP) under Grant IITP-2019-2016-0-00313, and in part by the Basic Science Research Program through the National Research Foundation of Korea (NRF) funded by the Ministry of Education under Grant 2018R1D1A1A09082266.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Cyber-physical system; blockchain; smart contract; artificial intelligence; security; privacy}},
	keywords-plus = {{SECURE MULTIPARTY COMPUTATION; HEALTH-CARE 4.0; INTERNET; BLOCKCHAIN; THINGS; FRAMEWORK}},
	language = {{English}},
	number-of-cited-references = {{146}},
	oa = {{gold}},
	orcid-numbers = {{Gupta, Rajesh/0000-0003-3298-4238 Al-Turjman, Fadi/0000-0001-5418-873X Tanwar, Sudeep/0000-0002-1776-4651 Kim, Sungwon/0000-0001-8454-6980}},
	pages = {{24746-24772}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	researcherid-numbers = {{Gupta, Rajesh/AAC-8353-2020 Al-Turjman, Fadi/L-2998-2019 Tanwar, Sudeep/AAI-6709-2020 }},
	times-cited = {{48}},
	title = {{Smart Contract Privacy Protection Using AI in Cyber-Physical Systems: Tools, Techniques and Challenges}},
	type = {{Article}},
	unique-id = {{WOS:000524655600001}},
	usage-count-last-180-days = {{18}},
	usage-count-since-2013 = {{64}},
	volume = {{8}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2020.2970576}}

@inproceedings{WOS:000483568200015,
	abstract = {{A developing field of interest for the distributed systems and applied
   cryptography communities is that of smart contracts: self-executing
   financial instruments that synchronize their state, often through a
   blockchain. One such smart contract system that has seen widespread
   practical adoption is Ethereum, which has grown to a market capacity of
   100 billion USD and clears an excess of 500,000 daily transactions.
   Unfortunately, the rise of these technologies has been marred by a
   series of costly bugs and exploits. Increasingly, the Ethereum community
   has turned to formal methods and rigorous program analysis tools. This
   trend holds great promise due to the relative simplicity of smart
   contracts and bounded-time deterministic execution inherent to the
   Ethereum Virtual Machine (EVM).
   Here we present KEVM, an executable formal specification of the EVM's
   bytecode stack-based language built with the K Framework, designed to
   serve as a solid foundation for further formal analyses. We empirically
   evaluate the correctness and performance of KEVM using the official
   Ethereum test. suite In To demonstrate the usability, several extensions
   of the semantics are presented and two different-language
   implementations of the ERC20 Standard Token are verified against the
   ERC20 specification. These results are encouraging 14 the executable
   semantics approach to language prototyping and specification.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Hildenbrandt, E (Corresponding Author), Univ Illinois, Comp Sci, Champaign, IL 61820 USA. Hildenbrandt, E (Corresponding Author), Runtime Verificat Inc, Urbana, IL 61801 USA. Hildenbrandt, Everett; Saxena, Manasvi; Zhu, Xiaoran; Park, Daejun; Zhang, Yi; Rosu, Grigore, Univ Illinois, Comp Sci, Champaign, IL 61820 USA. Rodrigues, Nishant, Univ Illinois, Math, Champaign, IL USA. Hildenbrandt, Everett; Saxena, Manasvi; Daian, Philip; Guth, Dwight; Moore, Brandon; Park, Daejun; Zhang, Yi; Stefanescu, Andrei; Rosu, Grigore, Runtime Verificat Inc, Urbana, IL 61801 USA. Daian, Philip, Cornell Tech, IC3, New York, NY USA. Zhu, Xiaoran, East China Normal Univ, Soft Hardware Codesign Engn Res Ctr, Shanghai, Peoples R China.}},
	author = {Hildenbrandt, Everett and Saxena, Manasvi and Rodrigues, Nishant and Zhu, Xiaoran and Daian, Philip and Guth, Dwight and Moore, Brandon and Park, Daejun and Zhang, Yi and Stefanescu, Andrei and Rosu, Grigore},
	author-email = {{hildenb2@illinois.edu msaxena2@illinois.edu nishant2@illinois.edu xiaoran@illinois.edu phil.daian@runtimeverification.com dwight.guth@runtimeverification.com brandon.moore@runtimeverification.com daejun.park@runtimeverification.com yi.zhang@runtimeverification.com andrei@stefanescu.io grosu@illinois.edu}},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{IEEE 31ST COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF 2018)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BN5LZ}},
	doi = {{10.1109/CSF.2018.00022}},
	eissn = {{2374-8303}},
	funding-acknowledgement = {{Boeing grant on ``Formal Analysis Tools for Cyber Security{''} 2016-2017; NSFNational Science Foundation (NSF) {[}CCF-1318191, CCF-1421575, CNS-1330599, CNS-1514163, IIP-1660186, DGE-1650441]; Ethereum Foundation; IOHK}},
	funding-text = {{Many members of the Ethereum community have provided overwhelming support for this project, allowing us to quickly identify issues of key importance to the community at large. A special thanks goes to IOHK<SUP>23</SUP> for recognizing the importance of this effort and supporting it through generous funding and by connecting us to research communities around the world working on similar topics. Beyond that, we would like to thank the Initiative for CryptoCurrencies and Contracts (IC3)<SUP>24</SUP> for allowing us to present this work to the Ethereum community at large, which provided invaluable feedback on future directions to take this project.; The work presented in this paper was supported in part by the Boeing grant on ``Formal Analysis Tools for Cyber Security{''} 2016-2017, the NSF grants CCF-1318191, CCF-1421575, CNS-1330599, CNS-1514163, and IIP-1660186, the NSF Graduate Fellowship under Grant No. DGE-1650441, an IOHK gift, and a grant from the Ethereum Foundation.}},
	isbn = {{978-1-5386-6680-7}},
	issn = {{1940-1434}},
	language = {{English}},
	note = {{31st IEEE Computer Security Foundations Symposium (CSF) held as part of the Federated Logic Conference (FLoC), Oxford, ENGLAND, JUL 09-12, 2018}},
	number-of-cited-references = {{46}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{204-217}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{Proceedings IEEE Computer Security Foundations Symposium}},
	times-cited = {{63}},
	title = {{KEVM: A Complete Formal Semantics of the Ethereum Virtual Machine}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000483568200015}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{3}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1109/CSF.2018.00022}}

@inproceedings{WOS:000503498000039,
	abstract = {{Ethereum smart contracts are public, immutable and distributed and, as
   such, they are prone to vulnerabilities sourcing from programming
   mistakes of developers. This paper presents SAFEVM, a verification tool
   for Ethereum smart contracts that makes use of state-of-the-art
   verification engines for C programs. SAFEVM takes as input an Ethereum
   smart contract (provided either in Solidity source code, or in compiled
   EVM bytecode), optionally with assert and require verification
   annotations, and produces in the output a report with the verification
   results. Besides general safety annotations, SAFEVM handles the
   verification of array accesses: it automatically generates SV-COMP
   verification assertions such that C verification engines can prove
   safety of array accesses. Our experimental evaluation has been
   undertaken on all contracts pulled from etherscan.io (more than 24,000)
   by using as back-end verifiers CPAchecker, SeaHorn and VeryMax.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Albert, E (Corresponding Author), Univ Complutense Madrid, Madrid, Spain. Albert, Elvira; Correas, Jesus; Gordillo, Pablo; Rubio, Albert, Univ Complutense Madrid, Madrid, Spain. Roman-Diez, Guillermo, Univ Politecn Madrid, Madrid, Spain.}},
	author = {Albert, Elvira and Correas, Jesus and Gordillo, Pablo and Roman-Diez, Guillermo and Rubio, Albert},
	booktitle = {{PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA `19)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO1ZS}},
	doi = {{10.1145/3293882.3338999}},
	editor = {{Zhang, DM and Moller, A}},
	funding-acknowledgement = {{Spanish MINECO {[}TIN2015-69175-C4-2-R]; MINECO/FEDER, UE {[}TIN2015-69175-C4-3-R]; Spanish MICINN/FEDERSpanish GovernmentEuropean Commission {[}RTI2018-094403-B-C31, RTI2018-094403-B-C33, S2018/-TCS-4314, S2018/TCS-4339]; EIE Funds of the European Union; UCM {[}CT27/16-CT28/16]}},
	funding-text = {{This work was funded partially by the Spanish MINECO project TIN2015-69175-C4-2-R and MINECO/FEDER, UE project TIN2015-69175-C4-3-R, by Spanish MICINN/FEDER, UE projects RTI2018-094403-B-C31 and RTI2018-094403-B-C33, by the CM projects S2018/-TCS-4314 and S2018/TCS-4339, co-funded by EIE Funds of the European Union, and by the UCM CT27/16-CT28/16 grant.}},
	isbn = {{978-1-4503-6224-5}},
	keywords = {{Smart contracts; Ethereum blockchain; Safety verification}},
	language = {{English}},
	note = {{28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), Beijing, PEOPLES R CHINA, JUL 15-19, 2019}},
	number-of-cited-references = {{20}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Correas, Jesus/0000-0002-3219-0799 Gordillo, Pablo/0000-0001-6189-4667 Roman-Diez, Guillermo/0000-0002-5427-8855}},
	organization = {{Assoc Comp Machinery; ACM SIGSOFT; Microsoft Res; DiDi; Google; Huawei; MoocTest; Facebook; Fujitsu; Sourcebrella; UCLouvain}},
	pages = {{386-389}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Correas, Jesus/AAG-4430-2020 Roman-Diez, Guillermo/AAS-4445-2020 Gordillo, Pablo/X-4552-2018 }},
	times-cited = {{1}},
	title = {{SAFEVM: A Safety Verifier for Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000503498000039}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3293882.3338999}}

@article{WOS:000616307600013,
	abstract = {{Smart contract vulnerabilities have attracted lots of concerns due to
   the resultant financial losses. Matching-based detection methods
   extrapolating known vulnerabilities to unknown have proven to be
   effective in other platforms. However, directly adopting the technique
   to smart contracts is obstructed by two issues, i.e., diversity of
   bytecode generation resulting from the rapid evolution of compilers and
   interference of noise code easily caused by the homogeneous business
   logics. To address the problems, we propose contract bytecode-oriented
   normalization and slicing techniques to augment bytecode matching.
   Specifically, we conduct data- and instruction-level normalizations to
   uniform the bytecode generated by different compilers, and enforce
   contract-specific slicing by tracking data- and control-flows with
   simulated bytecode executions to prune the noise code as far as
   possible. Based on the above techniques, we design an unsupervised graph
   embedding algorithm to encode the code graphs into quantitatively
   comparable vectors. The potentially vulnerable smart contracts can be
   identified by measuring the similarities between their vectors and known
   vulnerable ones. Our evaluations have shown the efficiency (0.47 seconds
   per contract on average), effectiveness (160 verified true positives)
   and high precision (91.95\% for top-ranked). It is worth noting that, we
   also identify dozens of honeypot contracts, further demonstrating the
   capability of our method.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Liang, B (Corresponding Author), Renmin Univ China, Sch Informat, Beijing 100872, Peoples R China. Huang, Jianjun; Han, Songming; You, Wei; Shi, Wenchang; Liang, Bin, Renmin Univ China, Sch Informat, Beijing 100872, Peoples R China. Huang, Jianjun; Han, Songming; You, Wei; Shi, Wenchang; Liang, Bin, Renmin Univ China, Key Lab DEKE, Minist Educ, Beijing 100872, Peoples R China. Wu, Jingzheng; Wu, Yanjun, Chinese Acad Sci, Inst Software, Beijing 100190, Peoples R China.}},
	author = {Huang, Jianjun and Han, Songming and You, Wei and Shi, Wenchang and Liang, Bin and Wu, Jingzheng and Wu, Yanjun},
	author-email = {{hjj@ruc.edu.cn 2013202516@ruc.edu.cn youwei@ruc.edu.cn wenchang@ruc.edu.cn liangb@ruc.edu.cn jingzheng08@iscas.ac.cn yanjun@iscas.ac.cn}},
	da = {{2021-11-07}},
	doc-delivery-number = {{QE6HW}},
	doi = {{10.1109/TIFS.2021.3050051}},
	eissn = {{1556-6021}},
	funding-acknowledgement = {{National Natural Science Foundation of China (NSFC)National Natural Science Foundation of China (NSFC) {[}U1836209, 61802413]; Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities; Research Funds of Renmin University of China {[}19XNLG02, 20XNLG03]}},
	funding-text = {{This work was supported in part by the National Natural Science Foundation of China (NSFC) under Grant U1836209 and Grant 61802413, in part by the Fundamental Research Funds for the Central Universities, and in part by the Research Funds of Renmin University of China under Grant 19XNLG02 and Grant 20XNLG03.}},
	issn = {{1556-6013}},
	journal = {{IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY}},
	journal-iso = {{IEEE Trans. Inf. Forensic Secur.}},
	keywords = {{Smart contracts; Task analysis; Interference; Blockchain; Prototypes; Business; Virtual machining; Vulnerable smart contracts; graph embedding; bytecode matching}},
	language = {{English}},
	number-of-cited-references = {{37}},
	pages = {{2144-2156}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering}},
	times-cited = {{0}},
	title = {{Hunting Vulnerable Smart Contracts via Graph Embedding Based Bytecode Matching}},
	type = {{Article}},
	unique-id = {{WOS:000616307600013}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{11}},
	volume = {{16}},
	web-of-science-categories = {{Computer Science, Theory \& Methods; Engineering, Electrical \& Electronic}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/TIFS.2021.3050051}}

@inproceedings{WOS:000693398800014,
	abstract = {{Motivated by the immutable nature of Ethereum smart contracts and of
   their transactions, quite many approaches have been proposed to detect
   defects and security problems before smart contracts become persistent
   in the blockchain and they are granted control on substantial financial
   value.
   Because smart contracts source code might not be available, static
   analysis approaches mostly face the challenge of analysing compiled
   Ethereum bytecode, that is available directly from the official
   blockchain. However, due to the intrinsic complexity of Ethereum
   bytecode (especially in jump resolution), static analysis encounters
   significant obstacles that reduce the accuracy of exiting automated
   tools.
   This paper presents a novel static analysis algorithm based on the
   symbolic execution of the Ethereum operand stack that allows us to
   resolve jumps in Ethereum bytecode and to construct an accurate
   control-flow graph (CFG) of the compiled smart contracts. EtherSolve is
   a prototype implementation of our approach. Experimental results on a
   significant set of real world Ethereum smart contracts show that
   EtherSolve improves the accuracy of the execrated CFGs with respect to
   the state of the art available approaches.
   Many static analysis techniques are based on the CFG representation of
   the code and would therefore benefit from the accurate extraction of the
   CFG. For example, we implemented a simple extension of EtherSolve that
   allows to detect instances of the re-entrancy vulnerability.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Contro, F (Corresponding Author), Univ Verona, Comp Sci Dept, Verona, Italy. Contro, Filippo; Crosara, Marco; Ceccato, Mariano; Dalla Preda, Mila, Univ Verona, Comp Sci Dept, Verona, Italy.}},
	author = {Contro, Filippo and Crosara, Marco and Ceccato, Mariano and Dalla Preda, Mila},
	author-email = {{filippo.contro\_01@studenti.univr.it marco.crosara@studenti.univr.it mariano.ceccato@univr.it mila.dallapreda@univr.it}},
	book-group-author = {{IEEE COMP SOC}},
	booktitle = {{2021 IEEE/ACM 29TH INTERNATIONAL CONFERENCE ON PROGRAM COMPREHENSION (ICPC 2021)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS1MQ}},
	doi = {{10.1109/ICPC52881.2021.00021}},
	funding-acknowledgement = {{project MIUR 2018-2022 ``Dipartimenti di Eccellenza{''}}},
	funding-text = {{This paper has been partially supported by project MIUR 2018-2022 ``Dipartimenti di Eccellenza{''}.}},
	isbn = {{978-1-6654-1403-6}},
	issn = {{1092-8138}},
	keywords = {{Reverse engineering; Static analysis; Smart contract; Ethereum}},
	language = {{English}},
	note = {{29th IEEE/ACM International Conference on Program Comprehension (ICPC) / 18th IEEE/ACM International Conference on Mining Software Repositories (MSR), ELECTR NETWORK, MAY 22-30, 2021}},
	number-of-cited-references = {{36}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; IEEE Tech Council Software Engn; ACM Special Interest Grp Software Engn}},
	pages = {{127-137}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{International Conference on Program Comprehension}},
	times-cited = {{0}},
	title = {{EtherSolve: Computing an Accurate Control-Flow Graph from Ethereum Bytecode}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000693398800014}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/ICPC52881.2021.00021}}

@inproceedings{WOS:000503272600010,
	abstract = {{While Ethereum smart contracts enabled a wide range of blockchain
   applications, they are extremely vulnerable to different forms of
   security attacks. Due to the fact that transactions to smart contracts
   commonly involve cryptocurrency transfer, any successful attacks can
   lead to money loss or even financial disorder. In this paper, we focus
   on the overflow attacks in Ethereum, mainly because they widely rooted
   in many smart contracts and comparatively easy to exploit. We have
   developed EASYFLOW, an overflow detector at Ethereum Virtual Machine
   level. The key insight behind EASYFLOW is a taint analysis based
   tracking technique to analyze the propagation of involved taints.
   Specifically, EASYFLOW can not only divide smart contracts into safe
   contracts, manifested overflows, well-protected overflows and potential
   overflows, but also automatically generate transactions to trigger
   potential overflows. In our preliminary evaluation, EASYFLOW managed to
   find potentially vulnerable Ethereum contracts with little runtime
   overhead.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Guan, Z (Corresponding Author), Peking Univ, Natl Engn Res Ctr Software Engn, Beijing, Peoples R China. Gao, Jianbo; Liu, Chao; Li, Qingshan; Chen, Zhong, Peking Univ, Sch EECS, Beijing, Peoples R China. Liu, Han, Tsinghua Univ, Sch Software, Beijing, Peoples R China. Guan, Zhi, Peking Univ, Natl Engn Res Ctr Software Engn, Beijing, Peoples R China.}},
	author = {Gao, Jianbo and Liu, Han and Liu, Chao and Li, Qingshan and Guan, Zhi and Chen, Zhong},
	author-email = {{gaojianbo@pku.edu.cn liuhan2017@tsinghua.edu.cn liuchao\_cs@pku.edu.cn liqs@pku.edu.cn guan@pku.edu.cn zhongchen@pku.edu.cn}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO1YR}},
	doi = {{10.1109/ICSE-Companion.2019.00029}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61672060, 61802223]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2017M620785]}},
	funding-text = {{This work is supported by National Natural Science Foundation of China under the grant No.: 61672060, 61802223 and China Postdoctoral Science Foundation under Grant No.: 2017M620785.}},
	isbn = {{978-1-7281-1764-5}},
	keywords = {{Ethereum; Overflow Vulnerability; Taint Analysis; Smart Contract}},
	language = {{English}},
	note = {{IEEE/ACM 41st International Conference on Software Engineering - Software Engineering in Practice (ICSE-SEIP), Montreal, CANADA, MAY 25-31, 2019}},
	number-of-cited-references = {{12}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; Special Interest Grp Software Engn; Tech Council Software Engn}},
	pages = {{23-26}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{6}},
	title = {{EASYFLOW : Keep Ethereum Away From Overflow}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000503272600010}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ICSE-Companion.2019.00029}}

@inproceedings{WOS:000680821200003,
	abstract = {{Smart contracts have become lucrative and profitable targets for
   attackers because they can hold a great amount of money. Unfortunately,
   existing offline approaches for discovering the vulnerabilities in smart
   contracts or checking the correctness of smart contracts cannot conduct
   online detection of attacking transactions. Besides, existing online
   approaches only focus on specific attacks and cannot be easily extended
   to detect other attacks. Moreover, developing a new online detection
   system for smart contracts from scratch is time-consuming and requires
   deep understanding of blockchain internals, thus making it difficult to
   quickly implement and deploy mechanisms to detect new attacks. In this
   paper, we propose a novel generic online detection framework named SODA
   for smart contracts on any blockchains that support Ethereum virtual
   machine (EVM). SODA distinguishes itself from existing online approaches
   through its capability, efficiency, and compatibility. First, SODA
   empowers users to easily develop apps for detecting various attacks
   online (i.e., when attacks happen) by separating information collection
   and attack detection with layered design. At the higher layer, SODA
   provides unified interfaces to develop detection apps against various
   attacks. At the lower layer, SODA instruments EVM to collect all
   primitive information necessary to detect various attacks and constructs
   11 kinds of structural information for the ease of developing apps.
   Based on SODA, users can develop new apps in a few lines of code without
   modifying EVM. Second, SODA is efficient, because we design on-demand
   information retrieval to reduce the overhead of information collection
   and adopt dynamic linking to eliminate the overhead of inter-process
   communication. Such design allows users to develop detection apps using
   any programming languages that can generate dynamic link libraries.
   Third, since more and more blockchains adopt EVM as smart contract
   runtime, SODA can be easily migrated to such blockchains without
   modifying apps. Based on SODA, we develop 8 detection apps to detect the
   attacks exploiting major vulnerabilities in smart contracts, and
   integrate SODA (including all apps) into 3 popular blockchains:
   Ethereum, Expanse and Wanchain. The extensive experimental results
   demonstrate the effectiveness and efficiency of SODA and our detection
   apps.}},
	address = {{1775 WIEHLE AVE, STE 201, RESTON, VA, UNITED STATES}},
	affiliation = {{Luo, XP (Corresponding Author), Hong Kong Polytech Univ, Hong Kong, Peoples R China. Chen, Ting; Cao, Rong; Li, Ting; Zhang, Yufei; Liao, Zhou; Zhu, Hang; He, Zheyuan; Tang, Yuxing; Zhang, Xiaosong, Univ Elect Sci \& Technol China, Ctr Cybersecur, Chengdu, Peoples R China. Luo, Xiapu, Hong Kong Polytech Univ, Hong Kong, Peoples R China. Gu, Guofei, Texas A\&M Univ, SUCCESS Lab, College Stn, TX 77843 USA. Chen, Gang, Chengdu Kongdi Technol Inc, Chengdu, Peoples R China. Lin, Xiaodong, Univ Guelph, Guelph, ON, Canada.}},
	author = {Chen, Ting and Cao, Rong and Li, Ting and Luo, Xiapu and Gu, Guofei and Zhang, Yufei and Liao, Zhou and Zhu, Hang and Chen, Gang and He, Zheyuan and Tang, Yuxing and Lin, Xiaodong and Zhang, Xiaosong},
	author-email = {{brokendragon@uestc.edu.cn daniel.xiapu.luo@polyu.edu.hk guofei@cse.tamu.edu 975868494@qq.com xlin08@uoguelph.ca}},
	book-group-author = {{Internet Soc}},
	booktitle = {{28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BS0BG}},
	doi = {{10.14722/ndss.2020.24449}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61872057]; National Key R\&D Program of China {[}2018YFB0804100]; Hong Kong RGC Project {[}152193/19E]; US National Science FoundationNational Science Foundation (NSF) {[}1617985, 1700544]}},
	funding-text = {{Ting Chen is partially supported by National Natural Science Foundation of China (61872057) and National Key R\&D Program of China (2018YFB0804100). Xiapu Luo is partially supported by Hong Kong RGC Project (No. 152193/19E). Guofei Gu is partially supported by the US National Science Foundation (No. 1617985 and No. 1700544).}},
	isbn = {{1-891562-66-5}},
	language = {{English}},
	note = {{28th Annual Network and Distributed System Security Symposium (NDSS), ELECTR NETWORK, FEB 21-25, 2021}},
	number-of-cited-references = {{72}},
	oa = {{Bronze}},
	publisher = {{INTERNET SOC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{SODA: A Generic Online Detection Framework for Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000680821200003}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.14722/ndss.2020.24449}}

@inproceedings{WOS:000611408800020,
	abstract = {{Blockchain is a distributed ledger, which is protected against malicious
   modifications by means of cryptographic tools, e.g. digital signatures
   and hash functions. One of the most prominent applications of
   blockchains is cryptocurrencies, such as Bitcoin. In this work, we
   consider a particular attack on wallets for collecting assets in a
   cryptocurrency network based on brute-force search attacks. Using
   Bitcoin as an example, we demonstrate that if the attack is implemented
   successfully, a legitimate user is able to prove that fact of this
   attack with a high probability. We also consider two options for
   modification of existing cryptocurrency protocols for dealing with this
   type of attacks. First, we discuss a modification that requires
   introducing changes in the Bitcoin protocol and allows diminishing the
   motivation to attack wallets. Second, an alternative option is the
   construction of special smart-contracts, which reward the users for
   providing evidence of the brute-force attack. The execution of this
   smart-contract can work as an automatic alarm that the employed
   cryptographic mechanisms, and (particularly) hash functions, have an
   evident vulnerability.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Kiktenko, EO (Corresponding Author), Russian Quantum Ctr, Moscow 143025, Russia. Kiktenko, E. O.; Kudinov, M. A.; Fedorov, A. K., Russian Quantum Ctr, Moscow 143025, Russia. Kudinov, M. A., Bauman Moscow State Tech Univ, Moscow 105005, Russia.}},
	author = {Kiktenko, E. O. and Kudinov, M. A. and Fedorov, A. K.},
	author-email = {{e.kiktenko@rqc.ru mishel.kudinov@gmail.com akf@rqc.ru}},
	booktitle = {{BUSINESS INFORMATION SYSTEMS WORKSHOPS, BIS 2019}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ6EY}},
	doi = {{10.1007/978-3-030-36691-9\_20}},
	editor = {{Abramowicz, W and Corchuelo, R}},
	eissn = {{1865-1356}},
	funding-acknowledgement = {{Russian Foundation for Basic ResearchRussian Foundation for Basic Research (RFBR) {[}18-37-20033]}},
	funding-text = {{Supported by the Russian Foundation for Basic Research (18-37-20033).}},
	isbn = {{978-3-030-36691-9; 978-3-030-36690-2}},
	issn = {{1865-1348}},
	keywords = {{Blockchain; Cryptocurrency; Brute-force attack}},
	keywords-plus = {{SECURITY}},
	language = {{English}},
	note = {{22nd International Conference on Business Information Systems (BIS), Seville, SPAIN, JUN 26-28, 2019}},
	number-of-cited-references = {{16}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Kiktenko, Evgeniy/0000-0001-5760-441X Fedorov, Aleksey/0000-0002-4722-3418}},
	organization = {{Univ Seville; Poznan Univ Econ \& Business, Dept Informat Syst}},
	pages = {{232-242}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science; Operations Research \& Management Science}},
	researcherid-numbers = {{Kiktenko, Evgeniy/J-7288-2012 }},
	series = {{Lecture Notes in Business Information Processing}},
	times-cited = {{0}},
	title = {{Detecting Brute-Force Attacks on Cryptocurrency Wallets}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000611408800020}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{373}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Interdisciplinary Applications; Operations Research \& Management Science}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-030-36691-9%5C_20}}

@article{WOS:000501392500033,
	abstract = {{Blockchain as a distributed computing platform enables users to deploy
   pieces of software (known as smart contracts) for a wealth of
   next-generation decentralized applications without involving a trusted
   third-party. The advantages of smart contracts do, however, come at a
   price. As with most technologies, there are potential security threats,
   vulnerabilities and various other issues associated with smart
   contracts. Writing secure and safe smart contracts can be extremely
   difficult due to various business logics, as well as platform
   vulnerabilities and limitations. Formal methods have recently been
   advocated to mitigate these vulnerabilities. This paper aims to provide
   a first-time study on current formalization research on all smart
   contract-related platforms on blockchains, which is scarce in the
   literature. To this end, a timely and rigorous systematic review to
   examine the state-of-the-art research and achievements published between
   2015 and July 2019 is provided. This study is based on a comprehensive
   review of a set of 35 research papers that have been extracted from
   eight major online digital databases. The results indicate that the most
   common formalization technique is theorem proving, which is most often
   used to verify security properties relating to smart contracts, while
   other techniques such as symbolic execution and model checking were also
   frequently used. These techniques were most commonly used to verify the
   functional correctness of smart contracts. From the language and
   automation point of views, there were 12 languages (domain
   specific/specification/general purpose) proposed or used for the
   formalization of smart contracts on blockchains, while 15 formal
   method-specific automated tools/frameworks were identified for
   mitigating various vulnerabilities of smart contracts. From the results
   of this work, we further highlight three open issues for future research
   in this emerging domain including: formal testing, automated
   verification of smart contracts, and domain specific languages (DSLs)
   for Ethereum. These issues suggest the need for additional, in-depth
   research. Our study also provides possible future research directions.
   (C) 2019 Elsevier Ltd. All rights reserved.}},
	address = {{OXFORD FULFILLMENT CENTRE THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND}},
	affiliation = {{Choo, KKR (Corresponding Author), Univ Texas San Antonio, Dept Informat Syst \& Cyber Secur, San Antonio, TX 78249 USA. Singh, Amritraj; Parizi, Reza M., Kennesaw State Univ, Dept Software Engn \& Game Dev, Marietta, GA 30060 USA. Zhang, Qi, IBM Thomas J Watson Res Ctr, Yorktown Hts, NY 10598 USA. Choo, Kim-Kwang Raymond, Univ Texas San Antonio, Dept Informat Syst \& Cyber Secur, San Antonio, TX 78249 USA. Choo, Kim-Kwang Raymond, Univ Guelph, Sch Comp Sci, Cyber Sci Lab, Guelph, ON, Canada.}},
	article-number = {{101654}},
	author = {Singh, Amritraj and Parizi, Reza M. and Zhang, Qi and Choo, Kim-Kwang Raymond and Dehghantanha, Ali},
	author-email = {{amritra@students.kennesaw.edu rparizi1@kennesaw.edu q.zhang@ibm.com raymond.choo@fulbrightmail.org adehghan@uoguelph.ca}},
	da = {{2021-11-07}},
	doc-delivery-number = {{JU0TQ}},
	doi = {{10.1016/j.cose.2019.101654}},
	eissn = {{1872-6208}},
	issn = {{0167-4048}},
	journal = {{COMPUTERS \& SECURITY}},
	journal-iso = {{Comput. Secur.}},
	keywords = {{Blockchain; Smart contracts; Formal methods; Verification; Systematic review}},
	language = {{English}},
	month = {{JAN}},
	number-of-cited-references = {{53}},
	orcid-numbers = {{Choo, Kim-Kwang Raymond/0000-0001-9208-5336}},
	publisher = {{ELSEVIER ADVANCED TECHNOLOGY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Parizi, Reza/AAF-3813-2019 Choo, Kim-Kwang Raymond/A-3634-2009}},
	times-cited = {{37}},
	title = {{Blockchain smart contracts formalization: Approaches and challenges to address vulnerabilities}},
	type = {{Article}},
	unique-id = {{WOS:000501392500033}},
	usage-count-last-180-days = {{7}},
	usage-count-since-2013 = {{44}},
	volume = {{88}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1016/j.cose.2019.101654}}

@article{WOS:000483406200015,
	abstract = {{Designing government independent and secure identification- and
   authentication protocols is a challenging task. Design flaws and missing
   specifications as well as security- and privacy issues of such protocols
   pose considerable user risks. Formal methods, such as Colored Petri Nets
   (CPN), are utilised for the design, development and analysis of such new
   protocols in order to detect flaws and mitigate identified security
   risks before deployment. This paper fills the gap, by applying in a
   novel way a set of security risk-oriented patterns (SRP) to the
   so-called Authcoin protocol that we formalise using CPN. The initial
   formal model of Authcoin facilitates the detection and elimination of
   design flaws, missing specifications as well as security- and privacy
   issues. The additional risk- and threat analysis based on the
   Information Systems Security Risk Management (ISSRM) domain model we
   perform on the formal CPN models of the protocol. The identified risks
   are mitigated by applying SRPs to the formal model of the Authcoin
   protocol. SRPs are a means to mitigate common security- and privacy
   risks in a business-process context by applying thoroughly tested and
   proven best-practice solutions. The goal of this work is to test the
   utility of SRPs outside of the the usual application domain, to reduce
   the risks and vulnerabilities of the Authcoin protocol. (C) 2019
   Elsevier Ltd. All rights reserved.}},
	address = {{OXFORD FULFILLMENT CENTRE THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND}},
	affiliation = {{Norta, A (Corresponding Author), Tallinn Univ Technol, Blockchain Technol Grp, Akad Tee 15A, EE-12618 Tallinn, Estonia. Norta, Alex, Tallinn Univ Technol, Blockchain Technol Grp, Akad Tee 15A, EE-12618 Tallinn, Estonia. Matulevicius, Raimundas, Univ Tartu, Inst Comp Sci, J Liivi 2, EE-50409 Tartu, Estonia. Leiding, Benjamin, Univ Gottingen, Inst Comp Sci, Goldschmidtstr 7, D-37077 Gottingen, Germany.}},
	author = {Norta, Alex and Matulevicius, Raimundas and Leiding, Benjamin},
	author-email = {{alex.norta.phd@ieee.org rma@ut.ee benjamin.leiding@cs.uni-goettingen.de}},
	da = {{2021-11-07}},
	doc-delivery-number = {{IU2JM}},
	doi = {{10.1016/j.cose.2019.05.017}},
	eissn = {{1872-6208}},
	funding-acknowledgement = {{Estonian Research Council {[}IUT20-55]}},
	funding-text = {{This research has been supported by the Estonian Research Council (grant IUT20-55).}},
	issn = {{0167-4048}},
	journal = {{COMPUTERS \& SECURITY}},
	journal-iso = {{Comput. Secur.}},
	keywords = {{Authcoin; Colored petri net; Authentication; Security; Patterns; Access control; Identity; Blockchain; Smart contract; Formal verification}},
	keywords-plus = {{THEFT VICTIMIZATION; USER AUTHENTICATION; TAXONOMY}},
	language = {{English}},
	month = {{SEP}},
	number-of-cited-references = {{51}},
	orcid-numbers = {{Matulevicius, Raimundas/0000-0002-1829-4794 Leiding, Benjamin/0000-0002-9191-7548 Norta, Alex/0000-0003-0593-8244}},
	pages = {{253-269}},
	publisher = {{ELSEVIER ADVANCED TECHNOLOGY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Matulevicius, Raimundas/J-1871-2019 Norta, Alex/I-2347-2018}},
	times-cited = {{2}},
	title = {{Safeguarding a formalized Blockchain-enabled identity-authentication protocol by applying security risk-oriented patterns}},
	type = {{Article}},
	unique-id = {{WOS:000483406200015}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{48}},
	volume = {{86}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1016/j.cose.2019.05.017}}

@inproceedings{WOS:000474685800052,
	abstract = {{Smart contracts are programs that are stored and executed on the
   Blockchain and can receive, manage and transfer money (cryptocurrency
   units). Two important problems regarding smart contracts are formal
   analysis and compiler optimization. Formal analysis is extremely
   important, because smart contracts hold funds worth billions of dollars
   and their code is immutable after deployment. Hence, an undetected bug
   can cause significant financial losses. Compiler optimization is also
   crucial, because every action of a smart contract has to be executed by
   every node in the Blockchain network. Therefore, optimizations in
   compiling smart contracts can lead to significant savings in
   computation, time and energy.
   Two classical approaches in program analysis and compiler optimization
   are intraprocedural and interprocedural analysis. In intraprocedural
   analysis, each function is analyzed separately, while interprocedural
   analysis considers the entire program. In both cases, the analyses are
   usually reduced to graph problems over the control flow graph (CFG) of
   the program. These graph problems are often computationally expensive.
   Hence, there has been ample research on exploiting structural properties
   of CFGs for efficient algorithms. One such well-studied property is the
   treewidth, which is a measure of tree-likeness of graphs. It is known
   that intraprocedural CFGs of structured programs have treewidth at most
   6, whereas the interprocedural treewidth cannot be bounded. This result
   has been used as a basis for many efficient intraprocedural analyses.
   In this paper, we explore the idea of exploiting the treewidth of smart
   contracts for formal analysis and compiler optimization. First, similar
   to classical programs, we show that the intraprocedural treewidth of
   structured Solidity and Vyper smart contracts is at most 9. Second, for
   global analysis, we prove that the interprocedural treewidth of
   structured smart contracts is bounded by 10 and, in sharp contrast with
   classical programs, treewidth-based algorithms can be easily applied for
   interprocedural analysis. Finally, we supplement our theoretical results
   with experiments using a tool we implemented for computing treewidth of
   smart contracts and show that the treewidth is much lower in practice.
   We use 36,764 real-world Ethereum smart contracts as benchmarks and find
   that they have an average treewidth of at most 3.35 for the
   intraprocedural case and 3.65 for the interprocedural case.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Chatterjee, K (Corresponding Author), IST Austria, Klosterneuburg, Austria. Chatterjee, Krishnendu; Goharshady, Amir Kafshdar, IST Austria, Klosterneuburg, Austria. Goharshady, Ehsan Kafshdar, Ferdowsi Univ Mashhad, Mashhad, Razavi Khorasan, Iran.}},
	author = {Chatterjee, Krishnendu and Goharshady, Amir Kafshdar and Goharshady, Ehsan Kafshdar},
	author-email = {{krishnendu.chatterjee@ist.ac.at amir.goharshady@ist.ac.at e.kafshdargoharshady@mail.um.ac.ir}},
	book-group-author = {{Assoc Comp Machinery}},
	booktitle = {{SAC `19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BN1NS}},
	doi = {{10.1145/3297280.3297322}},
	funding-acknowledgement = {{Vienna Science and Technology Fund (WWTF) Project {[}ICT15-003]; Austrian Science Fund (FWF) NFN GrantAustrian Science Fund (FWF) {[}S11407-N23]; ERCEuropean Research Council (ERC)European Commission {[}279307]; IBM PhD Fellowship programInternational Business Machines (IBM)}},
	funding-text = {{The research was partially supported by Vienna Science and Technology Fund (WWTF) Project ICT15-003, Austrian Science Fund (FWF) NFN Grant No S11407-N23 (RiSE/SHiNE), ERC Starting Grant (279307: Graph Games), and the IBM PhD Fellowship program.}},
	isbn = {{978-1-4503-5933-7}},
	keywords = {{Smart Contracts; Parameterized Algorithms; Treewidth; Blockchain; Compiler Optimization; Program Analysis; Control Flow Graphs}},
	keywords-plus = {{MODEL-CHECKING; TREE-WIDTH; ALGORITHMS; GRAPHS}},
	language = {{English}},
	note = {{34th ACM/SIGAPP Annual International Symposium on Applied Computing (SAC), Univ Cyprus, Limassol, CYPRUS, APR 08-12, 2019}},
	number-of-cited-references = {{46}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Kafshdar Goharshady, Amir/0000-0003-1702-6584}},
	organization = {{Assoc Comp Machinery Special Interest Grp Appl Comp}},
	pages = {{400-408}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{2}},
	title = {{The Treewidth of Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000474685800052}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{3}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3297280.3297322}}

@inproceedings{WOS:000675825200080,
	abstract = {{The practice of writing smart contracts for the Ethereum blockchain is
   quite recent and still in development. A blockchain developer should
   expect constant changes in the security software field, as new bugs and
   security risks are discovered, and new good practices are developed.
   Following the security practices accepted in the blockchain community is
   not enough to ensure the writing of secure smart contracts.
   The paper aims to study the practice of code cloning among the smart
   contracts by analyzing two corpora. The first corpus, the
   ``Smart-Corpus{''}, includes smart contracts already deployed in the
   Ethereum blockchain. The second corpus, the ``OpenZeppelin's Solidity
   Library{''}, is supervised by a community of developers who constantly
   take care to increase the security and efficiency of the smart contracts
   included in the corpus. From the comparative analysis of the corpora, we
   observe that the smart contracts developers frequently duplicate the
   code by cloning already existing smart contracts which are not part of
   the ``OpenZeppelin corpus{''}. In particular, we found that 79.1\% of
   smart contracts contain duplicated code and only 18.4\% of smart
   contracts reuse the code by implementing a smart corpus belonging to the
   OpenZeppelin repository.
   The paper discusses the advantages and the disadvantages of code
   duplication in the Ethereum blockchain ecosystem, and suggests to refer
   to the smart contracts of the OpenZeppelin's Solidity Library. The
   Ethereum blockchain community can indeed benefit from using the tested
   code presented in OpenZeppelin's Solidity Library to increase its
   security.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Pierro, GA (Corresponding Author), Ctr Inria, Lille Nord Europe, Lille, France. Pierro, Giuseppe Antonio, Ctr Inria, Lille Nord Europe, Lille, France. Tonelli, Roberto, Univ Cagliari, Dept Math \& Comp Sci, Cagliari, Italy.}},
	author = {Pierro, Giuseppe Antonio and Tonelli, Roberto},
	author-email = {{giuseppe.pierro@inria.fr roberto.tonelli@dsf.unica.it}},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR9HX}},
	doi = {{10.1109/SANER50967.2021.00089}},
	isbn = {{978-1-7281-9630-5}},
	keywords = {{code duplication; smart contract; Ethereum blockchain}},
	language = {{English}},
	note = {{28th IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER), ELECTR NETWORK, MAR 09-12, 2021}},
	number-of-cited-references = {{34}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Tech Council Software Engn}},
	pages = {{701-707}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Analysis of Source Code Duplication in Ethreum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000675825200080}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/SANER50967.2021.00089}}

@inproceedings{WOS:000546326300007,
	abstract = {{Reasoning about commutativity between data-structure operations is an
   important problem with applications including parallelizing compilers,
   optimistic parallelization and, more recently, Ethereum smart contracts.
   There have been research results on automatic generation of
   commutativity conditions, yet we are unaware of any fully automated
   technique to generate conditions that are both sound and effective.
   We have designed such a technique, driven by an algorithm that
   iteratively refines a conservative approximation of the commutativity
   (and non-commutativity) condition for a pair of methods into an
   increasingly precise version. The algorithm terminates if/when the
   entire state space has been considered, and can be aborted at any time
   to obtain a partial yet sound commutativity condition. We have
   generalized our work to left-/right-movers {[}27] and proved relative
   completeness. We describe aspects of our technique that lead to useful
   commutativity conditions, including how predicates are selected during
   refinement and heuristics that impact the output shape of the condition.
   We have implemented our technique in a prototype open-source tool
   SERVOIS. Our algorithm produces quantifier-free queries that are
   dispatched to a back-end SMT solver. We evaluate SERVOIS through two
   case studies: (i) We synthesize commutativity conditions for a range of
   data structures including Set, HashTable, Accumulator, Counter, and
   Stack. (ii) We consider an Ethereum smart contract called BlockKing, and
   show that SERVOIS can detect serious concurrency-related vulnerabilities
   and guide developers to construct robust and efficient implementations.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Bansal, K (Corresponding Author), Google Inc, New York, NY 10011 USA. Bansal, Kshitij; Tripp, Omer, Google Inc, New York, NY 10011 USA. Koskinen, Eric, Stevens Inst Technol, Hoboken, NJ 07030 USA.}},
	author = {Bansal, Kshitij and Koskinen, Eric and Tripp, Omer},
	author-email = {{kbk@google.com eric.koskinen@stevens.edu trippo@google.com}},
	booktitle = {{TOOLS AND ALGORITHMS FOR THE CONSTRUCTION AND ANALYSIS OF SYSTEMS, TACAS 2018, PT I}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP3FE}},
	doi = {{10.1007/978-3-319-89960-2\_7}},
	editor = {{Beyer, D and Huisman, M}},
	eissn = {{1611-3349}},
	funding-acknowledgement = {{NSFNational Science Foundation (NSF) {[}1228768]; NSF CCF Award {[}1421126, 1618542]}},
	funding-text = {{K. Bansal-This work was partially supported by NSF award \#1228768. Author was at New York University when part of the work was completed.; E. Koskinen-Support in part by NSF CCF Award \#1421126, and CCF Award \#1618542. Some of the research was done while author was at IBM Research.}},
	isbn = {{978-3-319-89960-2; 978-3-319-89959-6}},
	issn = {{0302-9743}},
	language = {{English}},
	note = {{24th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS) Held as Part of the 21st European Joint Conferences on Theory and Practice of Software (ETAPS), Thessaloniki, GREECE, APR 14-20, 2018}},
	number = {{I}},
	number-of-cited-references = {{33}},
	organization = {{Aristotle Univ Thessaloniki, Dept Informat}},
	pages = {{115-132}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{1}},
	title = {{Automatic Generation of Precise and Useful Commutativity Conditions}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000546326300007}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{10805}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-89960-2%5C_7}}

@inproceedings{WOS:000492033300035,
	abstract = {{Ethereum is still the most prominent platform for smart contracts. For
   the deployment of contracts on its blockchain, the so-called deployment
   code is executed by Ethereum's virtual machine. As it turns out,
   deployment code can do a lot more than merely deploying a contract.
   This paper identifies less-anticipated uses of contract deployment in
   Ethereum by analyzing the available blockchain data. In particular, we
   analyze the specifics of deployment code used beyond actually deploying
   a contract in a quantitative and qualitative manner. To this end, we
   identify code patterns in deployment code by distilling recurring code
   skeletons from all external transactions and internal messages that
   contain deployment code. Tracking the use of these patterns reveals a
   set of vulnerabilities in contracts targeted by skillfully crafted
   deployment code. We summarize the encountered exploitative cases of
   collateral use of deployment code and report respective quantities.
   Example scenarios illustrate the recent usage.
   Collateral use of deployment code starts to appear in the middle of 2018
   and becomes dominant among contract creations in autumn of 2018. We
   intend to raise awareness about the less obvious uses of deployment code
   and its potential security issues.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{di Angelo, M (Corresponding Author), Eurecom, Sophia Antipolis, France. di Angelo, M (Corresponding Author), Tech Univ Wien, Vienna, Austria. di Angelo, Monika; Salzer, Gernot, Eurecom, Sophia Antipolis, France. di Angelo, Monika; Salzer, Gernot, Tech Univ Wien, Vienna, Austria.}},
	author = {di Angelo, Monika and Salzer, Gernot},
	author-email = {{monika.diangelo@tuwien.ac.at gernot.salzer@tuwien.ac.at}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 10TH IFIP INTERNATIONAL CONFERENCE ON NEW TECHNOLOGIES, MOBILITY AND SECURITY (NTMS)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO0LX}},
	isbn = {{978-1-7281-1542-9}},
	issn = {{2157-4952}},
	keywords = {{analysis; deployment code; exploit; Ethereum; smart contract}},
	language = {{English}},
	note = {{10th IFIP International Conference on New Technologies, Mobility and Security (NTMS), SPAIN, JUN 24-26, 2019}},
	number-of-cited-references = {{9}},
	organization = {{IFIP; IEEE; IEEE Commun Soc; IFIP TC 6; AiR Inst; Vellore Inst Technol; CNRS; Telecom ParisTech; Efrei Paris; LiP 6}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science; Engineering}},
	series = {{International Conference on New Technologies Mobility and Security}},
	times-cited = {{0}},
	title = {{Collateral Use of Deployment Code for Smart Contracts in Ethereum}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000492033300035}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications; Computer Science, Theory \& Methods; Engineering, Electrical \& Electronic}},
	year = {{2019}}}

@inproceedings{WOS:000587590500069,
	abstract = {{The popularity of blockchain technology encourages organizations to use
   more blockchain features in mission critical processes such as trading,
   access control and computational public safety. Automation of processes
   with smart contracts is one of these features that significantly enlarge
   the scope of a blockchain implementation. Smart contracts help automate
   business processes by modeling business activities on the distributed
   ledger. Smart contracts are significantly different from other programs
   from a defect fixing and security issue handling perspective. The
   opportunity of fixing such issues is only available in the narrow window
   before registering the contract on to the blockchain. After a smart
   contract becomes a part of the chain, it is not possible to update or
   fix any issues. This distinct nature of smart contracts makes it
   essential to detect the program issues early on by paying attention to
   security smells. Security smells are clues that point to a deeper
   problem in the programming space.
   In this study, we review the literature and identify vulnerabilities
   that programmers and beneficiaries of smart contracts must avoid. We
   explain these security smells and categorize them based on their nature.
   We also review the applications that detect these vulnerabilities and
   provide information about their approach and coverage. Our main
   contribution is the evaluation of smart contracts as a platform or aid
   for mission critical applications such as access control platforms. We
   conducted this evaluation by identifying the issues related to smart
   contracts and informing the reader about the problem, challenges, and
   techniques. We conclude by defining future directions for our research.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Demir, M (Corresponding Author), Ryerson Univ, Dept Comp Sci, Toronto, ON, Canada. Demir, Mehmet; Alalfi, Manar; Ferworn, Alexander, Ryerson Univ, Dept Comp Sci, Toronto, ON, Canada. Turetken, Ozgur, Ryerson Univ, Ted Rogers Sch Informat Technol Management, Toronto, ON, Canada.}},
	author = {Demir, Mehmet and Alalfi, Manar and Turetken, Ozgur and Ferworn, Alexander},
	author-email = {{mehmet.demir@ryerson.ca manar.alalfi@ryerson.ca turetken@ryerson.ca aferworn@ryerson.ca}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 COMPANION OF THE 19TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS-C 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BQ3OW}},
	doi = {{10.1109/QRS-C.2019.00086}},
	isbn = {{978-1-7281-3925-8}},
	keywords = {{security smells; program analysis; blockchain; smart contracts}},
	language = {{English}},
	note = {{19th IEEE International Conference on Software Quality, Reliability and Security (QRS), Sofia, BULGARIA, JUL 22-26, 2019}},
	number-of-cited-references = {{16}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Reliabil Soc}},
	pages = {{442-449}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Alalfi, Manar/AAT-3091-2021 Turetken, Ozgur/P-2482-2017}},
	times-cited = {{0}},
	title = {{Security Smells in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000587590500069}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/QRS-C.2019.00086}}

@article{WOS:000685203900086,
	abstract = {{Callbacks are an effective programming discipline for implementing
   event-driven programming, especially in environments like Ethereum which
   forbid shared global state and concurrency. Callbacks allow a callee to
   delegate the execution back to the caller. Though effective, they can
   lead to subtle mistakes principally in open environments where callbacks
   can be added in a new code. Indeed, several high profile bugs in smart
   contracts exploit callbacks. We present the first static technique
   ensuring modularity in the presence of callbacks and apply it to verify
   prominent smart contracts. Modularity ensures that external calls to
   other contracts cannot affect the behavior of the contract. Importantly,
   modularity is guaranteed without restricting programming.
   In general, checking modularity is undecidable -even for programs
   without loops. This paper describes an effective technique for soundly
   ensuring modularity harnessing SMT solvers. The main idea is to define a
   constructive version of modularity using commutativity and projection
   operations on program segments. We believe that this approach is also
   accessible to programmers, since counterexamples to modularity can be
   generated automatically by the SMT solvers, allowing programmers to
   understand and fix the error.
   We implemented our approach in order to demonstrate the precision of the
   modularity analysis and applied it to real smart contracts, including a
   subset of the 150 most active contracts in Ethereum. Our implementation
   decompiles bytecode programs into an intermediate representation and
   then implements the modularity checking using SMT queries. Overall, we
   argue that our experimental results indicate that the method can be
   applied to many realistic contracts, and that it is able to prove
   modularity where other methods fail.}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Albert, E (Corresponding Author), Univ Complutense Madrid, Madrid, Spain. Albert, E (Corresponding Author), Inst Knowledge Technol, Valencia, Spain. Albert, Elvira; Rodriguez-Nunez, Clara; Rubio, Albert, Univ Complutense Madrid, Madrid, Spain. Albert, Elvira; Rubio, Albert, Inst Knowledge Technol, Valencia, Spain. Grossman, Shelly; Rinetzky, Noam; Sagiv, Mooly, Tel Aviv Univ, Tel Aviv, Israel.}},
	article-number = {{209}},
	author = {Albert, Elvira and Grossman, Shelly and Rinetzky, Noam and Rodriguez-Nunez, Clara and Rubio, Albert and Sagiv, Mooly},
	author-email = {{elvira@sip.ucm.es shellygr@mail.tau.ac.il maon@post.tau.ac.il clarrodr@ucm.es alberu04@ucm.es msagiv@acm.org}},
	da = {{2021-11-07}},
	doc-delivery-number = {{UA5LT}},
	doi = {{10.1145/3428277}},
	eissn = {{2475-1421}},
	funding-acknowledgement = {{Spanish MCIU; AEI; FEDER (EU)European Commission {[}RTI2018-094403-B-C31, RTI2018-094403-B-C33, S2018/TCS-4314]; Israeli Science Foundation (ISF)Israel Science Foundation {[}1810/18]; United States-Israel Binational Science Foundation (BSF)US-Israel Binational Science Foundation {[}2016260]; Blavatnik Interdisciplinary Cyber Research Center, Tel Aviv University; Pazy Foundation {[}347853669]; Israel Science Foundation (ISF)Israel Science Foundation {[}1996/18]}},
	funding-text = {{We would like to thank the anonymous referees for their comments that have helped improve the presentation and contents of this paper. This work was funded partially by the Spanish MCIU, AEI and FEDER (EU) projects RTI2018-094403-B-C31 and RTI2018-094403-B-C33, and by the CM project S2018/TCS-4314. This research was partially supported by the Israeli Science Foundation (ISF) grant No. 1810/18. This material is based upon work supported by the United States-Israel Binational Science Foundation (BSF) grant No. 2016260. The research was supported in part by the Blavatnik Interdisciplinary Cyber Research Center, Tel Aviv University, and Pazy Foundation grant No. 347853669; The Israel Science Foundation (ISF) grant No. 1996/18.}},
	journal = {{PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL}},
	journal-iso = {{P. ACM Program. Lang.}},
	keywords = {{program verification; program analysis; invariants; logic and verification; blockchain; smart contracts}},
	language = {{English}},
	month = {{NOV}},
	number-of-cited-references = {{46}},
	oa = {{gold}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Taming Callbacks for Smart Contract Modularity}},
	type = {{Article}},
	unique-id = {{WOS:000685203900086}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{4}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3428277}}

@article{WOS:000482728100001,
	abstract = {{Background: The protection of private data is a key responsibility for
   research studies that collect identifiable information from study
   participants. Limiting the scope of data collection and preventing
   secondary use of the data are effective strategies for managing these
   risks. An ideal framework for data collection would incorporate feature
   engineering, a process where secondary features are derived from
   sensitive raw data in a secure environment without a trusted third
   party.
   Objective: This study aimed to compare current approaches based on how
   they maintain data privacy and the practicality of their
   implementations. These approaches include traditional approaches that
   rely on trusted third parties, and cryptographic, secure hardware, and
   blockchain-based techniques.
   Methods: A set of properties were defined for evaluating each approach.
   A qualitative comparison was presented based on these properties. The
   evaluation of each approach was framed with a use case of sharing
   geolocation data for biomedical research.
   Results: We found that approaches that rely on a trusted third party for
   preserving participant privacy do not provide sufficiently strong
   guarantees that sensitive data will not be exposed in modern data
   ecosystems. Cryptographic techniques incorporate strong
   privacy-preserving paradigms but are appropriate only for select use
   cases or are currently limited because of computational complexity.
   Blockchain smart contracts alone are insufficient to provide data
   privacy because transactional data are public. Trusted execution
   environments (TEEs) may have hardware vulnerabilities and lack
   visibility into how data are processed. Hybrid approaches combining
   blockchain and cryptographic techniques or blockchain and TEEs provide
   promising frameworks for privacy preservation. For reference, we provide
   a software implementation where users can privately share features of
   their geolocation data using the hybrid approach combining blockchain
   with TEEs as a supplement.
   Conclusions: Blockchain technology and smart contracts enable the
   development of new privacy-preserving feature engineering methods by
   obviating dependence on trusted parties and providing immutable,
   auditable data processing workflows. The overlap between blockchain and
   cryptographic techniques or blockchain and secure hardware technologies
   are promising fields for addressing important data privacy needs. Hybrid
   blockchain and TEE frameworks currently provide practical tools for
   implementing experimental privacy-preserving applications.}},
	address = {{130 QUEENS QUAY E, STE 1102, TORONTO, ON M5A 0P6, CANADA}},
	affiliation = {{Zimmerman, N (Corresponding Author), Icahn Sch Med Mt Sinai, Ctr Biomed Blockchain Res, 10-234 Marshall St, Redwood City, CA 94063 USA. Jones, Michael; Johnson, Matthew; Shervey, Mark; Dudley, Joel T.; Zimmerman, Noah, Icahn Sch Med Mt Sinai, Ctr Biomed Blockchain Res, 10-234 Marshall St, Redwood City, CA 94063 USA. Jones, Michael; Johnson, Matthew; Shervey, Mark; Dudley, Joel T.; Zimmerman, Noah, Icahn Sch Med Mt Sinai, Inst Next Generat Healthcare, New York, NY 10029 USA.}},
	article-number = {{e13600}},
	author = {Jones, Michael and Johnson, Matthew and Shervey, Mark and Dudley, Joel T. and Zimmerman, Noah},
	author-email = {{noah.zimmerman@mssm.edu}},
	da = {{2021-11-07}},
	doc-delivery-number = {{IT3BS}},
	doi = {{10.2196/13600}},
	funding-acknowledgement = {{Institute for Next Generation Healthcare at the Icahn School of Medicine at Mount Sinai; Harris Family Charitable Foundation}},
	funding-text = {{This work was supported by the Institute for Next Generation Healthcare at the Icahn School of Medicine at Mount Sinai and a gift from the Harris Family Charitable Foundation (to JTD).}},
	issn = {{1438-8871}},
	journal = {{JOURNAL OF MEDICAL INTERNET RESEARCH}},
	journal-iso = {{J. Med. Internet Res.}},
	keywords = {{privacy; machine learning; confidentiality; data collection; mobile health; feature engineering; geolocation; blockchain; smart contract; cryptography; trusted execution environment}},
	language = {{English}},
	month = {{AUG 14}},
	number = {{8}},
	number-of-cited-references = {{61}},
	oa = {{Green Published, gold, Green Submitted}},
	orcid-numbers = {{Zimmerman, Noah/0000-0003-3391-2623 Jones, Michael/0000-0002-6305-3893 Johnson, Matthew/0000-0001-7056-2824}},
	publisher = {{JMIR PUBLICATIONS, INC}},
	research-areas = {{Health Care Sciences \& Services; Medical Informatics}},
	times-cited = {{7}},
	title = {{Privacy-Preserving Methods for Feature Engineering Using Blockchain: Review, Evaluation, and Proof of Concept}},
	type = {{Review}},
	unique-id = {{WOS:000482728100001}},
	usage-count-last-180-days = {{8}},
	usage-count-since-2013 = {{20}},
	volume = {{21}},
	web-of-science-categories = {{Health Care Sciences \& Services; Medical Informatics}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.2196/13600}}
