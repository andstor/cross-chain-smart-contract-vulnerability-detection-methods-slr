%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Andr√© Storhaug at 2021-11-16 04:20:53 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{WOS:000525389200002,
	abstract = {{In the last decade, smart contract security issues lead to tremendous
   losses, which has attracted increasing public attention both in industry
   and in academia. Researchers have embarked on efforts with logic rules,
   symbolic analysis, and formal analysis to achieve encouraging results in
   smart contract vulnerability detection tasks. However, the existing
   detection tools are far from satisfactory. In this paper, we attempt to
   utilize the deep learning-based approach, namely bidirectional
   long-short term memory with attention mechanism (BLSTM-ATT), aiming to
   precisely detect reentrancy bugs. Furthermore, we propose contract
   snippet representations for smart contracts, which contributes to
   capturing essential semantic information and control flow dependencies.
   Our extensive experimental studies on over 42,000 real-world smart
   contracts show that our proposed model and contract snippet
   representations significantly outperform state-of-the-art methods. In
   addition, this work proves that it is practical to apply deep
   learning-based technology on smart contract vulnerability detection,
   which is able to promote future research towards this area.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Liu, ZG (Corresponding Author), Zhejiang Gongshang Univ, Sch Comp \& Informat Engn, Hangzhou 310018, Peoples R China. Qian, Peng; Liu, Zhenguang; Wang, Xun, Zhejiang Gongshang Univ, Sch Comp \& Informat Engn, Hangzhou 310018, Peoples R China. He, Qinming, Zhejiang Univ, Dept Comp Sci, Hangzhou 310027, Peoples R China. Zimmermann, Roger, Natl Univ Singapore, Sch Comp, Singapore 117417, Singapore.}},
	author = {Qian, Peng and Liu, Zhenguang and He, Qinming and Zimmermann, Roger and Wang, Xun},
	author-email = {{lzg@zjgsu.edu.cn}},
	bdsk-color = {6},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{LC5SE}},
	doi = {{10.1109/ACCESS.2020.2969429}},
	funding-acknowledgement = {{National Key Research and Development Program of China {[}2017YFB1401300, 2017YFB1401304]; National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61902348]; Natural Science Foundation of Zhejiang Province, ChinaNatural Science Foundation of Zhejiang Province {[}LQ19F020001]; Science and Technology Innovation Program of Zhejiang Province, China {[}2019R408070]; General Scienti\~{}c Research Projects of Zhejiang Provincial Department of Education, China {[}Y201942758]}},
	funding-text = {{This work was supported in part by the National Key Research and Development Program of China under Grant 2017YFB1401300 and Grant 2017YFB1401304, in part by the National Natural Science Foundation of China Grant 61902348, in part by the Natural Science Foundation of Zhejiang Province, China, Grant LQ19F020001, in part by the Science and Technology Innovation Program of Zhejiang Province, China, under Grant 2019R408070, and in part by the General Scienti\~{}c Research Projects of Zhejiang Provincial Department of Education, China, under Grant Y201942758.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Blockchain; smart contract; deep learning; sequential models; vulnerability detection}},
	language = {{English}},
	number-of-cited-references = {{40}},
	oa = {{gold}},
	orcid-numbers = {{Qian, Peng/0000-0003-4934-5811}},
	pages = {{19685-19695}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{7}},
	title = {{Towards Automated Reentrancy Detection for Smart Contracts Based on Sequential Models}},
	type = {{Article}},
	unique-id = {{WOS:000525389200002}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{6}},
	volume = {{8}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2020.2969429}}

@inproceedings{WOS:000637244600080,
	abstract = {{Reentrancy bugs in smart contracts caused a devastating financial loss
   in 2016, considered as one of the most severe vulnerabilities in smart
   contracts. Most of the existing general-purpose security tools for smart
   contracts have claimed to be able to detect reentrancy bugs. In this
   paper, we present Clairvoyance, a cross-function and cross-contract
   static analysis by identifying infeasible paths to detect reentrancy
   vulnerabilities in smart contracts. To reduce FPs, we have summarized
   five major path protective techniques (PPTs) to support fast yet precise
   path feasibility checking. We have implemented our approach and compared
   Clairvoyance with three state-of-the-art tools on 17770 real-worlds
   contracts. The results show that Clairvoyance yields the best detection
   accuracy among all the tools.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Ye, JM (Corresponding Author), Univ Sci \& Technol China, Hefei, Anhui, Peoples R China. Ye, Jiaming; Ma, Mingliang; Xue, Yinxing, Univ Sci \& Technol China, Hefei, Anhui, Peoples R China. Lin, Yun, Natl Univ Singapore, Singapore, Singapore. Sui, Yulei, Univ Technol Sydney, Sydney, NSW, Australia.}},
	author = {Ye, Jiaming and Ma, Mingliang and Lin, Yun and Sui, Yulei and Xue, Yinxing},
	author-email = {{sa517462@mail.ustc.edu.cn sa517245@mail.ustc.edu.cn llmhyy@gmail.com yulei.sui@uts.edu.au yxxue@ustc.edu.cn}},
	bdsk-color = {5},
	book-group-author = {{IEEE}},
	booktitle = {{2020 ACM/IEEE 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2020)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 20:48:34 +0100},
	doc-delivery-number = {{BR2CT}},
	doi = {{10.1145/3377812.3390908}},
	issn = {{0270-5257}},
	keywords = {{reentrancy detection; path feasibility analysis; cross contract analysis; smart contract security}},
	language = {{English}},
	note = {{42nd ACM/IEEE International Conference on Software Engineering - Companion Proceedings (ICSE-Companion), ELECTR NETWORK, JUN 27-JUL 19, 2020}},
	number-of-cited-references = {{2}},
	oa = {{Green Published}},
	organization = {{Assoc Comp Machinery; IEEE; IEEE Comp Soc; IEEE Comp Soc Tech Comm Software Engn; ACM Special Interest Grp Software Engn; Korean Inst Informat Scientists \& Engineers; Natl Sci Fdn; Facebook; N Carolina State Univ; Microsoft; Samsung; LG Elect; KAIST; SK Hynix; NAVER; Suresoft; HITACHI; Google}},
	pages = {{274-275}},
	publisher = {{IEEE}},
	rating = {2},
	read = {1},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Ye, Jiaming/AAX-4088-2021}},
	series = {{International Conference on Software Engineering}},
	times-cited = {{0}},
	title = {{Clairvoyance: Cross-contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000637244600080}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3377812.3390908},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAcYXJ0aWNsZXMvMzM3NzgxMi4zMzkwOTA4LnBkZk8RAc4AAAAAAc4AAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xMzMzc3ODEyLjMzOTA5MDgucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAwAACiBjdQAAAAAAAAAAAAAAAAAIYXJ0aWNsZXMAAgBmLzpVc2VyczphbmRyZXN0b3JoYXVnOlByb2dyYW1taW5nOlByb2plY3RzOm1hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQ6ZGF0YTphcnRpY2xlczozMzc3ODEyLjMzOTA5MDgucGRmAA4AKAATADMAMwA3ADcAOAAxADIALgAzADMAOQAwADkAMAA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBkVXNlcnMvYW5kcmVzdG9yaGF1Zy9Qcm9ncmFtbWluZy9Qcm9qZWN0cy9tYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0L2RhdGEvYXJ0aWNsZXMvMzM3NzgxMi4zMzkwOTA4LnBkZgATAAEvAAAVAAIAFP//AAAACAANABoAJABDAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAhU=}}

@inproceedings{WOS:000450109000017,
	abstract = {{Smart contracts enabled a new way to perform cryptocurrency transactions
   over blockchains. While this emerging technique introduces
   free-of-conflicts and transparency, smart contract itself is vulnerable.
   As a special form of computer program, smart contract can hardly get rid
   of bugs. Even worse, an exploitable security bug can lead to
   catastrophic consequences, e.g., loss of cryptocurrency/money. In this
   demo paper, we focus on the most common type of security bugs in smart
   contracts, i.e., reentrancy bug, which caused the famous DAO attack with
   a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based
   analyzer to automatically detect reentrancy bugs in Ethereum smart
   contracts. Specifically, ReGuard performs fuzz testing on smart
   contracts by iteratively generating random but diverse transactions.
   Based on the runtime traces, ReGuard further dynamically identifies
   reentrancy vulnerabilities. In the preliminary evaluation, we have
   analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7
   previously unreported reentrancy bugs. A demo video of ReGuard is at
   https://youtu.be/XxJ3\_-cmUiY.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Chen, Z (Corresponding Author), Peking Univ, Beijing, Peoples R China. Liu, Chao; Chen, Zhong, Peking Univ, Beijing, Peoples R China. Liu, Han; Cao, Zhao; Chen, Bangdao; Roscoe, Bill, Chieftin Lab, Shenzhen, Peoples R China. Liu, Han, Tsinghua Univ, Beijing, Peoples R China. Roscoe, Bill, Univ Oxford, Oxford, England.}},
	author = {Liu, Chao and Liu, Han and Cao, Zhao and Chen, Zhong and Chen, Bangdao and Roscoe, Bill},
	author-email = {{liuchao\_cs@pku.edu.cn liuhan2017@mail.tsinghua.edu.cn zhongchen@pku.edu.cn}},
	bdsk-color = {7},
	book-group-author = {{IEEE}},
	booktitle = {{PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING - COMPANION (ICSE-COMPANION}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 23:30:39 +0100},
	doc-delivery-number = {{BL3YB}},
	doi = {{10.1145/3183440.3183495}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61672060]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2017M620785]}},
	funding-text = {{The authors would like to thank Thomas Gibson-Robinson, Philippa J. Hopcroft and Youcheng Sun for their help in preparing the tool. This work is supported by National Natural Science Foundation of China under the grant No.: 61672060 and China Postdoctoral Science Foundation under the grant No.: 2017M620785.}},
	isbn = {{978-1-4503-5663-3}},
	issn = {{2574-1926}},
	keywords = {{Smart contract; reentrancy bug; dynamic analysis}},
	language = {{English}},
	note = {{40th ACM/IEEE International Conference on Software Engineering (ICSE), Gothenburg, SWEDEN, MAY 27-JUN 03, 2018}},
	number-of-cited-references = {{12}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; Microsoft Res}},
	pages = {{65-68}},
	publisher = {{IEEE}},
	read = {1},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	series = {{Proceedings of the IEEE-ACM International Conference on Software Engineering Companion}},
	times-cited = {{41}},
	title = {{ReGuard: Finding Reentrancy Bugs in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000450109000017}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{11}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1145/3183440.3183495}}

@inproceedings{WOS:000651313500158,
	abstract = {{Ethereum has become a widely used platform to enable secure,
   Blockchain-based financial and business transactions. However, many
   identified bugs and vulnerabilities in smart contracts have led to
   serious financial losses, which raises serious concerns about smart
   contract security. Thus, there is a significant need to better maintain
   smart contract code and ensure its high reliability.
   In this research: (1) Firstly, we propose an automated deep learning
   based approach to learn structural code embeddings of smart contracts in
   Solidity, which is useful for clone detection, bug detection and
   contract validation on smart contracts. We apply our approach to more
   than 22K solidity contracts collected from the Ethereum blockchain,
   results show that the clone ratio of solidity code is at around 90\%,
   much higher than traditional software. We collect a list of 52 known
   buggy smart contracts belonging to 10 kinds of common vulnerabilities as
   our bug database. Our approach can identify more than 1000 clone related
   bugs based on our bug databases efficiently and accurately. (2)
   Secondly, according to developers' feedback, we have implemented the
   approach in a web-based tool, named SmartEmbed, to facilitate Solidity
   developers for using our approach. Our tool can assist Solidity
   developers to efficiently identify repetitive smart contracts in the
   existing Ethereum blockchain, as well as checking their contract against
   a known set of bugs. which can help to improve the users' confidence in
   the reliability of the contract. We optimize the implementations of
   SmartEmbed which is sufficient in supporting developers in real-time for
   practical uses. The Ethereum ecosystem as well as the individual
   Solidity developer can both benefit from our research.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Gao, ZP (Corresponding Author), Monash Univ, Clayton, Vic, Australia. Gao, Zhipeng, Monash Univ, Clayton, Vic, Australia.}},
	author = {Gao, Zhipeng},
	bdsk-color = {6},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2020 35TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2020)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{BR4HE}},
	doi = {{10.1145/3324884.3418918}},
	isbn = {{978-1-4503-6768-4}},
	issn = {{1527-1366}},
	language = {{English}},
	note = {{35th IEEE/ACM International Conference on Automated Software Engineering (ASE), ELECTR NETWORK, SEP 21-25, 2020}},
	number-of-cited-references = {{29}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; Monash Univ; NASA Ames Rese Ctr; IEEE Tech Council Software Engn; ACM SIGAI; ACM Special Interest Grp Software Engn; Deakin Univ}},
	pages = {{1400-1402}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Automation \& Control Systems; Computer Science; Engineering}},
	series = {{IEEE ACM International Conference on Automated Software Engineering}},
	times-cited = {{0}},
	title = {{When Deep Learning Meets Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000651313500158}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Automation \& Control Systems; Computer Science, Software Engineering; Engineering, Electrical \& Electronic}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3324884.3418918}}

@inproceedings{WOS:000662832600005,
	abstract = {{Blockchain is deeply integrated into the vertical industry, and
   gradually forms an application ecosphere of blockchain in various
   industries. However, the security incidents of blockchain occur
   frequently, and especially smart contracts have become the
   badly-disastered area. So avoiding security incidents caused by smart
   contracts has become an essential topic for blockchain developing. Up to
   now, there is not generic method for the security auditing of smart
   contracts and most researchers have to use existing vulnerability
   detection technology. To reduce the high false rate of smart contract
   vulnerability detection, we use ReJection, a detection method based on
   abstract syntax tree (AST), to focus on the reentrancy vulnerability
   with obvious harm and features in smart contracts. ReJection consists of
   four steps. Firstly, ReJection obtains the AST corresponding to the
   contract by the smart contract compiler solc. Then, AST is preprocessed
   to eliminate redundant information. Thirdly, ReJection traverses the
   nodes of the AST and records the notations related to reentrancy
   vulnerabilities during the traversal, such as Danger-Transfer function,
   Checks-Effects-Interactions pattern and mutex mechanism. Finally,
   ReJection uses record information and predefined rules to determine
   whether the reentrancy vulnerability is occurred. ReJection is
   implemented based on Slither, which is an open-source smart contract
   vulnerability detection tool. Furthermore, we also use the open-source
   smart contract code as the test program to compare experimental results
   to verify the effects with the ReJection and Slither. The result
   highlights that the ReJection has higher detection accuracy for
   reentrancy vulnerability.}},
	address = {{152 BEACH ROAD, \#21-01/04 GATEWAY EAST, SINGAPORE, 189721, SINGAPORE}},
	affiliation = {{Ma, K (Corresponding Author), China Acad Informat \& Commun Technol, Internet Ctr, Inst Technol \& Stand Res, Beijing 100191, Peoples R China. Ma, Rui; Jian, Zefeng; Chen, Guangyuan; Chen, Yujia, Beijing Inst Technol, Sch Comp Sci \& Technol, Beijing 100081, Peoples R China. Ma, Ke, China Acad Informat \& Commun Technol, Internet Ctr, Inst Technol \& Stand Res, Beijing 100191, Peoples R China.}},
	author = {Ma, Rui and Jian, Zefeng and Chen, Guangyuan and Ma, Ke and Chen, Yujia},
	author-email = {{make@caict.ac.cn}},
	bdsk-color = {5},
	booktitle = {{TRUSTED COMPUTING AND INFORMATION SECURITY, CTCIS 2019}},
	da = {{2021-11-07}},
	date-modified = {2021-11-14 01:35:51 +0100},
	doc-delivery-number = {{BR6PS}},
	doi = {{10.1007/978-981-15-3418-8\_5}},
	editor = {{Han, W and Zhu, L and Yan, F}},
	eissn = {{1865-0937}},
	isbn = {{978-981-15-3418-8; 978-981-15-3417-1}},
	issn = {{1865-0929}},
	keywords = {{Vulnerability detection; Smart contract; Abstract syntax tree; Reentrancy vulnerability}},
	language = {{English}},
	note = {{13th Chinese Conference on Trusted Computing and Information Security (CTCIS), Shanghai, PEOPLES R CHINA, OCT 24-27, 2019}},
	number-of-cited-references = {{10}},
	organization = {{China Comp Federat; Fudan Univ}},
	pages = {{58-71}},
	publisher = {{SPRINGER-VERLAG SINGAPORE PTE LTD}},
	read = {1},
	research-areas = {{Computer Science}},
	series = {{Communications in Computer and Information Science}},
	times-cited = {{0}},
	title = {{ReJection: A AST-Based Reentrancy Vulnerability Detection Method}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000662832600005}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{1149}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1007/978-981-15-3418-8%5C_5},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA1YXJ0aWNsZXMvMjAyMF9Cb29rX1RydXN0ZWRDb21wdXRpbmdBbmRJbmZvcm1hdGlvbi5wZGZPEQI0AAAAAAI0AAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fMjAyMF9Cb29rX1RydXN0ZWRDI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAMAAAogY3UAAAAAAAAAAAAAAAAACGFydGljbGVzAAIAfy86VXNlcnM6YW5kcmVzdG9yaGF1ZzpQcm9ncmFtbWluZzpQcm9qZWN0czptYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0OmRhdGE6YXJ0aWNsZXM6MjAyMF9Cb29rX1RydXN0ZWRDb21wdXRpbmdBbmRJbmZvcm1hdGlvbi5wZGYAAA4AWgAsADIAMAAyADAAXwBCAG8AbwBrAF8AVAByAHUAcwB0AGUAZABDAG8AbQBwAHUAdABpAG4AZwBBAG4AZABJAG4AZgBvAHIAbQBhAHQAaQBvAG4ALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAH1Vc2Vycy9hbmRyZXN0b3JoYXVnL1Byb2dyYW1taW5nL1Byb2plY3RzL21hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQvZGF0YS9hcnRpY2xlcy8yMDIwX0Jvb2tfVHJ1c3RlZENvbXB1dGluZ0FuZEluZm9ybWF0aW9uLnBkZgAAEwABLwAAFQACABT//wAAAAgADQAaACQAXAAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAKU}}

@inproceedings{WOS:000454741800002,
	abstract = {{Ethereum is a major blockchain-based platform for smart contracts -
   Turing complete programs that are executed in a decentralized network
   and usually manipulate digital units of value. Solidity is the most
   mature high-level smart contract language. Ethereum is a hostile
   execution environment, where anonymous attackers exploit bugs for
   immediate financial gain. Developers have a very limited ability to
   patch deployed contracts. Hackers steal up to tens of millions of
   dollars from flawed contracts, a well-known example being ``The DAO{''},
   broken in June 2016. Advice on secure Ethereum programming practices is
   spread out across blogs, papers, and tutorials. Many sources are
   outdated due to a rapid pace of development in this field. Automated
   vulnerability detection tools, which help detect potentially problematic
   language constructs, are still underdeveloped in this area.
   We provide a comprehensive classification of code issues in Solidity and
   implement SmartCheck - an extensible static analysis tool that detects
   them(1). SmartCheck translates Solidity source code into an XML-based
   intermediate representation and checks it against XPath patterns. We
   evaluated our tool on a big dataset of real-world contracts and compared
   the results with manual audit on three contracts. Our tool reflects the
   current state of knowledge on Solidity vulnerabilities and shows
   significant improvements over alternatives. SmartCheck has its
   limitations, as detection of some bugs requires more sophisticated
   techniques such as taint analysis or even manual audit. We believe
   though that a static analyzer should be an essential part of contract
   developers' toolbox, letting them fix simple bugs fast and allocate more
   effort to complex issues.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Tikhomirov, S (Corresponding Author), Univ Luxembourg, SnT, Esch Sur Alzette, Luxembourg. Tikhomirov, Sergei, Univ Luxembourg, SnT, Esch Sur Alzette, Luxembourg. Voskresenskaya, Ekaterina; Ivanitskiy, Ivan; Takhaviev, Ramil; Marchenko, Evgeny; Alexandrov, Yaroslav, SmartDec, Moscow, Russia.}},
	author = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},
	author-email = {{sergey.s.tikhomirov@gmail.com voskresenskaya@smartdec.net ivanitskiy@smartdec.net tahaviev@smartdec.net marchenko@smartdec.net alexandrov@smartdec.net}},
	bdsk-color = {5},
	book-group-author = {{IEEE}},
	booktitle = {{2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 20:49:22 +0100},
	doc-delivery-number = {{BL6YE}},
	doi = {{10.1145/3194113.3194115}},
	isbn = {{978-1-4503-5726-5}},
	keywords = {{Ethereum; Solidity; smart contracts; static analysis; bug detection}},
	language = {{English}},
	note = {{1st ACM/IEEE International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB), Gothenburg, SWEDEN, MAY 27-JUN 03, 2018}},
	number-of-cited-references = {{33}},
	organization = {{Assoc Comp Machinery; IEEE Comp Soc; Assoc Comp Machinery Special Interest Grp Software Engn; IEEE Tech Council Software Engn; IEEE}},
	pages = {{9-16}},
	publisher = {{IEEE}},
	read = {1},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	times-cited = {{72}},
	title = {{SmartCheck: Static Analysis of Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000454741800002}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{14}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2018}},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBDYXJ0aWNsZXMvU21hcnRDaGVjayBTdGF0aWMgQW5hbHlzaXMgb2YgRXRoZXJldW0gU21hcnQgQ29udHJhY3RzLnBkZk8RAmwAAAAAAmwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////x9TbWFydENoZWNrIFN0YXRpYyAjRkZGRkZGRkYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAwAACiBjdQAAAAAAAAAAAAAAAAAIYXJ0aWNsZXMAAgCNLzpVc2VyczphbmRyZXN0b3JoYXVnOlByb2dyYW1taW5nOlByb2plY3RzOm1hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQ6ZGF0YTphcnRpY2xlczpTbWFydENoZWNrIFN0YXRpYyBBbmFseXNpcyBvZiBFdGhlcmV1bSBTbWFydCBDb250cmFjdHMucGRmAAAOAHYAOgBTAG0AYQByAHQAQwBoAGUAYwBrACAAUwB0AGEAdABpAGMAIABBAG4AYQBsAHkAcwBpAHMAIABvAGYAIABFAHQAaABlAHIAZQB1AG0AIABTAG0AYQByAHQAIABDAG8AbgB0AHIAYQBjAHQAcwAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAi1VzZXJzL2FuZHJlc3RvcmhhdWcvUHJvZ3JhbW1pbmcvUHJvamVjdHMvbWFzdGVyLXByZWxpbWluYXJ5LXJlcG9ydC9kYXRhL2FydGljbGVzL1NtYXJ0Q2hlY2sgU3RhdGljIEFuYWx5c2lzIG9mIEV0aGVyZXVtIFNtYXJ0IENvbnRyYWN0cy5wZGYAABMAAS8AABUAAgAU//8AAAAIAA0AGgAkAGoAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAC2g==},
	bdsk-url-1 = {https://doi.org/10.1145/3194113.3194115}}

@inproceedings{WOS:000542117600042,
	abstract = {{Smart contracts are executable programs that enable the building of a
   programmable trust mechanism between multiple entities without the need
   of a trusted third-party. At the time of this writing, there were over
   10 million smart contracts deployed on the Ethereum networks and this
   number continues to grow at a rapid pace. Smart contracts are often
   written in a Turing-complete programming language called Solidity, which
   is not easy to audit for subtle errors. Further, since smart contracts
   are immutable, errors have led to attacks resulting in losses of
   cryptocurrency worth 100s of millions of USD and reputational damage.
   Unfortunately, manual security analyses do not scale with size and
   number of smart contracts. Automated and scalable mechanisms are
   essential if smart contracts are to gain main-stream acceptance.
   Researchers have developed several security scanners in the past couple
   of years. However, many of these analyzer either do not scale well, or
   if they do, produce many false positives. This issue is exacerbated when
   bugs are triggered only after a series of interactions with the
   functions of the contractunder-test. A depth-n vulnerability, refers to
   a vulnerability that requires invoking a specific sequence of n
   functions to trigger. Depth-n vulnerabilities are time-consuming to
   detect by existing automated analyzers, because of the combinatorial
   explosion of sequences of functions that could be executed on smart
   contracts.
   In this paper, we present a technique to analyze depth-n vulnerabilities
   in an efficient and scalable way by combining symbolic execution and
   data dependency analysis. A significant advantage of combining symbolic
   with static analysis is that it scales much better than symbolic alone
   and does not have the problem of false positive that static analysis
   tools typically have. We have implemented our technique in a tool called
   MPro, a scalable and automated smart contract analyzer based on the
   existing symbolic analysis tool Mythril-Classic and the static analysis
   tool Slither. We analyzed 100 randomly chosen smart contracts on MPro
   and our evaluation shows that MPro is about n-times faster than
   Mythril-Classic for detecting depth-n vulnerabilities, while preserving
   all the detection capabilities of Mythril-Classic.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Zhang, W (Corresponding Author), Univ Waterloo, Waterloo, ON, Canada. Zhang, William; Ganesh, Vijay, Univ Waterloo, Waterloo, ON, Canada. Banescu, Sebastian; Pasos, Leodardo; Stewart, Steven, Quantstamp Inc, Blockchain Dev Labs, San Francisco, CA USA.}},
	author = {Zhang, William and Ganesh, Vijay and Banescu, Sebastian and Pasos, Leodardo and Stewart, Steven},
	author-email = {{william.zhang@waterloo.ca vijay.ganesh@waterloo.ca sebi@quatnstamp.com leo@quatnstamp.com steven@quatnstamp.com}},
	bdsk-color = {5},
	booktitle = {{2019 IEEE 30TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 20:49:09 +0100},
	doc-delivery-number = {{BP2EH}},
	doi = {{10.1109/ISSRE.2019.00052}},
	editor = {{Wolter, K and Schieferdecker, I and Gallina, B and Cukier, M and Natella, R and Ivaki, N and Laranjeiro, N}},
	isbn = {{978-1-7281-4982-0}},
	issn = {{1071-9458}},
	keywords = {{Blockchain; Smart Contract; Symbolic Execution; Static Analysis}},
	language = {{English}},
	note = {{30th IEEE International Symposium on Software Reliability Engineering (ISSRE), Berlin, GERMANY, OCT 28-31, 2019}},
	number-of-cited-references = {{18}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Ganesh, Vijay/0000-0002-6029-2047}},
	organization = {{IEEE; IEEE Comp Soc; Bosch; Concordia; iRights Lab; German Testing Board e V; Verteilte Intelligente Systeme e V; IEEE Reliablil Soc}},
	pages = {{456-462}},
	publisher = {{IEEE}},
	read = {1},
	research-areas = {{Computer Science; Engineering}},
	series = {{Proceedings International Symposium on Software Reliability Engineering}},
	times-cited = {{1}},
	title = {{MPro: Combining Static and Symbolic Analysis for Scalable Testing of Smart Contract}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000542117600042}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering; Engineering, Electrical \& Electronic}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ISSRE.2019.00052},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBfYXJ0aWNsZXMvTVByb19Db21iaW5pbmdfU3RhdGljX2FuZF9TeW1ib2xpY19BbmFseXNpc19mb3JfU2NhbGFibGVfVGVzdGluZ19vZl9TbWFydF9Db250cmFjdC5wZGZPEQLcAAAAAALcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fTVByb19Db21iaW5pbmdfU3RhI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAMAAAogY3UAAAAAAAAAAAAAAAAACGFydGljbGVzAAIAqS86VXNlcnM6YW5kcmVzdG9yaGF1ZzpQcm9ncmFtbWluZzpQcm9qZWN0czptYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0OmRhdGE6YXJ0aWNsZXM6TVByb19Db21iaW5pbmdfU3RhdGljX2FuZF9TeW1ib2xpY19BbmFseXNpc19mb3JfU2NhbGFibGVfVGVzdGluZ19vZl9TbWFydF9Db250cmFjdC5wZGYAAA4ArgBWAE0AUAByAG8AXwBDAG8AbQBiAGkAbgBpAG4AZwBfAFMAdABhAHQAaQBjAF8AYQBuAGQAXwBTAHkAbQBiAG8AbABpAGMAXwBBAG4AYQBsAHkAcwBpAHMAXwBmAG8AcgBfAFMAYwBhAGwAYQBiAGwAZQBfAFQAZQBzAHQAaQBuAGcAXwBvAGYAXwBTAG0AYQByAHQAXwBDAG8AbgB0AHIAYQBjAHQALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAKdVc2Vycy9hbmRyZXN0b3JoYXVnL1Byb2dyYW1taW5nL1Byb2plY3RzL21hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQvZGF0YS9hcnRpY2xlcy9NUHJvX0NvbWJpbmluZ19TdGF0aWNfYW5kX1N5bWJvbGljX0FuYWx5c2lzX2Zvcl9TY2FsYWJsZV9UZXN0aW5nX29mX1NtYXJ0X0NvbnRyYWN0LnBkZgAAEwABLwAAFQACABT//wAAAAgADQAaACQAhgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAANm}}

@article{WOS:000546538400002,
	abstract = {{The smart contracts deployed in Ethereum carry huge amounts of virtual
   coins. However, there are vulnerabilities in some of these smart
   contracts, which makes them vulnerable to malicious attacks. Due to the
   characteristics of blockchain, such vulnerable contracts are difficult
   to be revoked. In order to prevent vulnerable contracts, it is very
   important to detect the loopholes in these contracts before their
   deployment. In this paper, we focus on three vulnerabilities of smart
   contract:has\_short\_address,has\_flowsandis\_greedy. For the three
   kinds of vulnerabilities, we propose slicing matrix, a new method to
   extract vulnerability feature, and construct three vulnerability
   detection models for comparison. The experimental results show that the
   detection accuracy based on neural network and slice matrix is better
   than that based on neural network and opcode features. In other words,
   slice matrix can improve the accuracy of vulnerable contract detection.
   Among our three detection models, the model based on random forest and
   opcode features performs best.}},
	address = {{VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS}},
	affiliation = {{Li, J (Corresponding Author), Guangzhou Univ, Coll Comp Sci \& Network Engn, Guangzhou, Peoples R China. Xing, Cipai; Chen, Zhuorong; Chen, Lexin; Li, Jin, Guangzhou Univ, Coll Comp Sci \& Network Engn, Guangzhou, Peoples R China. Guo, Xiaojie, Nankai Univ, Coll Comp Sci, Tianjin, Peoples R China. Zheng, Zibin, Sun Yat Sen Univ, Sch Data \& Comp Sci, Guangzhou, Peoples R China.}},
	author = {Xing, Cipai and Chen, Zhuorong and Chen, Lexin and Guo, Xiaojie and Zheng, Zibin and Li, Jin},
	author-email = {{lijin@gzhu.edu.cn}},
	bdsk-color = {6},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{MH2BY}},
	doi = {{10.1007/s11276-020-02379-z}},
	early-access-date = {{JUL 2020}},
	eissn = {{1572-8196}},
	issn = {{1022-0038}},
	journal = {{WIRELESS NETWORKS}},
	journal-iso = {{Wirel. Netw.}},
	keywords = {{Smart contract; Slice matrix; Vulnerability; Multi-label classification; Ethereum}},
	language = {{English}},
	number-of-cited-references = {{30}},
	publisher = {{SPRINGER}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{2}},
	title = {{A new scheme of vulnerability analysis in smart contract with machine learning}},
	type = {{Article; Early Access}},
	unique-id = {{WOS:000546538400002}},
	usage-count-last-180-days = {{15}},
	usage-count-since-2013 = {{21}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	bdsk-url-1 = {https://doi.org/10.1007/s11276-020-02379-z}}

@article{WOS:000484100100001,
	abstract = {{Ethereum is one of the currently popular trading platform, where any one
   can exchange, buy, or sell cryptocurrencies. Smart contract, a computer
   program, can help Ethereum to encode rules or scripts for processing
   transactions. Because the smart contract usually handles large number of
   cryptocurrencies worth billions of dollars apiece, its security has
   gained considerable attention. In this paper, we first investigate the
   security of smart contracts running on the Ethereum and introduce
   several new security vulnerabilities that allow adversaries to exploit
   and gain financial benefits. Then, we propose a more practical smart
   contract analysis tool termed NeuCheck, in which we introduce the syntax
   tree in the syntactical analyzer to complete the transformation from
   source code to intermediate representation, and then adopt the open
   source library working with XML to analyze such tree. We have built a
   prototype of NeuCheck for Ethereum and evaluate it with over 52 000
   existing Ethereum smart contracts. The results show that (1) our new
   documented vulnerabilities are prevalent; (2) NeuCheck improves the
   analysis speed by at least 17.2 times compared to other popular analysis
   tools (eg, Securify and Mythril; and (3) allows for cross-platform
   deployment.}},
	address = {{111 RIVER ST, HOBOKEN 07030-5774, NJ USA}},
	affiliation = {{Shi, WB (Corresponding Author), Northeastern Univ, Coll Comp Sci \& Engn, Shenyang, Liaoning, Peoples R China. Lu, Ning; Wang, Bin; Zhang, Yongxin; Shi, Wenbo, Northeastern Univ, Coll Comp Sci \& Engn, Shenyang, Liaoning, Peoples R China. Lu, Ning, Xidian Univ, Sch Comp Sci \& Technol, Xian, Shaanxi, Peoples R China. Esposito, Christian, Univ Salerno, Dept Comp Sci, Fisciano, Italy.}},
	author = {Lu, Ning and Wang, Bin and Zhang, Yongxin and Shi, Wenbo and Esposito, Christian},
	author-email = {{shiwb@neuq.edu.cn}},
	bdsk-color = {5},
	da = {{2021-11-07}},
	date-modified = {2021-11-14 01:36:02 +0100},
	doc-delivery-number = {{UN1VW}},
	doi = {{10.1002/spe.2745}},
	early-access-date = {{AUG 2019}},
	eissn = {{1097-024X}},
	funding-acknowledgement = {{National Nature Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61601107, U1708262, 61472074]; Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities {[}N172304023]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2019M653568]}},
	funding-text = {{National Nature Science Foundation of China, Grant/Award Number: 61601107, U1708262 and 61472074; Fundamental Research Funds for the Central Universities, Grant/Award Number: N172304023; China Postdoctoral Science Foundation, Grant/Award Number: 2019M653568}},
	issn = {{0038-0644}},
	journal = {{SOFTWARE-PRACTICE \& EXPERIENCE}},
	journal-iso = {{Softw.-Pract. Exp.}},
	keywords = {{blockchain; Ethereum; security analysis; smart contract}},
	language = {{English}},
	month = {{OCT}},
	number = {{10, SI}},
	number-of-cited-references = {{33}},
	orcid-numbers = {{ESPOSITO, Christiancarmine/0000-0002-0085-0748 Lu, ning/0000-0001-7325-7307}},
	pages = {{2065-2084}},
	publisher = {{WILEY}},
	read = {1},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{ESPOSITO, Christiancarmine/AAI-4626-2020 }},
	times-cited = {{2}},
	title = {{NeuCheck: A more practical Ethereum smart contract security analysis tool}},
	type = {{Article}},
	unique-id = {{WOS:000484100100001}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{18}},
	volume = {{51}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2021}},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBpLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1BhcGVycy9OZXVDaGVjayBBIG1vcmUgcHJhY3RpY2FsIEV0aGVyZXVtIHNtYXJ0IGNvbnRyYWN0IHNlY3VyaXR5IGFuYWx5c2lzIHRvb2wucGRmTxECWgAAAAACWgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H05ldUNoZWNrIEEgbW9yZSBwciNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABAADAAAKIGN1AAAAAAAAAAAAAAAAAAZQYXBlcnMAAgBzLzpVc2VyczphbmRyZXN0b3JoYXVnOkRvY3VtZW50czpQYXBlcnM6TmV1Q2hlY2sgQSBtb3JlIHByYWN0aWNhbCBFdGhlcmV1bSBzbWFydCBjb250cmFjdCBzZWN1cml0eSBhbmFseXNpcyB0b29sLnBkZgAADgCaAEwATgBlAHUAQwBoAGUAYwBrACAAQQAgAG0AbwByAGUAIABwAHIAYQBjAHQAaQBjAGEAbAAgAEUAdABoAGUAcgBlAHUAbQAgAHMAbQBhAHIAdAAgAGMAbwBuAHQAcgBhAGMAdAAgAHMAZQBjAHUAcgBpAHQAeQAgAGEAbgBhAGwAeQBzAGkAcwAgAHQAbwBvAGwALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAHFVc2Vycy9hbmRyZXN0b3JoYXVnL0RvY3VtZW50cy9QYXBlcnMvTmV1Q2hlY2sgQSBtb3JlIHByYWN0aWNhbCBFdGhlcmV1bSBzbWFydCBjb250cmFjdCBzZWN1cml0eSBhbmFseXNpcyB0b29sLnBkZgAAEwABLwAAFQACABT//wAAAAgADQAaACQAkAAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAALu},
	bdsk-url-1 = {https://doi.org/10.1002/spe.2745}}

@article{WOS:000510400600001,
	abstract = {{The second generation of blockchain represented by smart contracts has
   been developing vigorously in recent years. However, frequent smart
   contract vulnerability incidents pose a serious risk to blockchain
   ecosystem security. Since current symbol execution tools often fall into
   path explosion and thus lead to inefficient detection, this paper
   expands Mythril's framework to optimize its performance. Firstly, it
   finds out potential vulnerable code regions using static analysis and
   identifies critical paths that may have security defects. Then, aiming
   at the problem that traditional search algorithms cannot actively locate
   and explore critical paths, this paper presents a multi-objective
   oriented path search (MOPS) strategy based on path priority. This
   strategy guides dynamic symbolic execution to cover critical paths
   quickly, avoiding blind traversal of program execution paths. Finally,
   it describes security rules and proposes corresponding detection logics
   for different vulnerability categories. This paper analyzes over 1000
   smart contracts extracted from Etherscan. Compared with existing tools
   based on symbolic execution, the proposed method can reduce time
   consumption by around 35\% while ensuring the accuracy of vulnerability
   detection. Moreover, existing tools often issue warnings that do not
   actually cause financial losses. But the proposed method only
   concentrates on code regions related to transfer of funds, so it can
   reduce the false alarm rate to some extent.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Wu, LF (Corresponding Author), Nanjing Univ Posts \& Telecommun, Sch Comp Sci, Nanjing 210003, Peoples R China. Fu, Menglin; Hong, Zheng; Sun, He; Feng, Wenbo, Army Engn Univ PLA, Command \& Control Engn Coll, Nanjing 210007, Peoples R China. Wu, Lifa; Zhu, Feng, Nanjing Univ Posts \& Telecommun, Sch Comp Sci, Nanjing 210003, Peoples R China.}},
	author = {Fu, Menglin and Wu, Lifa and Hong, Zheng and Zhu, Feng and Sun, He and Feng, Wenbo},
	author-email = {{wulifa@njupt.edu.cn}},
	bdsk-color = {3},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:51:29 +0100},
	doc-delivery-number = {{KH1IR}},
	doi = {{10.1109/ACCESS.2019.2947146}},
	funding-acknowledgement = {{National Key Research and Development Program of China {[}2017YFB08029]; Nanjing University of Posts and Telecommunications Startup Foundation (NUPTSF) {[}NY219004]}},
	funding-text = {{This work was supported in part by the National Key Research and Development Program of China under Grant 2017YFB08029, and in part by the Nanjing University of Posts and Telecommunications Startup Foundation (NUPTSF) under Grant NY219004.}},
	issn = {{2169-3536}},
	journal = {{IEEE ACCESS}},
	journal-iso = {{IEEE Access}},
	keywords = {{Block chain security; smart contract; vulnerability mining}},
	language = {{English}},
	number-of-cited-references = {{42}},
	oa = {{gold}},
	orcid-numbers = {{Menglin, Fu/0000-0003-2363-3233}},
	pages = {{147327-147344}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	times-cited = {{1}},
	title = {{A Critical-Path-Coverage-Based Vulnerability Detection Method for Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000510400600001}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{5}},
	volume = {{7}},
	web-of-science-categories = {{Computer Science, Information Systems; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ACCESS.2019.2947146}}

@inproceedings{WOS:000448864200073,
	abstract = {{Currently, Bitcoin and Ethereum are the two most popular cryptocurrency
   systems, especially Ethereum. It permits complex financial transactions
   or rules through scripts, which is called smart contracts. Since
   Ethereum smart contracts hold millions of dollars, their execution
   correctness is crucial against attacks which aim at stealing the assets.
   In this paper, we proposed a security assurance method for smart
   contract source code to find potential security risks. It contains two
   main functions, the first is syntax topological analysis of smart
   contract invocation relationship, to help developers to understand their
   code structure clearly; the second is logic risk (which may lead to
   vulnerabilities) detection and location, and label results on topology
   diagram. For developers' convenience, we have built a static analysis
   tool called SASC to generate topology diagram of invocation relationship
   and to find potential logic risks. We have made an evaluation on 2,952
   smart contracts, experiment results proved that our method is intuitive
   and effective.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Zhou, E (Corresponding Author), Fujitsu Res \& Dev Ctr, Informat Technol Lab, Suzhou, Peoples R China. Zhou, Ence; Hua, Song; Pi, Bingfeng, Fujitsu Res \& Dev Ctr, Informat Technol Lab, Suzhou, Peoples R China. Sun, Jun, Fujitsu Res \& Dev Ctr, Informat Technol Lab, Beijing, Peoples R China. Nomura, Yashihide; Yamashita, Kazuhiro; Kurihara, Hidetoshi, Fujitsu Labs Ltd, Informat Syst Technol Lab, Kawasaki, Kanagawa, Japan.}},
	author = {Zhou, Ence and Hua, Song and Pi, Bingfeng and Sun, Jun and Nomura, Yashihide and Yamashita, Kazuhiro and Kurihara, Hidetoshi},
	author-email = {{zhouence@cn.fujitsu.com huasong@cn.fujitsu.com winter.pi@cn.fujitsu.com sunjun@cn.fujitsu.com y.nomura@jp.fujitsu.com y-kazuhiro@jp.fujitsu.com kurihara.hide@jp.fujitsu.com}},
	bdsk-color = {5},
	book-group-author = {{IEEE}},
	booktitle = {{2018 9TH IFIP INTERNATIONAL CONFERENCE ON NEW TECHNOLOGIES, MOBILITY AND SECURITY (NTMS)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 20:49:26 +0100},
	doc-delivery-number = {{BL2CQ}},
	isbn = {{978-1-5386-3662-6}},
	issn = {{2157-4952}},
	keywords = {{ethereum blockchain; smart contract; topological analysis; logic risk location; security assurance}},
	language = {{English}},
	note = {{9th IFIP International Conference on New Technologies, Mobility and Security (NTMS), Paris, FRANCE, FEB 26-28, 2018}},
	number-of-cited-references = {{6}},
	organization = {{IFIP TC6 5 Working Grp; IEEE; System X Inst Rech Technologique; LiP6; CNRS; TELECOM ParisTech; IEEE Commun Soc}},
	publisher = {{IEEE}},
	read = {1},
	research-areas = {{Computer Science; Engineering; Telecommunications}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	series = {{International Conference on New Technologies Mobility and Security}},
	times-cited = {{3}},
	title = {{Security Assurance for Smart Contract}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000448864200073}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Theory \& Methods; Engineering, Electrical \& Electronic; Telecommunications}},
	year = {{2018}},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAyYXJ0aWNsZXMvU2VjdXJpdHlfQXNzdXJhbmNlX2Zvcl9TbWFydF9Db250cmFjdC5wZGZPEQImAAAAAAImAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fU2VjdXJpdHlfQXNzdXJhbmNlI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAMAAAogY3UAAAAAAAAAAAAAAAAACGFydGljbGVzAAIAfC86VXNlcnM6YW5kcmVzdG9yaGF1ZzpQcm9ncmFtbWluZzpQcm9qZWN0czptYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0OmRhdGE6YXJ0aWNsZXM6U2VjdXJpdHlfQXNzdXJhbmNlX2Zvcl9TbWFydF9Db250cmFjdC5wZGYADgBUACkAUwBlAGMAdQByAGkAdAB5AF8AQQBzAHMAdQByAGEAbgBjAGUAXwBmAG8AcgBfAFMAbQBhAHIAdABfAEMAbwBuAHQAcgBhAGMAdAAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAelVzZXJzL2FuZHJlc3RvcmhhdWcvUHJvZ3JhbW1pbmcvUHJvamVjdHMvbWFzdGVyLXByZWxpbWluYXJ5LXJlcG9ydC9kYXRhL2FydGljbGVzL1NlY3VyaXR5X0Fzc3VyYW5jZV9mb3JfU21hcnRfQ29udHJhY3QucGRmABMAAS8AABUAAgAU//8AAAAIAA0AGgAkAFkAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAACgw==}}

@inproceedings{WOS:000570689200021,
	abstract = {{In recent years, vulnerabilities of smart contracts have frequently
   break out. In particular, integer overflow of smart contracts, a
   high-risk vulnerability, has caused huge financial losses. However, most
   tools currently fail to detect integer overflow in smart contracts. In
   this paper, we summarize 11 types of integer overflow features for
   Solidity smart contracts in Ethereum and abstractly define 83
   corresponding XPath patterns. And we design an extensible static
   analysis tool to detect common integer overflow vulnerabilities of
   Solidity smart contracts in Ethereum through the defined XPath patterns.
   To evaluate our tool, we tested 7,000 verified Solidity smart contracts
   and found that there were 430 smart contracts with vulnerabilities of
   integer overflow. Experimental results show that there are still
   high-risk vulnerabilities of integer overflow in verified smart
   contracts.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Lai, EM (Corresponding Author), Chongqing Univ Posts \& Telecommun, Sch Comp Sci \& Technol, Chongqing, Peoples R China. Lai, Enmei, Chongqing Univ Posts \& Telecommun, Sch Comp Sci \& Technol, Chongqing, Peoples R China. Luo, Wenjun, Chongqing Univ Posts \& Telecommun, Sch Cyber Secur \& Informat Law, Chongqing, Peoples R China.}},
	author = {Lai, Enmei and Luo, Wenjun},
	author-email = {{laienmei96@163.com luowj@cqupt.edu.cn}},
	bdsk-color = {5},
	book-group-author = {{ACM}},
	booktitle = {{2020 4TH INTERNATIONAL CONFERENCE ON CRYPTOGRAPHY, SECURITY AND PRIVACY (ICCSP 2020)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:31:24 +0100},
	doc-delivery-number = {{BP9RG}},
	doi = {{10.1145/3377644.3377650}},
	isbn = {{978-1-4503-7744-7}},
	keywords = {{smart contract; integer overflow; XPath; vulnerability detection}},
	language = {{English}},
	note = {{4th International Conference on Cryptography, Security and Privacy (ICCSP), Nanjing, PEOPLES R CHINA, JAN 10-12, 2020}},
	number-of-cited-references = {{12}},
	pages = {{110-115}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{3}},
	title = {{Static Analysis of Integer Overflow of Smart Contracts in Ethereum}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000570689200021}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Information Systems}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3377644.3377650}}

@inproceedings{WOS:000689112100048,
	abstract = {{As one of the key components of blockchain, smart contract is playing a
   vital role in achieving auto-functions; however, reentrant attacks are
   threatening the implementation of smart contracts, which limits the
   adoption of blockchain systems in various scenarios. To address this
   issue, we propose a reentrant vulnerability detection model based on
   word embedding, similarity detection, and Generative Adversarial
   Networks (GAN). Additionally, we provide a new approach for dynamically
   preventing reentrant attacks. We also implement experiments to evaluate
   our model and results show our scheme achieves 92\% detecting accuracy
   for reentrant attack detection.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Gai, KK (Corresponding Author), Beijing Inst Technol, Sch Cyberspace Sci \& Technol, Beijing 100081, Peoples R China. Zhao, Hui; Su, Peng, Henan Univ, Sch Software, Kaifeng 475000, Peoples R China. Wei, Yihang, Beijing Inst Technol, Sch Comp Sci \& Technol, Beijing 100081, Peoples R China. Gai, Keke, Beijing Inst Technol, Sch Cyberspace Sci \& Technol, Beijing 100081, Peoples R China. Qiu, Meikang, Texas A\&M Univ Commerce, Commerce, TX 75428 USA.}},
	author = {Zhao, Hui and Su, Peng and Wei, Yihang and Gai, Keke and Qiu, Meikang},
	author-email = {{zhh@henu.edu.cn 3120201079@bit.edu.cn gaikeke@bit.edu.cn qiumeikang@ieee.org}},
	bdsk-color = {6},
	booktitle = {{KNOWLEDGE SCIENCE, ENGINEERING AND MANAGEMENT, PT III}},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{BS1GM}},
	doi = {{10.1007/978-3-030-82153-1\_48}},
	editor = {{Qiu, H and Zhang, C and Fei, Z and Qiu, M and Kung, SY}},
	eissn = {{1611-3349}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61972034]; Natural Science Foundation of Beijing MunicipalityBeijing Natural Science Foundation {[}4202068]; Natural Science Foundation of Shandong ProvinceNatural Science Foundation of Shandong Province {[}ZR2019ZD10, ZR2020ZD01]}},
	funding-text = {{This work is partially supported by National Natural Science Foundation of China (Grant No. 61972034), Natural Science Foundation of Beijing Municipality (Grant No. 4202068), Natural Science Foundation of Shandong Province (Grant No. ZR2019ZD10, ZR2020ZD01).}},
	isbn = {{978-3-030-82153-1; 978-3-030-82152-4}},
	issn = {{0302-9743}},
	keywords = {{Blockchain; Smart contract; Reentrant attack; Vulnerability detection; Generative adversarial networks}},
	language = {{English}},
	note = {{14th International Conference on Knowledge Science, Engineering, and Management (KSEM), Tokyo, JAPAN, AUG 14-16, 2021}},
	number-of-cited-references = {{21}},
	orcid-numbers = {{Gai, Keke/0000-0001-6784-0221}},
	organization = {{Springer LNCS; Waseda Univ; N Amer Chinese Talents Assoc; Longxiang High Tech Grp Inc}},
	pages = {{585-597}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Gai, Keke/M-4857-2017}},
	series = {{Lecture Notes in Artificial Intelligence}},
	times-cited = {{0}},
	title = {{GAN-Enabled Code Embedding for Reentrant Vulnerabilities Detection}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000689112100048}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{12817}},
	web-of-science-categories = {{Computer Science, Artificial Intelligence}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-030-82153-1%5C_48}}

@article{WOS:000687462200004,
	abstract = {{In recent years, a lot of vulnerabilities of smart contracts have been
   found. Hackers used these vulnerabilities to attack the corresponding
   contracts developed in the blockchain system such as Ethereum, and it
   has caused lots of economic losses. Therefore, it is very important to
   find out the potential problems of the smart contracts and develop more
   secure smart contracts. As blockchain security events have raised more
   important issues, more and more smart contract security analysis methods
   have been developed. Most of these methods are based on traditional
   static analysis or dynamic analysis methods. There are only a few
   methods that use emerging technologies, such as machine learning. Some
   models that use machine learning to detect smart contract
   vulnerabilities cost much time in extracting features manually. In this
   paper, we introduce a novel machine learning-based analysis model by
   introducing the shared child nodes for smart contract vulnerabilities.
   We build the Abstract-Syntax-Tree (AST) for smart contracts with some
   vulnerabilities from two data sets including SmartBugs and
   SolidiFI-benchmark. Then, we build the Abstract-Syntax-Tree (AST) of the
   labeled smart contract for data sets named Smartbugs-wilds. Next, we get
   the shared child nodes from both of the ASTs to obtain the structural
   similarity, and then, we construct a feature vector composed of the
   values that measure structural similarity automatically to build our
   machine learning model. Finally, we get a KNN model that can predict
   eight types of vulnerabilities including Re-entrancy, Arithmetic, Access
   Control, Denial of Service, Unchecked Low Level Calls, Bad Randomness,
   Front Running, and Denial of Service. The accuracy, recall, and
   precision of our KNN model are all higher than 90\%. In addition,
   compared with some other analysis tools including Oyente and SmartCheck,
   our model has higher accuracy. In addition, we spent less time for
   training .}},
	address = {{ADAM HOUSE, 3RD FL, 1 FITZROY SQ, LONDON, WIT 5HE, ENGLAND}},
	affiliation = {{Hu, GR; You, L (Corresponding Author), Hangzhou Dianzi Univ, Sch Cyberspace, Hangzhou, Peoples R China. Xu, Yingjie; Hu, Gengran; You, Lin; Cao, Chengtang, Hangzhou Dianzi Univ, Sch Cyberspace, Hangzhou, Peoples R China.}},
	article-number = {{5798033}},
	author = {Xu, Yingjie and Hu, Gengran and You, Lin and Cao, Chengtang},
	author-email = {{gengran.hu@gmail.com mryoulin@gmail.com}},
	bdsk-color = {6},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{UD8OM}},
	doi = {{10.1155/2021/5798033}},
	eissn = {{1939-0122}},
	funding-acknowledgement = {{Key Program of the National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61772166]; Natural Science Foundation of Zhejiang Province of ChinaNatural Science Foundation of Zhejiang Province {[}LZ17F020002]}},
	funding-text = {{This research was partially supported by the Key Program of the National Natural Science Foundation of China (no. 61772166) and the Natural Science Foundation of Zhejiang Province of China (no. LZ17F020002).}},
	issn = {{1939-0114}},
	journal = {{SECURITY AND COMMUNICATION NETWORKS}},
	journal-iso = {{Secur. Commun. Netw.}},
	language = {{English}},
	month = {{AUG 15}},
	number-of-cited-references = {{23}},
	oa = {{gold}},
	orcid-numbers = {{YOU, LIN/0000-0003-2049-8961 Hu, Gengran/0000-0002-3061-2388}},
	publisher = {{WILEY-HINDAWI}},
	research-areas = {{Computer Science; Telecommunications}},
	times-cited = {{0}},
	title = {{A Novel Machine Learning-Based Analysis Model for Smart Contract Vulnerability}},
	type = {{Article}},
	unique-id = {{WOS:000687462200004}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{3}},
	volume = {{2021}},
	web-of-science-categories = {{Computer Science, Information Systems; Telecommunications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1155/2021/5798033}}

@inproceedings{WOS:000629086600116,
	abstract = {{Smart contracts vulnerability auditing is vitally critical to ensure
   transaction execution in normal on blockchain. The current data-driven
   approaches normally tokenize smart contracts into a series of sequences
   according to only one tokenization standard for vulnerability detection
   purpose, resulting some of the semantic contexts could not be reflected
   within restricted sequence length.
   To address this limitation, we generate sequences from smart contracts
   in three tokenization standards for which we utilize ngram language
   model to capture semantic contexts respectively, and finally exploiting
   our effective combination strategy of Intersection or Union to integrate
   the audited results from multiple semantic contexts. In order to
   evaluate the proposed approach, we applied it on over 7200 Ethereum
   smart contract samples. Experimental result shows our proposed method is
   capable of detecting vulnerabilities and competitive with the baseline
   in test sets, with improved precision of over 44\% when Intersection is
   applied in their results, as well as improved Recall measure up by over
   300\% and F-measure up by 220\% when Union is applied. Our proposed
   method for smart contract vulnerability detection, an important tool for
   developing quality decentralized software applications, is able to
   analyze multiple semantic contexts and successfully detects more true
   vulnerabilities with high precision, outperforming that of the baseline
   approaches.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Yang, Z (Corresponding Author), City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China. Yang, Zhen; Keung, Jacky; Zhang, Miao; Huang, Yangyang; Hui, Tik, City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China. Xiao, Yan, Natl Univ Singapore, Sch Comp, Singapore, Singapore.}},
	author = {Yang, Zhen and Keung, Jacky and Zhang, Miao and Xiao, Yan and Huang, Yangyang and Hui, Tik},
	author-email = {{zhyang8-c@my.cityu.edu.hk Jacky.Keung@cityu.edu.hk miazhang9-c@my.cityu.edu.hk dcsxon@nus.edu.sg yhuan5@cityu.edu.hk tikhui@cityu.edu.hk}},
	booktitle = {{2020 IEEE 44TH ANNUAL COMPUTERS, SOFTWARE, AND APPLICATIONS CONFERENCE (COMPSAC 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR0HX}},
	doi = {{10.1109/COMPSAC48688.2020.0-153}},
	editor = {{Chan, WK and Claycomb, B and Takakura, H and Yang, JJ and Teranishi, Y and Towey, D and Segura, S and Shahriar, H and Reisman, S and Ahamed, SI}},
	funding-acknowledgement = {{General Research Fund of the Research Grants Council of Hong Kong {[}11208017]; City University of Hong KongCity University of Hong Kong {[}7005028, 7005217]; IntelIntel Corporation {[}9220097]; {[}9678149]; {[}9440227]; {[}9440180]; {[}9220103]}},
	funding-text = {{This work is supported in part by the General Research Fund of the Research Grants Council of Hong Kong (No.11208017) and the research funds of City University of Hong Kong (7005028, 7005217), and the Research Support Fund by Intel (9220097), and funding supports from other industry partners (9678149, 9440227, 9440180 and 9220103).}},
	isbn = {{978-1-7281-7303-0}},
	issn = {{0730-3157}},
	keywords = {{Software Engineering; Smart Contract; Ethereum; N-gram Language Model; Vulnerability Auditing}},
	language = {{English}},
	note = {{44th Annual IEEE-Computer-Society International Conference on Computers, Software, and Applications (COMPSAC), ELECTR NETWORK, JUL 13-17, 2020}},
	number-of-cited-references = {{22}},
	orcid-numbers = {{Yang, Zhen/0000-0003-0670-4538 ZHANG, Miao/0000-0001-9659-9393 XIAO, Yan/0000-0002-2563-083X KEUNG, Jacky/0000-0002-3803-9600}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{892-901}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	series = {{Proceedings International Computer Software and Applications Conference}},
	times-cited = {{0}},
	title = {{Smart Contracts Vulnerability Auditing With Multi-Semantics}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000629086600116}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{3}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/COMPSAC48688.2020.0-153}}

@inproceedings{WOS:000671077600207,
	abstract = {{The application of blockchain has moved beyond cryptocurrencies, to
   applications such as credentialing and smart contracts. The smart
   contract allows ones to achieve fair exchange for values without relying
   on a centralized entity. However, as the smart contract can be
   automatically executed with token transfers, an attacker can seek to
   exploit vulnerabilities in smart contracts for illicit profits. Thus,
   this paper proposes a support vector machine (SVM)-based scanning system
   for vulnerabilities on smart contracts. Our evaluation on Ethereum
   demonstrate that we achieve a identification rate of over 90\% based on
   several popular attacks.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Ren, W (Corresponding Author), China Univ Geosci, Sch Comp Sci, Wuhan, Peoples R China. Ren, W (Corresponding Author), Guangxi Key Lab Cryptog \& Informat Secur, Guilin 541004, Peoples R China. Ren, W (Corresponding Author), Chinese Acad Sci, CAS Inst Informat Engn, Key Lab Network Assessment Technol, Beijing 100093, Peoples R China. Hao, Xiaohan; Ren, Wei; Zheng, Wenwen; Zhu, Tianqing, China Univ Geosci, Sch Comp Sci, Wuhan, Peoples R China. Ren, Wei, Guangxi Key Lab Cryptog \& Informat Secur, Guilin 541004, Peoples R China. Ren, Wei, Chinese Acad Sci, CAS Inst Informat Engn, Key Lab Network Assessment Technol, Beijing 100093, Peoples R China.}},
	author = {Hao, Xiaohan and Ren, Wei and Zheng, Wenwen and Zhu, Tianqing},
	author-email = {{weirencs@cug.edu.cn}},
	booktitle = {{2020 IEEE 19TH INTERNATIONAL CONFERENCE ON TRUST, SECURITY AND PRIVACY IN COMPUTING AND COMMUNICATIONS (TRUSTCOM 2020)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BR8DU}},
	doi = {{10.1109/TrustCom50675.2020.00221}},
	editor = {{Wang, GJ and Ko, R and Bhuiyan, MZA and Pan, Y}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61972366]; Foundation of Key Laboratory of Network Assessment Technology, Chinese Academy of Sciences {[}KFKT2019-003]; Foundation of Guangxi Key Laboratory of Cryptography and Information Security {[}GCIS201913]; Foundation of Guizhou Provincial Key Laboratory of Public Big Data {[}2018BDKFJJ009, 2019BDKFJJ003, 2019BD-KFJJ011]}},
	funding-text = {{The research was financially supported by National Natural Science Foundation of China (No.61972366), the Foundation of Key Laboratory of Network Assessment Technology, Chinese Academy of Sciences (No. KFKT2019-003), the Foundation of Guangxi Key Laboratory of Cryptography and Information Security (No. GCIS201913), and the Foundation of Guizhou Provincial Key Laboratory of Public Big Data (No. 2018BDKFJJ009, No. 2019BDKFJJ003, No. 2019BD-KFJJ011).}},
	isbn = {{978-1-6654-0392-4}},
	issn = {{2324-898X}},
	keywords = {{Blockchain; Ethereum; Smart Contract; Vulnerability Detection; Support Vector Machine}},
	keywords-plus = {{TECHNOLOGY}},
	language = {{English}},
	note = {{19th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (IEEE TrustCom), Guangzhou, PEOPLES R CHINA, DEC 29-JAN 01, 2020-2021}},
	number-of-cited-references = {{21}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{1598-1605}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science; Telecommunications}},
	series = {{IEEE International Conference on Trust Security and Privacy in Computing and Communications}},
	times-cited = {{0}},
	title = {{SCScan: A SVM-based Scanning System for Vulnerabilities in Blockchain Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000671077600207}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Hardware \& Architecture; Computer Science, Information Systems; Computer Science, Theory \& Methods; Telecommunications}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/TrustCom50675.2020.00221}}

@inproceedings{WOS:000538781300092,
	abstract = {{A smart contract is a computer protocol intended to digitally facilitate
   and enforce the negotiation of a contract in undependable environment.
   However, the number of attacks using the vulnerabilities of the smart
   contracts is also growing in recent years. Many solutions have been
   proposed in order to deal with them, such as documenting vulnerabilities
   or setting the security strategies. Among them, the most influential
   progress is made by the formal verification method. In this paper, we
   propose a formal verification method based on Colored Petri Nets (CPN)
   to verify smart contracts in blockchain system. First, we develop the
   smart contract models with possible attacker models based on
   hierarchical CPN modeling, then the smart contract models are executed
   by step-by-step simulation to validate their functional correctness, and
   finally we utilize the branch timing logic ASK-CTL based model checking
   technology in the CPN tools to detect latent vulnerabilities in smart
   contracts. We demonstrate that our CPN modeling based verification
   method can not only detect the logical vulnerabilities of the smart
   contract, but also consider the impacts of users behavior to find out
   potential non-logical vulnerabilities in the contracts, such as the
   vulnerabilities caused by the limitations of the Solidity language.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Liu, ZT (Corresponding Author), Inner Mongolia Univ, Coll Comp Sci, Hohhot, Peoples R China. Liu, Zhentian; Liu, Jing, Inner Mongolia Univ, Coll Comp Sci, Hohhot, Peoples R China.}},
	author = {Liu, Zhentian and Liu, Jing},
	author-email = {{1602942580@qq.com liujing@imu.edu.cn}},
	booktitle = {{2019 IEEE 43RD ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE (COMPSAC), VOL 2}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP1DH}},
	doi = {{10.1109/COMPSAC.2019.10265}},
	editor = {{Getov, V and Gaudiot, JL and Yamai, N and Cimato, S and Chang, M and Teranishi, Y and Yang, JJ and Leong, HV and Shahriar, H and Takemoto, M and Towey, D and Takakura, H and Elci, A and Susumu and Puri, S}},
	funding-acknowledgement = {{National Natural Science Foundation of ChainNational Natural Science Foundation of China (NSFC) {[}61662051]}},
	funding-text = {{This work was supported in part by the National Natural Science Foundation of Chain (No. 61662051).}},
	isbn = {{978-1-7281-2607-4}},
	issn = {{0730-3157}},
	keywords = {{blockchain; smart contract; formal verification; CPN}},
	language = {{English}},
	note = {{43rd IEEE-Computer-Society Annual International Computers, Software and Applications Conference (COMPSAC), Marquette Univ, Milwaukee, WI, JUL 15-19, 2019}},
	number-of-cited-references = {{15}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Future Direct}},
	pages = {{555-560}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{Proceedings International Computer Software and Applications Conference}},
	times-cited = {{2}},
	title = {{Formal Verification of Blockchain Smart Contract based on Colored Petri Net Models}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000538781300092}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{5}},
	web-of-science-categories = {{Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/COMPSAC.2019.10265}}

@inproceedings{WOS:000517102200060,
	abstract = {{Executing, verifying and enforcing credible transactions on
   permissionless blockchains is done using smart contracts. A key
   challenge with smart contracts is ensuring their correctness and
   security. To address this challenge, we present a fully automated
   technique, SolAnalyser, for vulnerability detection over Solidity smart
   contracts that uses both static and dynamic analysis. Analysis
   techniques in the literature rely on static analysis with a high rate of
   false positives or lack support for vulnerabilities like out of gas,
   unchecked send, timestamp dependency. Our tool, SolAnalyser, supports
   automated detection of 8 different vulnerability types that currently
   lack wide support in existing tools, and can easily be extended to
   support other types. We also implemented a fault seeding tool that
   injects different types of vulnerabilities in smart contracts. We use
   the mutated contracts for assessing the effectiveness of different
   analysis tools. Our experiment uses 1838 real contracts from which we
   generate 12866 mutated contracts by artificially seeding 8 different
   vulnerability types. We evaluate the effectiveness of our technique in
   revealing the seeded vulnerabilities and compare against five existing
   popular analysis tools - Oyente, Securify, Maian, SmartCheck and
   Mythril. This is the first large scale evaluation of existing tools that
   compares their effectiveness by running them on a common set of
   contracts. We find that our technique outperforms all five existing
   tools in supporting detection of all 8 vulnerability types and in
   achieving higher precision and recall rate. SolAnalyser was also faster
   in analysing the different vulnerabilities than any of the existing
   tools in our experiment.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Akca, S (Corresponding Author), Univ Edinburgh, Edinburgh, Midlothian, Scotland. Akca, Sefa; Rajan, Ajitha; Peng, Chao, Univ Edinburgh, Edinburgh, Midlothian, Scotland.}},
	author = {Akca, Sefa and Rajan, Ajitha and Peng, Chao},
	author-email = {{s.akca@sms.ed.ac.uk arajan@ed.ac.uk chao.peng@ed.ac.uk}},
	bdsk-color = {5},
	book-group-author = {{IEEE}},
	booktitle = {{2019 26TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 20:49:13 +0100},
	doc-delivery-number = {{BO5CH}},
	doi = {{10.1109/APSEC48747.2019.00071}},
	funding-acknowledgement = {{Huawei Innovation Research ProgramHuawei Technologies}},
	funding-text = {{This work was supported in part by a grant from Huawei Innovation Research Program.}},
	isbn = {{978-1-7281-4648-5}},
	issn = {{1530-1362}},
	keywords = {{blockchain; smart contract; testing; static analysis; assertions; fault seeding}},
	language = {{English}},
	note = {{26th Asia-Pacific Software Engineering Conference (APSEC), Putrajaya, MALAYSIA, DEC 02-05, 2019}},
	number-of-cited-references = {{27}},
	oa = {{Green Submitted}},
	organization = {{Univ Sains Malaysia; Univ Putra Malaysia; Univ Malaysia Terengganu; Malaysian Software Engn Interest Grp; Univ Teknologi Malaysia}},
	pages = {{482-489}},
	publisher = {{IEEE}},
	read = {1},
	research-areas = {{Computer Science; Engineering}},
	series = {{Asia-Pacific Software Engineering Conference}},
	times-cited = {{2}},
	title = {{SolAnalyser: A Framework for Analysing and Testing Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000517102200060}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{3}},
	web-of-science-categories = {{Computer Science, Software Engineering; Engineering, Electrical \& Electronic}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/APSEC48747.2019.00071},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBOYXJ0aWNsZXMvU29sQW5hbHlzZXJfQV9GcmFtZXdvcmtfZm9yX0FuYWx5c2luZ19hbmRfVGVzdGluZ19TbWFydF9Db250cmFjdHMucGRmTxEClgAAAAAClgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H1NvbEFuYWx5c2VyX0FfRnJhbSNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQADAAAKIGN1AAAAAAAAAAAAAAAAAAhhcnRpY2xlcwACAJgvOlVzZXJzOmFuZHJlc3RvcmhhdWc6UHJvZ3JhbW1pbmc6UHJvamVjdHM6bWFzdGVyLXByZWxpbWluYXJ5LXJlcG9ydDpkYXRhOmFydGljbGVzOlNvbEFuYWx5c2VyX0FfRnJhbWV3b3JrX2Zvcl9BbmFseXNpbmdfYW5kX1Rlc3RpbmdfU21hcnRfQ29udHJhY3RzLnBkZgAOAIwARQBTAG8AbABBAG4AYQBsAHkAcwBlAHIAXwBBAF8ARgByAGEAbQBlAHcAbwByAGsAXwBmAG8AcgBfAEEAbgBhAGwAeQBzAGkAbgBnAF8AYQBuAGQAXwBUAGUAcwB0AGkAbgBnAF8AUwBtAGEAcgB0AF8AQwBvAG4AdAByAGEAYwB0AHMALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAJZVc2Vycy9hbmRyZXN0b3JoYXVnL1Byb2dyYW1taW5nL1Byb2plY3RzL21hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQvZGF0YS9hcnRpY2xlcy9Tb2xBbmFseXNlcl9BX0ZyYW1ld29ya19mb3JfQW5hbHlzaW5nX2FuZF9UZXN0aW5nX1NtYXJ0X0NvbnRyYWN0cy5wZGYAEwABLwAAFQACABT//wAAAAgADQAaACQAdQAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAMP}}

@inproceedings{WOS:000691552500001,
	abstract = {{With the increase of the adoption of blockchain technology in providing
   decentralized solutions to various problems, smart contracts have become
   more popular to the point that billions of US Dollars are currently
   exchanged every day through such technology. Meanwhile, various
   vulnerabilities in smart contracts have been exploited by attackers to
   steal cryptocurrencies worth millions of dollars. The automatic
   detection of smart contract vulnerabilities therefore is an essential
   research problem. Existing solutions to this problem particularly rely
   on human experts to define f eatures o r d ifferent r ules t o detect
   vulnerabilities. However, this often causes many vulnerabilities to be
   ignored, and they are inefficient in detecting new vulnerabilities. In
   this study, to overcome such challenges, we propose the VSCL framework
   to automatically detect vulnerabilities in smart contracts on the
   blockchain. More specifically, first, we utilize novel feature vector
   generation techniques from bytecode of smart contract since the source
   code of smart contracts are rarely available in public. Next, the
   collected vectors are fed into our novel metric learning-based deep
   neural network(DNN) to get the detection result. We conduct
   comprehensive experiments on a large-scale benchmark, and the
   quantitative results demonstrate the effectiveness and efficiency of our
   approach.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Mi, F (Corresponding Author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA. Mi, Feng; Wang, Zhuoyi; Zhao, Chen; Guo, Jinghui; Ahmed, Fawaz; Khan, Latifur, Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.}},
	author = {Mi, Feng and Wang, Zhuoyi and Zhao, Chen and Guo, Jinghui and Ahmed, Fawaz and Khan, Latifur},
	author-email = {{Feng.Mi@utdallas.edu zxw151030@utdallas.edu Chen.Zhao@utdallas.edu Jinghui.Guo@utdallas.edu Fawaz.Ahmed@utdallas.edu lkhan@utdallas.edu}},
	bdsk-color = {6},
	book-group-author = {{IEEE}},
	booktitle = {{2021 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN AND CRYPTOCURRENCY (ICBC)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{BS1IM}},
	doi = {{10.1109/ICBC51069.2021.9461050}},
	funding-acknowledgement = {{NSFNational Science Foundation (NSF) {[}DMS-1737978, DGE-2039542, OAC-1828467, OAC1931541, DGE-1906630]; IBM faculty awardInternational Business Machines (IBM)}},
	funding-text = {{This material is based upon work supported by NSF awards DMS-1737978, DGE-2039542, OAC-1828467, OAC1931541, DGE-1906630, and an IBM faculty award (Research).}},
	isbn = {{978-1-6654-3578-9}},
	keywords = {{Smart Contract; Vulnerability Detection; Metric Learning; Blockchain}},
	language = {{English}},
	note = {{3rd IEEE International Conference on Blockchain and Cryptocurrency (IEEE ICBC), ELECTR NETWORK, MAY 03-06, 2021}},
	number-of-cited-references = {{29}},
	organization = {{IEEE; IEEE Commun Soc; IBM; CSIRO, Data61}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{VSCL: Automating Vulnerability Detection in Smart Contracts with Deep Learning}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000691552500001}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Interdisciplinary Applications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/ICBC51069.2021.9461050}}

@article{WOS:000703327100001,
	abstract = {{Ethereum smart contracts have been gaining popularity toward the
   automation of so many domains, i.e., FinTech, IoT, and supply chain,
   which are based on blockchain technology. The most critical domain,
   e.g., FinTech, has been targeted by so many successful attacks due to
   its financial worth of billions of dollars. In all attacks, the
   vulnerability in the source code of smart contracts is being exploited
   and causes the steal of millions of dollars. To find the vulnerability
   in the source code of smart contracts written in Solidity language, a
   state-of-the-art work provides a lot of solutions based on dynamic or
   static analysis. However, these tools have shown a lot of false
   positives/negatives against the smart contracts having complex logic.
   Furthermore, the output of these tools is not reported in a standard way
   with their actual vulnerability names as per standards defined by the
   Ethereum community. To solve these problems, we have introduced a static
   analysis tool, SESCon (secure Ethereum smart contract), applying the
   taint analysis techniques with XPath queries. Our tool outperforms other
   analyzers and detected up to 90\% of the known vulnerability patterns.
   SESCon also reports the detected vulnerabilities with their titles,
   descriptions, and remediations as per defined standards by the Ethereum
   community. SESCon will serve as a foundation for the standardization of
   vulnerability detection.}},
	address = {{ADAM HOUSE, 3RD FL, 1 FITZROY SQ, LONDON, WIT 5HE, ENGLAND}},
	affiliation = {{Ali, A (Corresponding Author), Xi An Jiao Tong Univ, Sch Cyber Sci \& Engn, Xian 710049, Shaanxi, Peoples R China. Ali, Amir, Xi An Jiao Tong Univ, Sch Cyber Sci \& Engn, Xian 710049, Shaanxi, Peoples R China. Ul Abideen, Zain, Xi An Jiao Tong Univ, Dept Comp Sci, Xian 710049, Shaanxi, Peoples R China. Ullah, Kalim, CECOS Univ IT \& Emerging Sci, Dept Comp Sci, Peshawar, Pakistan.}},
	article-number = {{2897565}},
	author = {Ali, Amir and Ul Abideen, Zain and Ullah, Kalim},
	author-email = {{amir.ali@stu.xjtu.edu.cn}},
	bdsk-color = {5},
	da = {{2021-11-07}},
	date-modified = {2021-11-13 06:40:21 +0100},
	doc-delivery-number = {{WB1GG}},
	doi = {{10.1155/2021/2897565}},
	eissn = {{1939-0122}},
	issn = {{1939-0114}},
	journal = {{SECURITY AND COMMUNICATION NETWORKS}},
	journal-iso = {{Secur. Commun. Netw.}},
	language = {{English}},
	month = {{SEP 21}},
	number-of-cited-references = {{31}},
	oa = {{gold}},
	publisher = {{WILEY-HINDAWI}},
	read = {1},
	research-areas = {{Computer Science; Telecommunications}},
	times-cited = {{0}},
	title = {{SESCon: Secure Ethereum Smart Contracts by Vulnerable Patterns' Detection}},
	type = {{Article}},
	unique-id = {{WOS:000703327100001}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{2021}},
	web-of-science-categories = {{Computer Science, Information Systems; Telecommunications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1155/2021/2897565},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAUYXJ0aWNsZXMvMjg5NzU2NS5wZGZPEQGuAAAAAAGuAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8LMjg5NzU2NS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAMAAAogY3UAAAAAAAAAAAAAAAAACGFydGljbGVzAAIAXi86VXNlcnM6YW5kcmVzdG9yaGF1ZzpQcm9ncmFtbWluZzpQcm9qZWN0czptYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0OmRhdGE6YXJ0aWNsZXM6Mjg5NzU2NS5wZGYADgAYAAsAMgA4ADkANwA1ADYANQAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAXFVzZXJzL2FuZHJlc3RvcmhhdWcvUHJvZ3JhbW1pbmcvUHJvamVjdHMvbWFzdGVyLXByZWxpbWluYXJ5LXJlcG9ydC9kYXRhL2FydGljbGVzLzI4OTc1NjUucGRmABMAAS8AABUAAgAU//8AAAAIAA0AGgAkADsAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAB7Q==}}

@article{WOS:000685204500074,
	abstract = {{The term ``smart contracts{''} has become ubiquitous to describe an
   enormous number of programs uploaded to the popular Ethereum blockchain
   system. Despite rapid growth of the smart contract ecosystem, errors and
   exploitations have been constantly reported from online contract
   systems, which has put financial stability at risk with losses totaling
   millions of US dollars. Most existing research focuses on pinpointing
   specific types of vulnerabilities using known patterns. However, due to
   the lack of awareness of the inherent nondeterminism in the Ethereum
   blockchain system and how it affects the funds transfer of smart
   contracts, there can be unknown vulnerabilities that may be exploited by
   attackers to access numerous online smart contracts.
   In this paper, we introduce a methodical approach to understanding the
   inherent nondeterminism in the Ethereum blockchain system and its
   (unwanted) influence on contract payments. We show that our new focus on
   nondeterminism-related smart contract payment bugs captures the root
   causes of many common vulnerabilities without relying on any known
   patterns and also encompasses recently disclosed issues that are not
   handled by existing research. To do so, we introduce techniques to
   systematically model components in the contract execution context and to
   expose various nondeterministic factors that are not yet fully
   understood. We further study how these nondeterministic factors impact
   contract funds transfer using information flow tracking. The technical
   challenge of detecting nondeterministic payments lies in discovering the
   contract global variables subtly affected by read-write hazards because
   of unpredictable transaction scheduling and external callee behavior. We
   show how to augment and instrument a contract program into a
   representation that simulates the execution of a large subset of the
   contract behavior. The instrumented code is then analyzed to flag
   nondeterministic global variables using off-the-shelf model checkers.
   We implement the proposed techniques as a practical tool named NPCHECKER
   (Nondeterministic Payment Checker) and evaluate it on 30K online
   contracts (3,075 distinct) collected from the Ethereum mainnet.
   NPCHECKER has successfully detected nondeterministic payments in 1,111
   online contracts with reasonable cost. Further investigation reports
   high precision of NPCHECKER (only four false positives in a manual study
   of 50 contracts). We also show that NPCHECKER unveils contracts
   vulnerable to recently-disclosed attack vectors. NPCHECKER can identify
   all six new vulnerabilities or variants of common smart contract
   vulnerabilities that are missed by existing research relying on a
   ``contract vulnerability checklist.{''}}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Wang, S (Corresponding Author), Hong Kong Univ Sci \& Technol, Hong Kong, Peoples R China. Wang, Shuai; Su, Zhendong, Hong Kong Univ Sci \& Technol, Hong Kong, Peoples R China. Zhang, Chengyu, East China Normal Univ, Shanghai, Peoples R China. Su, Zhendong, Swiss Fed Inst Technol, Zurich, Switzerland.}},
	article-number = {{189}},
	author = {Wang, Shuai and Zhang, Chengyu and Su, Zhendong},
	author-email = {{shuaiw@cse.ust.hk dale.chengyu.zhang@gmail.com zhendong.su@inf.ethz.ch}},
	bdsk-color = {2},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 21:17:47 +0100},
	doc-delivery-number = {{VK3VG}},
	doi = {{10.1145/3360615}},
	eissn = {{2475-1421}},
	funding-acknowledgement = {{China Scholarship CouncilChina Scholarship Council; NSFCNational Natural Science Foundation of China (NSFC) {[}61572197, 61632005]}},
	funding-text = {{We thank the anonymous SPLASH/OOPSLA reviewers for their valuable feedback. Our special thanks go to the JEB3, Smack, and EVMJIT developers who provided us with much help, insight and advice. Chengyu Zhang was partially supported by the China Scholarship Council, and NSFC Projects No. 61572197 and No. 61632005.}},
	journal = {{PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL}},
	journal-iso = {{P. ACM Program. Lang.}},
	keywords = {{Program Analysis; Smart Contracts; Security; Blockchain}},
	language = {{English}},
	month = {{OCT}},
	number-of-cited-references = {{35}},
	oa = {{gold, Green Published}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{6}},
	title = {{Detecting Nondeterministic Payment Bugs in Ethereum Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000685204500074}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{3}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3360615}}

@inproceedings{WOS:000503498000035,
	abstract = {{We investigate a family of bugs in blockchain-based smart contracts,
   which we dub event-ordering(or EO) bugs. These bugs are intimately
   related to the dynamic ordering of contract events, i.e. calls of its
   functions, and enable potential exploits of millions of USD worth of
   crypto-coins. Previous techniques to detect EO bugs have been restricted
   to those bugs that involve just one or two event orderings. Our work
   provides a new formulation of the general class of EO bugs arising in
   long permutations of such events by using techniques from concurrent
   program analysis.
   The technical challenge in detecting EO bugs in blockchain contracts is
   the inherent combinatorial blowup in path and state space analysis, even
   for simple contracts. We propose the first use of partial-order
   reduction techniques, using automatically extracted happens-before
   relations along with several dynamic symbolic execution optimizations.
   We build ETHRACER, an automatic analysis tool that runs directly on
   Ethereum bytecode and requires no hints from users. It flags 8\% of over
   10, 000 contracts analyzed, providing compact event traces (witnesses)
   that human analysts can examine in only a few minutes per contract. More
   than half of the flagged contracts are likely to have unintended
   behavior.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Kolluri, A (Corresponding Author), NUS, Sch Comp, Singapore, Singapore. Kolluri, Aashish; Nikolic, Ivica; Saxena, Prateek, NUS, Sch Comp, Singapore, Singapore. Sergey, Ilya; Hobor, Aquinas, NUS, Sch Comp, Yale NUS Coll, Singapore, Singapore.}},
	author = {Kolluri, Aashish and Nikolic, Ivica and Sergey, Ilya and Hobor, Aquinas and Saxena, Prateek},
	bdsk-color = {3},
	booktitle = {{PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA `19)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:51:29 +0100},
	doc-delivery-number = {{BO1ZS}},
	doi = {{10.1145/3293882.3330560}},
	editor = {{Zhang, DM and Moller, A}},
	funding-acknowledgement = {{Crystal Center at National University Of Singapore; Ministry of Education, SingaporeMinistry of Education, Singapore {[}R-252-000-560-112]; Yale-NUS College grant {[}R-607-265-322-121]}},
	funding-text = {{We thank Shweta Shinde and Shiqi Shen for their valuable comments and their help with writing a previous version of this paper. We thank sponsors of the Crystal Center at National University Of Singapore which has supported this work. Further, Ivica Nikolic is supported by the Ministry of Education, Singapore under Grant No. R-252-000-560-112. Aquinas Hobor was partially supported by Yale-NUS College grant R-607-265-322-121.}},
	isbn = {{978-1-4503-6224-5}},
	keywords = {{Smart Contract Security; Concurrency; Ethereum; Happens-Before}},
	keywords-plus = {{RACE DETECTION}},
	language = {{English}},
	note = {{28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), Beijing, PEOPLES R CHINA, JUL 15-19, 2019}},
	number-of-cited-references = {{42}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Sergey, Ilya/0000-0003-4250-5392}},
	organization = {{Assoc Comp Machinery; ACM SIGSOFT; Microsoft Res; DiDi; Google; Huawei; MoocTest; Facebook; Fujitsu; Sourcebrella; UCLouvain}},
	pages = {{363-373}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{9}},
	title = {{Exploiting the Laws of Order in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000503498000035}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3293882.3330560}}

@inproceedings{WOS:000491481600004,
	abstract = {{The recent growth of the blockchain technology market puts its main
   cryptocurrencies in the spotlight. Among them, Ethereum stands out due
   to its virtual machine (EVM) supporting smart contracts, i.e.,
   distributed programs that control the flow of the digital currency
   Ether. Being written in a Turing complete language, Ethereum smart
   contracts allow for expressing a broad spectrum of financial
   applications. The price for this expressiveness, however, is a
   significant semantic complexity, which increases the risk of programming
   errors. Recent attacks exploiting bugs in smart contract implementations
   call for the design of formal verification techniques for smart
   contracts. This, however, requires rigorous semantic foundations, a
   formal characterization of the expected security properties, and
   dedicated abstraction techniques tailored to the specific EVM semantics.
   This work will overview the state-of-the-art in smart contract
   verification, covering formal semantics, security definitions, and
   verification tools. We will then focus on EtherTrust {[}1], a framework
   for the static analysis of Ethereum smart contracts which includes the
   first complete small-step semantics of EVM bytecode, the first formal
   characterization of a large class of security properties for smart
   contracts, and the first static analysis for EVM bytecode that comes
   with a proof of soundness.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Grishchenko, I; Maffei, M; Schneidewind, C (Corresponding Author), TU Wien, Vienna, Austria. Grishchenko, Ilya; Maffei, Matteo; Schneidewind, Clara, TU Wien, Vienna, Austria.}},
	author = {Grishchenko, Ilya and Maffei, Matteo and Schneidewind, Clara},
	author-email = {{ilya.grishchenko@tuwien.ac.at matteo.maffei@tuwien.ac.at clara.schneidewind@tuwien.ac.at}},
	bdsk-color = {4},
	booktitle = {{COMPUTER AIDED VERIFICATION (CAV 2018), PT I}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:43:31 +0100},
	doc-delivery-number = {{BO0KH}},
	doi = {{10.1007/978-3-319-96145-3\_4}},
	editor = {{Chockler, H and Weissenbacher, G}},
	eissn = {{1611-3349}},
	funding-acknowledgement = {{European Research Council (ERC) under the European Union's Horizon 2020 researchEuropean Research Council (ERC) {[}771527-BROWSEC]; Netidee through the project EtherTrust {[}2158]; Austrian Research Promotion Agency through the Bridge-1 project PR4DLT {[}13808694]; COMET K1 SBA}},
	funding-text = {{This work has been partially supported by the European Research Council (ERC) under the European Union's Horizon 2020 research (grant agreement No 771527-BROWSEC), by Netidee through the project EtherTrust (grant agreement 2158), by the Austrian Research Promotion Agency through the Bridge-1 project PR4DLT (grant agreement 13808694) and COMET K1 SBA.}},
	isbn = {{978-3-319-96145-3; 978-3-319-96144-6}},
	issn = {{0302-9743}},
	language = {{English}},
	note = {{30th International Conference on Computer-Aided Verification (CAV) Held as Part of the Federated Logic Conference (FloC), Oxford, ENGLAND, JUL 14-17, 2018}},
	number-of-cited-references = {{36}},
	oa = {{hybrid}},
	pages = {{51-78}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{24}},
	title = {{Foundations and Tools for the Static Analysis of Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000491481600004}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{3}},
	volume = {{10981}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-96145-3%5C_4}}

@inproceedings{WOS:000445805600011,
	abstract = {{Blockchain-based distributed computing platforms enable the trusted
   execution of computation-defined in the form of smart contracts-without
   trusted agents. Smart contracts are envisioned to have a variety of
   applications, ranging from financial to IoT asset tracking.
   Unfortunately, the development of smart contracts has proven to be
   extremely error prone. In practice, contracts are riddled with security
   vulnerabilities comprising a critical issue since bugs are by design
   nonfixable and contracts may handle financial assets of significant
   value. To facilitate the development of secure smart contracts, we have
   created the FSolidM framework, which allows developers to define
   contracts as finite state machines (FSMs) with rigorous and clear
   semantics. FSolidM provides an easy-to-use graphical editor for
   specifying FSMs, a code generator for creating Ethereum smart contracts,
   and a set of plugins that developers may add to their FSMs to enhance
   security and functionality.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Laszka, A (Corresponding Author), Univ Houston, Houston, TX 77004 USA. Mavridou, Anastasia, Vanderbilt Univ, 221 Kirkland Hall, Nashville, TN 37235 USA. Laszka, Aron, Univ Houston, Houston, TX 77004 USA.}},
	author = {Mavridou, Anastasia and Laszka, Aron},
	author-email = {{alaszka@uh.edu}},
	booktitle = {{PRINCIPLES OF SECURITY AND TRUST, POST 2018}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BL0GW}},
	doi = {{10.1007/978-3-319-89722-6\_11}},
	editor = {{Bauer, L and Kusters, R}},
	eissn = {{1611-3349}},
	isbn = {{978-3-319-89722-6; 978-3-319-89721-9}},
	issn = {{0302-9743}},
	keywords = {{Smart contract; Security; Finite state machine Ethereum; Solidity; Automatic code generation; Design patterns}},
	language = {{English}},
	note = {{7th International Conference on Principles of Security and Trust (POST) Held as Part of the 21st European Joint Conferences on Theory and Practice of Software (ETAPS), Thessaloniki, GREECE, APR 14-20, 2018}},
	number-of-cited-references = {{15}},
	oa = {{Green Submitted, hybrid}},
	orcid-numbers = {{Laszka, Aron/0000-0001-7400-2357}},
	pages = {{270-277}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014 Laszka, Aron/AAA-2038-2020}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{15}},
	title = {{Tool Demonstration: FSolidM for Designing Secure Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000445805600011}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{3}},
	volume = {{10804}},
	web-of-science-categories = {{Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-89722-6%5C_11}}

@inproceedings{WOS:000540656400028,
	abstract = {{The adoption of blockchain-based distributed computation platforms is
   growing fast. Some of these platforms, such as Ethereum, provide support
   for implementing smart contracts, which are envisioned to have novel
   applications in a broad range of areas, including finance and the
   Internet-of-Things. However, a significant number of smart contracts
   deployed in practice suffer from security vulnerabilities, which enable
   malicious users to steal assets from a contract or to cause damage.
   Vulnerabilities present a serious issue since contracts may handle
   financial assets of considerable value, and contract bugs are
   non-fixable by design. To help developers create more secure smart
   contracts, we introduce FSolidM, a framework rooted in rigorous
   semantics for designing contracts as Finite State Machines (FSM). We
   present a tool for creating FSM on an easy-to-use graphical interface
   and for automatically generating Ethereum contracts. Further, we
   introduce a set of design patterns, which we implement as plugins that
   developers can easily add to their contracts to enhance security and
   functionality.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Mavridou, A (Corresponding Author), Vanderbilt Univ, 221 Kirkland Hall, Nashville, TN 37235 USA. Mavridou, Anastasia, Vanderbilt Univ, 221 Kirkland Hall, Nashville, TN 37235 USA. Laszka, Aron, Univ Houston, Houston, TX USA.}},
	author = {Mavridou, Anastasia and Laszka, Aron},
	author-email = {{anastasia.mavridou@vanderbilt.edu}},
	booktitle = {{FINANCIAL CRYPTOGRAPHY AND DATA SECURITY, FC 2018}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 21:07:33 +0100},
	doc-delivery-number = {{BP1RW}},
	doi = {{10.1007/978-3-662-58387-6\_28}},
	editor = {{Meiklejohn, S and Sako, K}},
	eissn = {{1611-3349}},
	isbn = {{978-3-662-58387-6; 978-3-662-58386-9}},
	issn = {{0302-9743}},
	keywords = {{Smart contract; Security; Finite state machine; Ethereum; Solidity; Automatic code generation; Design patterns}},
	language = {{English}},
	note = {{22nd International Conference on Financial Cryptography and Data Security (FC), Nieuwpoort, CURACAO, FEB 26-MAR 02, 2018}},
	number-of-cited-references = {{20}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Laszka, Aron/0000-0001-7400-2357}},
	organization = {{Blockchain Inst; Ethereum Fdn; Zcash; Kadena; Maker; Protocol Labs; BANEX; Blockstream; Chia; Journal Cybersecur; Mosaic; TrueBit; WorldPay}},
	pages = {{523-540}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{7}},
	title = {{Designing Secure Ethereum Smart Contracts: A Finite State Machine Based Approach}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000540656400028}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{5}},
	volume = {{10957}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-662-58387-6%5C_28}}

@inproceedings{WOS:000553784500027,
	abstract = {{Decentralized cryptocurrencies feature the use of blockchain to transfer
   values among peers on networks without central agency. Smart contracts
   are programs running on top of the blockchain consensus protocol to
   enable people make agreements while minimizing trusts. Millions of smart
   contracts have been deployed in various decentralized applications. The
   security vulnerabilities within those smart contracts pose significant
   threats to their applications. Indeed, many critical security
   vulnerabilities within smart contracts on Ethereum platform have caused
   huge financial losses to their users. In this work, we present
   ContractFuzzer, a novel fuzzer to test Ethereum smart contracts for
   security vulnerabilities. ContractFuzzer generates fuzzing inputs based
   on the ABI specifications of smart contracts, defines test oracles to
   detect security vulnerabilities, instruments the EVM to log smart
   contracts runtime behaviors, and analyzes these logs to report security
   vulnerabilities. Our fuzzing of 6991 smart contracts has flagged more
   than 459 vulnerabilities with high precision. In particular, our fuzzing
   tool successfully detects the vulnerability of the DAO contract that
   leads to \$60 million loss and the vulnerabilities of Parity Wallet that
   have led to the loss of \$30 million and the freezing of \$150 million
   worth of Ether.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Jiang, B (Corresponding Author), Beihang Univ, Sch Comp Sci \& Engn, Beijing, Peoples R China. Jiang, Bo; Liu, Ye, Beihang Univ, Sch Comp Sci \& Engn, Beijing, Peoples R China. Chan, W. C., City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.}},
	author = {Jiang, Bo and Liu, Ye and Chan, W. C.},
	author-email = {{jiangbo@buaa.edu.cn franklin@buaa.edu.cn wkchan@city.edu.hk}},
	bdsk-color = {7},
	booktitle = {{PROCEEDINGS OF THE 2018 33RD IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMTED SOFTWARE ENGINEERING (ASE' 18)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 23:30:41 +0100},
	doc-delivery-number = {{BP4SF}},
	doi = {{10.1145/3238147.3238177}},
	editor = {{Huchard, M and Kastner, C and Fraser, G}},
	funding-acknowledgement = {{NSFCNational Natural Science Foundation of China (NSFC) {[}61772056]; MITT of China {[}MJ-Y-2012-07]; GRF of Research Grants Council {[}11214116, 11200015, 11201114]; State Key Laboratory of Virtual Reality Technology and Systems}},
	funding-text = {{This research is supported in part by NSFC (project no. 61772056), the Research Fund of the MITT of China (project no. MJ-Y-2012-07), the GRF of Research Grants Council (project no. 11214116, 11200015, and 11201114), and the State Key Laboratory of Virtual Reality Technology and Systems.}},
	isbn = {{978-1-4503-5937-5}},
	issn = {{1527-1366}},
	keywords = {{Fuzzing; Fuzzer; Smart contract; Vulnerability; Test oracle; Ethereum; Blockchain}},
	language = {{English}},
	note = {{33rd IEEE/ACM International Conference on Automated Software Engineering (ASE), Montpellier, FRANCE, SEP 03-07, 2018}},
	number-of-cited-references = {{15}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; ACM SIGSOFT; ACM SIGAI; CNRS; IEEE CS; Huawei; Berger Levrault; Mobioos; Toyota InfoTechnol Ctr; Reg Occitanie; Inria; LIRMM; Univ Montpellier; Inst Mines Telecom Ecole Mines Telecom; Montpellier Univ Excellence; Investissements DAvenir}},
	pages = {{259-269}},
	publisher = {{IEEE}},
	read = {1},
	research-areas = {{Computer Science}},
	series = {{IEEE ACM International Conference on Automated Software Engineering}},
	times-cited = {{56}},
	title = {{ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000553784500027}},
	usage-count-last-180-days = {{7}},
	usage-count-since-2013 = {{10}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1145/3238147.3238177}}

@inproceedings{WOS:000387820900011,
	abstract = {{Cryptocurrencies record transactions in a decentralized data structure
   called a blockchain. Two of the most popular cryptocurrencies, Bitcoin
   and Ethereum, support the feature to encode rules or scripts for
   processing transactions. This feature has evolved to give practical
   shape to the ideas of smart contracts, or full-fledged programs that are
   run on blockchains. Recently, Ethereum's smart contract system has seen
   steady adoption, supporting tens of thousands of contracts, holding
   millions dollars worth of virtual coins.
   In this paper, we investigate the security of running smart contracts
   based on Ethereum in an open distributed network like those of
   cryptocurrencies. We introduce several new security problems in which an
   adversary can manipulate smart contract execution to gain pro fit. These
   bugs suggest subtle gaps in the understanding of the distributed
   semantics of the underlying platform. As a refinement, we propose ways
   to enhance the operational semantics of Ethereum to make contracts less
   vulnerable. For developers writing contracts for the existing Ethereum
   system, we build a symbolic execution tool called OYENTE to find
   potential security bugs. Among 19; 366 existing Ethereum contracts,
   OYENTE flags 8; 833 of them as vulnerable, including the TheDAO bug
   which led to a 60 million US dollar loss in June 2016. We also discuss
   the severity of other attacks for several case studies which have source
   code available and confirm the attacks (which target only our accounts)
   in the main Ethereum network.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Luu, L (Corresponding Author), Natl Univ Singapore, Singapore 117548, Singapore. Luu, Loi; Chu, Duc-Hiep; Saxena, Prateek; Hobor, Aquinas, Natl Univ Singapore, Singapore 117548, Singapore. Olickel, Hrishi; Hobor, Aquinas, Yale NUS Coll, Singapore, Singapore.}},
	author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
	author-email = {{loiluu@comp.nus.edu.sg hiepcd@comp.nus.edu.sg hrishi.olickel@yale-nus.edu.sg prateeks@comp.nus.edu.sg hobor@comp.nus.edu.sg}},
	bdsk-color = {5},
	book-group-author = {{ACM}},
	booktitle = {{CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 20:49:32 +0100},
	doc-delivery-number = {{BG2ZW}},
	doi = {{10.1145/2976749.2978309}},
	isbn = {{978-1-4503-4139-4}},
	language = {{English}},
	note = {{23rd ACM Conference on Computer and Communications Security (CCS), Vienna, AUSTRIA, OCT 24-28, 2016}},
	number-of-cited-references = {{28}},
	organization = {{Assoc Comp Machinery; ACM Special Interest Grp Secur Audit \& Control}},
	pages = {{254-269}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	read = {1},
	research-areas = {{Computer Science; Telecommunications}},
	researcherid-numbers = {{Sanchez-Gomez, Nicolas/K-3758-2014}},
	times-cited = {{395}},
	title = {{Making Smart Contracts Smarter}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000387820900011}},
	usage-count-last-180-days = {{11}},
	usage-count-since-2013 = {{132}},
	web-of-science-categories = {{Computer Science, Information Systems; Telecommunications}},
	year = {{2016}},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxArYXJ0aWNsZXMvTWFraW5nIFNtYXJ0IENvbnRyYWN0cyBTbWFydGVyLnBkZk8RAgwAAAAAAgwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////x9NYWtpbmcgU21hcnQgQ29udHIjRkZGRkZGRkYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAwAACiBjdQAAAAAAAAAAAAAAAAAIYXJ0aWNsZXMAAgB1LzpVc2VyczphbmRyZXN0b3JoYXVnOlByb2dyYW1taW5nOlByb2plY3RzOm1hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQ6ZGF0YTphcnRpY2xlczpNYWtpbmcgU21hcnQgQ29udHJhY3RzIFNtYXJ0ZXIucGRmAAAOAEYAIgBNAGEAawBpAG4AZwAgAFMAbQBhAHIAdAAgAEMAbwBuAHQAcgBhAGMAdABzACAAUwBtAGEAcgB0AGUAcgAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAc1VzZXJzL2FuZHJlc3RvcmhhdWcvUHJvZ3JhbW1pbmcvUHJvamVjdHMvbWFzdGVyLXByZWxpbWluYXJ5LXJlcG9ydC9kYXRhL2FydGljbGVzL01ha2luZyBTbWFydCBDb250cmFjdHMgU21hcnRlci5wZGYAABMAAS8AABUAAgAU//8AAAAIAA0AGgAkAFIAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAACYg==},
	bdsk-url-1 = {https://doi.org/10.1145/2976749.2978309}}

@inproceedings{WOS:000561703600033,
	abstract = {{In this paper, we introduce a machine learning predictive model that
   detects patterns of security vulnerabilities in smart contracts. We
   adapted two static code analyzers to label more than 1000 smart
   contracts that were verified and used on the Ethereum platform. Our
   model predicted a number of major software vulnerabilities with the
   average accuracy of 95 percent. The model currently supports smart
   contracts developed in Solidity, however, the approach described in this
   paper can be applied to other languages and blockchain platforms.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Momeni, P (Corresponding Author), McMaster Univ, Hamilton, ON, Canada. Momeni, Pouyan; Wang, Yu; Samavi, Reza, McMaster Univ, Hamilton, ON, Canada.}},
	author = {Momeni, Pouyan and Wang, Yu and Samavi, Reza},
	author-email = {{momenip@mcmaster.ca wang873@mcmaster.ca samavir@mcmaster.ca}},
	bdsk-color = {6},
	booktitle = {{2019 17TH INTERNATIONAL CONFERENCE ON PRIVACY, SECURITY AND TRUST (PST)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{BP7DZ}},
	editor = {{Ghorbani, A and Ray, I and Lashkari, AH and Zhang, J and Lu, R}},
	funding-acknowledgement = {{NSERCNatural Sciences and Engineering Research Council of Canada (NSERC); MITACS}},
	funding-text = {{Supports from NSERC, MITACS and Vector Institute for Artificial Intelligence are acknowledged.}},
	isbn = {{978-1-7281-3265-5}},
	issn = {{1712-364X}},
	keywords = {{blockchain; smart contract; security vulnerability; machine learning; code analysis; software testing}},
	language = {{English}},
	note = {{17th International Conference on Privacy, Security and Trust (PST), Fredericton, CANADA, AUG 26-28, 2019}},
	number-of-cited-references = {{25}},
	organization = {{IEEE; Atlantic Canada Opportunities Agcy; TD Bank; IEEE New Brunswick Sect; CyberNB; Ignite Fredericton; ARMIS}},
	pages = {{272-277}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	series = {{Annual Conference on Privacy Security and Trust-PST}},
	times-cited = {{0}},
	title = {{Machine Learning Model for Smart Contracts Security Analysis}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000561703600033}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2019}}}

@article{WOS:000575515300019,
	abstract = {{Ethereum is a distributed blockchain platform, serving as an ecosystem
   for smart contracts: full-fledged intercommunicating programs that
   capture the transaction logic of an account. A gas limit caps the
   execution of an Ethereum smart contract: instructions, when executed,
   consume gas, and the execution proceeds as long as gas is available.
   Gas-focused vulnerabilities permit an attacker to force key contract
   functionality to run out of gas-effectively performing a permanent
   denial-of-service attack on the contract. Such vulnerabilities are among
   the hardest for programmers to protect against, as out-of-gas behavior
   may be uncommon in nonattack scenarios and reasoning about these
   vulnerabilities is nontrivial.
   In this paper, we identify gas-focused vulnerabilities and present
   MadMax: a static program analysis technique that automatically detects
   gas-focused vulnerabilities with very high confidence. MadMax combines a
   smart contract decompiler and semantic queries in Datalog. Our approach
   captures high-level program modeling concepts (such as ``dynamic data
   structure storage{''} and ``safely resumable loops{''}) and delivers
   high precision and scalability. MadMax analyzes the entirety of smart
   contracts in the Ethereum blockchain in just 10 hours and flags
   vulnerabilities in contracts with a monetary value in billions of
   dollars. Manual inspection of a sample of flagged contracts shows that
   81\% of the sampled warnings do indeed lead to vulnerabilities.}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Grech, N (Corresponding Author), Univ Athens, Athens, Greece. Grech, Neville; Smaragdakis, Yannis, Univ Athens, Athens, Greece. Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard, Univ Sydney, Sydney, NSW, Australia.}},
	author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
	author-email = {{me@nevillegrech.com mkon1090@uni.sydney.edu ajur4521@uni.sydney.edu lexi.brent@sydney.edu.au bernhard.scholz@sydney.edu.au smaragd@di.uoa.gr}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:13:00 +0100},
	doc-delivery-number = {{NX1ZP}},
	doi = {{10.1145/3416262}},
	eissn = {{1557-7317}},
	funding-acknowledgement = {{Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC) {[}DP180104030]; European Research CouncilEuropean Research Council (ERC)European Commission {[}307334, 790340]; REACH HIGH Scholars Programme; European Union, Operational Program II, Cohesion Policy}},
	funding-text = {{This research was supported partially by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). We gratefully acknowledge funding by the European Research Council, grants 307334 and 790340. In addition, the research work disclosed is partially funded by the REACH HIGH Scholars Programme -Post-Doctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the well-being of society - European Social Fund).}},
	issn = {{0001-0782}},
	journal = {{COMMUNICATIONS OF THE ACM}},
	journal-iso = {{Commun. ACM}},
	language = {{English}},
	month = {{OCT}},
	number = {{10}},
	number-of-cited-references = {{17}},
	pages = {{87-95}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	read = {1},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Smaragdakis, Yannis/AAM-2851-2021}},
	times-cited = {{2}},
	title = {{MadMax: Analyzing the Out-of-Gas World of Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000575515300019}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{4}},
	volume = {{63}},
	web-of-science-categories = {{Computer Science, Hardware \& Architecture; Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3416262}}

@article{WOS:000680892400029,
	abstract = {{Smart contracts are decentralized applications running on Blockchain. A
   very large number of smart contracts has been deployed on Ethereum.
   Meanwhile, security flaws of contracts have led to huge pecuniary losses
   and destroyed the ecological stability of contract layer on Blockchain.
   It is thus an emerging yet crucial issue to effectively and efficiently
   detect vulnerabilities in contracts. Existing detection methods like
   Oyente and Securify are mainly based on symbolic execution or analysis.
   These methods are very time-consuming, as the symbolic execution
   requires the exploration of all executable paths or the analysis of
   dependency graphs in a contract. In this work, we propose ContractWard
   to detect vulnerabilities in smart contracts with machine learning
   techniques. First, we extract bigram features from simplified operation
   codes of smart contracts. Second, we employ five machine learning
   algorithms and two sampling algorithms to build the models. ContractWard
   is evaluated with 49502 real-world smart contracts running on Ethereum.
   The experimental results demonstrate the effectiveness and efficiency of
   ContractWard. The predictive Micro-F1 and Macro-F1 of ContractWard are
   over 96\% and the average detection time is 4 seconds on each smart
   contract when we use XGBoost for training the models andSMOTETomek for
   balancing the training sets.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
	affiliation = {{Li, YD (Corresponding Author), Beijing Jiaotong Univ, Beijing Key Lab Secur \& Privacy Intelligent Trans, Beijing 100044, Peoples R China. Xu, GQ (Corresponding Author), Tianjin Univ, Coll Intelligence \& Comp, Tianjin Key Lab Adv Networking, Tianjin 300350, Peoples R China. Wang, Wei; Song, Jingjing; Li, Yidong, Beijing Jiaotong Univ, Beijing Key Lab Secur \& Privacy Intelligent Trans, Beijing 100044, Peoples R China. Wang, Wei, King Abdullah Univ Sci \& Technol KAUST, Div Comp Elect \& Math Sci \& Engn CEMSE, Thuwal 239556900, Saudi Arabia. Xu, Guangquan, Tianjin Univ, Coll Intelligence \& Comp, Tianjin Key Lab Adv Networking, Tianjin 300350, Peoples R China. Wang, Hao, Norwegian Univ Sci \& Technol, Dept Comp Sci, N-2815 Gjovik, Norway. Su, Chunhua, Univ Aizu, Div Comp Sci, Aizu Wakamatsu, Fukushima 9658580, Japan.}},
	author = {Wang, Wei and Song, Jingjing and Xu, Guangquan and Li, Yidong and Wang, Hao and Su, Chunhua},
	author-email = {{wangwei1@bjtu.edu.cn 17120479@bjtu.edu.cn losin@tju.edu.cn ydli@bjtu.edu.cn hawa@ntnu.no suchunhua@gmail.com}},
	bdsk-color = {6},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:40 +0100},
	doc-delivery-number = {{TU2SY}},
	doi = {{10.1109/TNSE.2020.2968505}},
	funding-acknowledgement = {{Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}U1736114]; National Key R\&D Program of China {[}2017YFB0802805]; JSPS Kiban(B) {[}18H03240]; JSPS Kiban(C) {[}18K11298]}},
	funding-text = {{The work reported in this paper was supported in part by the Natural Science Foundation of China under Grant U1736114 and in part by the National Key R\&D Program of China under Grant 2017YFB0802805. Chunhua Su was supported in part by JSPS Kiban(B) 18H03240 and in part by JSPS Kiban(C) 18K11298.}},
	issn = {{2327-4697}},
	journal = {{IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING}},
	journal-iso = {{IEEE Trans. Netw. Sci. Eng.}},
	keywords = {{Blockchain; machine learning; smart contracts; vulnerability detection}},
	keywords-plus = {{BEHAVIOR; APPS}},
	language = {{English}},
	month = {{APR-JUN}},
	number = {{2}},
	number-of-cited-references = {{51}},
	oa = {{Green Submitted}},
	orcid-numbers = {{WANG, WEI/0000-0002-5974-1589 Wang, Hao/0000-0001-9301-5989}},
	pages = {{1133-1144}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Engineering; Mathematics}},
	researcherid-numbers = {{Wang, Hao/B-3650-2019}},
	times-cited = {{12}},
	title = {{ContractWard: Automated Vulnerability Detection Models for Ethereum Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000680892400029}},
	usage-count-last-180-days = {{11}},
	usage-count-since-2013 = {{14}},
	volume = {{8}},
	web-of-science-categories = {{Engineering, Multidisciplinary; Mathematics, Interdisciplinary Applications}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/TNSE.2020.2968505}}

@inproceedings{WOS:000469455400001,
	abstract = {{Blockchain is a decentralized ledger technology, and it is the
   technology underlying Bitcoin and Ethereum. The interest in blockchain
   has been increasing since its emergence. Hyperledger Fabric is one of
   the permissioned blockchain frameworks. One of the characteristics of
   Hyperledger Fabric is it utilizes general-purpose programming languages,
   e.g., Go, Node.js, and Java, to implement smart contracts (called
   chaincode in Hyperledger Fabric). The advantages of utilizing these
   languages are already known to potential developers, and development
   tools might already exist. However, one of the disadvantages is that
   these languages were not originally designed for writing smart
   contracts. Hence, there may be risks that developers do not need to
   consider when using specific languages such as Solidity of Ethereum.
   Furthermore, even though development tools exist, how many risks are
   covered by the tools is an open question. In this paper, we focus on Go
   language and the tools. First, we surveyed what kind of risks are
   associated with chaincodes are developed using Go language and observed
   there are 14 potential risks. Then, we investigated how many risks can
   be covered by Go tools, e.g., golint and gosec, and a vulnerability
   detection tool for chaincodes called Chaincode Scanner. From our
   results, we observed that some risks are not covered by the existing
   tools. Hence, we develop a detection tool to cover risks by static
   analysis. Finally, in this paper, we describe how to find the risks with
   our tool and evaluate the usefulness.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Yamashita, K (Corresponding Author), Fujitsu Labs Ltd, Kawasaki, Kanagawa, Japan. Yamashita, Kazuhiro; Nomura, Yoshihide, Fujitsu Labs Ltd, Kawasaki, Kanagawa, Japan. Zhou, Ence; Pi, Bingfeng; Jun, Sun, FUJITSU Res \& Dev Ctr, Beijing, Peoples R China.}},
	author = {Yamashita, Kazuhiro and Nomura, Yoshihide and Zhou, Ence and Pi, Bingfeng and Jun, Sun},
	author-email = {{y-kazuhiro@fujitsu.com y.nomura@fujitsu.com zhouence@cn.fujitsu.com winter.pi@cn.fujitsu.com sunjung@cn.fujitsu.com}},
	bdsk-color = {5},
	booktitle = {{2019 IEEE 2ND INTERNATIONAL WORKSHOP ON BLOCKCHAIN ORIENTED SOFTWARE ENGINEERING (IWBOSE)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-14 03:41:28 +0100},
	doc-delivery-number = {{BM8NJ}},
	editor = {{Tonelli, R and Ducasse, S and Marchesi, M and Bracciali, A}},
	isbn = {{978-1-7281-1807-9}},
	keywords = {{Smart Contract; Validation Tool; Blockchain; Hyperledger Fabric}},
	language = {{English}},
	note = {{2nd IEEE International Workshop on Blockchain Oriented Software Engineering (IWBOSE), Hangzhou, PEOPLES R CHINA, FEB 24, 2019}},
	number-of-cited-references = {{28}},
	organization = {{IEEE; IEEE Comp Soc}},
	pages = {{1-10}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{24}},
	title = {{Potential Risks of Hyperledger Fabric Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000469455400001}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{8}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBCYXJ0aWNsZXMvUG90ZW50aWFsX1Jpc2tzX29mX0h5cGVybGVkZ2VyX0ZhYnJpY19TbWFydF9Db250cmFjdHMucGRmTxECZgAAAAACZgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H1BvdGVudGlhbF9SaXNrc19vZiNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQADAAAKIGN1AAAAAAAAAAAAAAAAAAhhcnRpY2xlcwACAIwvOlVzZXJzOmFuZHJlc3RvcmhhdWc6UHJvZ3JhbW1pbmc6UHJvamVjdHM6bWFzdGVyLXByZWxpbWluYXJ5LXJlcG9ydDpkYXRhOmFydGljbGVzOlBvdGVudGlhbF9SaXNrc19vZl9IeXBlcmxlZGdlcl9GYWJyaWNfU21hcnRfQ29udHJhY3RzLnBkZgAOAHQAOQBQAG8AdABlAG4AdABpAGEAbABfAFIAaQBzAGsAcwBfAG8AZgBfAEgAeQBwAGUAcgBsAGUAZABnAGUAcgBfAEYAYQBiAHIAaQBjAF8AUwBtAGEAcgB0AF8AQwBvAG4AdAByAGEAYwB0AHMALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAIpVc2Vycy9hbmRyZXN0b3JoYXVnL1Byb2dyYW1taW5nL1Byb2plY3RzL21hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQvZGF0YS9hcnRpY2xlcy9Qb3RlbnRpYWxfUmlza3Nfb2ZfSHlwZXJsZWRnZXJfRmFicmljX1NtYXJ0X0NvbnRyYWN0cy5wZGYAEwABLwAAFQACABT//wAAAAgADQAaACQAaQAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAALT}}

@inproceedings{WOS:000614622300031,
	abstract = {{Smart contracts on permissionless blockchains are exposed to inherent
   security risks due to interactions with untrusted entities. Static
   analyzers are essential for identifying security risks and avoiding
   millions of dollars worth of damage.
   We introduce Ethainter, a security analyzer checking information flow
   with data sanitization in smart contracts. Ethainter identifies
   composite attacks that involve an escalation of tainted information,
   through multiple transactions, leading to severe violations. The
   analysis scales to the entire blockchain, consisting of hundreds of
   thousands of unique smart contracts, deployed over millions of accounts.
   Ethainter is more precise than previous approaches, as we confirm by
   automatic exploit generation (e.g., destroying over 800 contracts on the
   Ropsten network) and by manual inspection, showing a very high precision
   of 82.5\% valid warnings for end-to-end vulnerabilities. Ethainter's
   balance of precision and completeness offers significant advantages over
   other tools such as Securify, Securify2, and teEther.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Brent, L (Corresponding Author), Intl Comp Sci Inst, Berkeley, CA 94704 USA. Brent, Lexi, Intl Comp Sci Inst, Berkeley, CA 94704 USA. Grech, Neville; Lagouvardos, Sifis; Smaragdakis, Yannis, Univ Athens, Athens, Greece. Brent, Lexi; Scholz, Bernhard, Univ Sydney, Sydney, NSW, Australia.}},
	author = {Brent, Lexi and Grech, Neville and Lagouvardos, Sifis and Scholz, Bernhard and Smaragdakis, Yannis},
	author-email = {{lexi@icsi.berkeley.edu me@nevillegrech.com sifis.lag@di.uoa.gr bernhard.scholz@sydney.edu.au yannis@smaragd.org}},
	bdsk-color = {7},
	booktitle = {{PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI `20)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:48 +0100},
	doc-delivery-number = {{BQ7DO}},
	doi = {{10.1145/3385412.3385990}},
	editor = {{Donaldson, AF and Torlak, E}},
	funding-acknowledgement = {{European Research CouncilEuropean Research Council (ERC)European Commission {[}790340]; Hellenic Foundation for Research and Innovation (project DEAN-BLOCK); Australian Government through the Australian Research CouncilAustralian Research Council {[}ARC DP180104030]; REACH HIGH Scholars Programs-Post-Doctoral Grants; European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of societysEuropean Social Fund)}},
	funding-text = {{We thank the anonymous reviewers for their valuable suggestions. We gratefully acknowledge funding by the European Research Council, grant 790340 (PARSE), and by the Hellenic Foundation for Research and Innovation (project DEAN-BLOCK). This research was partially supported by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). In addition, the researchwork disclosed is partially funded by the REACH HIGH Scholars ProgramsPostDoctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of societysEuropean Social Fund).}},
	isbn = {{978-1-4503-7613-6}},
	keywords = {{static analysis; information flow; smart contracts}},
	language = {{English}},
	note = {{41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), ELECTR NETWORK, JUN 15-20, 2020}},
	number-of-cited-references = {{43}},
	organization = {{Assoc Comp Machinery; ACM SIGPLAN}},
	pages = {{454-469}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Smaragdakis, Yannis/AAM-2851-2021}},
	times-cited = {{0}},
	title = {{Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000614622300031}},
	usage-count-last-180-days = {{2}},
	usage-count-since-2013 = {{4}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3385412.3385990}}

@article{WOS:000688034000010,
	abstract = {{Ethereum is a distributed blockchain platform, serving as an ecosystem
   for smart contracts: full-fledged intercommunicating programs that
   capture the transaction logic of an account. Unlike programs in
   mainstream languages, a gas limit restricts the execution of an Ethereum
   smart contract: execution proceeds as long as gas is available. Thus,
   gas is a valuable resource that can be manipulated by an attacker to
   provoke unwanted behavior in a victim's smart contract (e.g., wasting or
   blocking funds of said victim). Gas-focused vulnerabilities exploit
   undesired behavior when a contract (directly or through other
   interacting contracts) runs out of gas. Such vulnerabilities are among
   the hardest for programmers to protect against, as out-of-gas behavior
   may be uncommon in non-attack scenarios and reasoning about it is far
   from trivial.
   In this paper, we classify and identify gas-focused vulnerabilities, and
   present MadMax: a static program analysis technique to automatically
   detect gas-focused vulnerabilities with very high confidence. Our
   approach combines a control-flow-analysis-based decompiler and
   declarative program-structure queries. The combined analysis captures
   high-level domain-specific concepts (such as ``dynamic data structure
   storage{''} and ``safely resumable loops{''}) and achieves high
   precision and scalability. MadMax analyzes the entirety of smart
   contracts in the Ethereum blockchain in just 10 hours (with
   decompilation timeouts in 8\% of the cases) and flags contracts with a
   (highly volatile) monetary value of over \$2.8B as vulnerable. Manual
   inspection of a sample of flagged contracts shows that 81\% of the
   sampled warnings do indeed lead to vulnerabilities, which we report on
   in our experiment.}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Grech, N (Corresponding Author), Univ Athens, Athens, Greece. Grech, N (Corresponding Author), Univ Malta, Msida, Malta. Grech, Neville; Smaragdakis, Yannis, Univ Athens, Athens, Greece. Grech, Neville, Univ Malta, Msida, Malta. Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard, Univ Sydney, Sydney, NSW, Australia.}},
	article-number = {{116}},
	author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
	author-email = {{me@nevillegrech.com mkon1090@uni.sydney.edu.au ajur4521@uni.sydney.edu.au lexi.brent@sydney.edu.au bernhard.scholz@sydney.edu.au smaragd@di.uoa.gr}},
	bdsk-color = {5},
	da = {{2021-11-07}},
	date-modified = {2021-11-13 05:18:46 +0100},
	doc-delivery-number = {{VK3YJ}},
	doi = {{10.1145/3276486}},
	eissn = {{2475-1421}},
	funding-acknowledgement = {{Australian Government through the Australian Research CouncilAustralian Research Council {[}ARC DP180104030]; European Research CouncilEuropean Research Council (ERC)European Commission {[}307334, 790340]; REACH HIGH Scholars Program s Post-Doctoral Grants; European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of society -European Social Fund)}},
	funding-text = {{This research was supported partially by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). We gratefully acknowledge funding by the European Research Council, grants 307334 and 790340. In addition, the research work disclosed is partially funded by the REACH HIGH Scholars Program s Post-Doctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of society -European Social Fund).}},
	journal = {{PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL}},
	journal-iso = {{P. ACM Program. Lang.}},
	keywords = {{Program Analysis; Smart Contracts; Security; Blockchain}},
	language = {{English}},
	month = {{NOV}},
	number-of-cited-references = {{49}},
	oa = {{gold}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	read = {1},
	research-areas = {{Computer Science}},
	times-cited = {{62}},
	title = {{MadMax: Surviving Out-of-Gas Conditions in Ethereum Smart Contracts}},
	type = {{Article}},
	unique-id = {{WOS:000688034000010}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	volume = {{2}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1145/3276486},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAUYXJ0aWNsZXMvMzI3NjQ4Ni5wZGZPEQGuAAAAAAGuAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8LMzI3NjQ4Ni5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAMAAAogY3UAAAAAAAAAAAAAAAAACGFydGljbGVzAAIAXi86VXNlcnM6YW5kcmVzdG9yaGF1ZzpQcm9ncmFtbWluZzpQcm9qZWN0czptYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0OmRhdGE6YXJ0aWNsZXM6MzI3NjQ4Ni5wZGYADgAYAAsAMwAyADcANgA0ADgANgAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAXFVzZXJzL2FuZHJlc3RvcmhhdWcvUHJvZ3JhbW1pbmcvUHJvamVjdHMvbWFzdGVyLXByZWxpbWluYXJ5LXJlcG9ydC9kYXRhL2FydGljbGVzLzMyNzY0ODYucGRmABMAAS8AABUAAgAU//8AAAAIAA0AGgAkADsAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAB7Q==}}

@inproceedings{WOS:000647642100039,
	abstract = {{Ethereum smart contracts are programs that are deployed and executed in
   a consensus-based blockchain managed by a peer-to-peer network. Several
   re-entrancy attacks that aim to steal Ether, the cryptocurrency used in
   Ethereum, stored in deployed smart contracts were found in the recent
   years. A countermeasure to such attacks is based on dynamic analysis
   that executes the smart contracts themselves, but it requires the
   spending of Ether and knowledge of attack patterns for analysis in
   advance. In this paper, we present a static analysis tool named RA
   (Re-entrancy Analyzer), a combination of symbolic execution and
   equivalence checking by a satisfiability modulo theories solver to
   analyze smart contract vulnerabilities against re-entrancy attacks. In
   contrast to existing tools, RA supports analysis of inter-contract
   behaviors by using only the Ethereum Virtual Machine bytecodes of target
   smart contracts, i.e., even without prior knowledge of attack patterns
   and without spending Ether. Furthermore, RA can verify existence of
   vulnerabilities against re-entrancy attacks without execution of smart
   contracts and it does not provide false positives and false negatives.
   We also present an implementation of RA to evaluate its performance in
   analyzing the vulnerability of deployed smart contracts against
   re-entrancy attacks and show that RA can precisely determine which smart
   contracts are vulnerable.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Chinen, Y (Corresponding Author), Osaka Univ, Grad Sch Informat Sci \& Technol, Osaka, Japan. Chinen, Yuchiro; Yanai, Naoto; Cruz, Jason Paul, Osaka Univ, Grad Sch Informat Sci \& Technol, Osaka, Japan. Okamura, Shingo, Natl Inst Technol, Nara Coll, Dept Informat Engn, Nara, Japan.}},
	author = {Chinen, Yuchiro and Yanai, Naoto and Cruz, Jason Paul and Okamura, Shingo},
	author-email = {{t-yuichiro@ist.osaka-u.ac.jp yanai@ist.osaka-u.ac.jp cruz@ist.osaka-u.ac.jp okamura@info.nara-k.ac.jp}},
	bdsk-color = {5},
	book-group-author = {{IEEE Comp Soc}},
	booktitle = {{2020 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2020)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 21:11:49 +0100},
	doc-delivery-number = {{BR3LS}},
	doi = {{10.1109/Blockchain50366.2020.00048}},
	isbn = {{978-0-7381-0495-9}},
	keywords = {{Ethereum; smart contracts; static analysis; EVM; symbolic execution; SMT solver}},
	language = {{English}},
	note = {{3rd IEEE International Conference on Blockchain (Blockchain), ELECTR NETWORK, NOV 02-06, 2020}},
	number-of-cited-references = {{26}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Tech Comm Scalable Comp}},
	pages = {{327-336}},
	publisher = {{IEEE COMPUTER SOC}},
	rating = {3},
	read = {1},
	research-areas = {{Computer Science}},
	times-cited = {{1}},
	title = {{RA: Hunting for Re-Entrancy Attacks in Ethereum Smart Contracts via Static Analysis}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000647642100039}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Interdisciplinary Applications; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/Blockchain50366.2020.00048},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBfYXJ0aWNsZXMvUkFfSHVudGluZ19mb3JfUmUtRW50cmFuY3lfQXR0YWNrc19pbl9FdGhlcmV1bV9TbWFydF9Db250cmFjdHNfdmlhX1N0YXRpY19BbmFseXNpcy5wZGZPEQLcAAAAAALcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fUkFfSHVudGluZ19mb3JfUmUtI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAMAAAogY3UAAAAAAAAAAAAAAAAACGFydGljbGVzAAIAqS86VXNlcnM6YW5kcmVzdG9yaGF1ZzpQcm9ncmFtbWluZzpQcm9qZWN0czptYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0OmRhdGE6YXJ0aWNsZXM6UkFfSHVudGluZ19mb3JfUmUtRW50cmFuY3lfQXR0YWNrc19pbl9FdGhlcmV1bV9TbWFydF9Db250cmFjdHNfdmlhX1N0YXRpY19BbmFseXNpcy5wZGYAAA4ArgBWAFIAQQBfAEgAdQBuAHQAaQBuAGcAXwBmAG8AcgBfAFIAZQAtAEUAbgB0AHIAYQBuAGMAeQBfAEEAdAB0AGEAYwBrAHMAXwBpAG4AXwBFAHQAaABlAHIAZQB1AG0AXwBTAG0AYQByAHQAXwBDAG8AbgB0AHIAYQBjAHQAcwBfAHYAaQBhAF8AUwB0AGEAdABpAGMAXwBBAG4AYQBsAHkAcwBpAHMALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAKdVc2Vycy9hbmRyZXN0b3JoYXVnL1Byb2dyYW1taW5nL1Byb2plY3RzL21hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQvZGF0YS9hcnRpY2xlcy9SQV9IdW50aW5nX2Zvcl9SZS1FbnRyYW5jeV9BdHRhY2tzX2luX0V0aGVyZXVtX1NtYXJ0X0NvbnRyYWN0c192aWFfU3RhdGljX0FuYWx5c2lzLnBkZgAAEwABLwAAFQACABT//wAAAAgADQAaACQAhgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAANm}}

@article{WOS:000528625100011,
	abstract = {{Ethereum smart contracts are programs that can be collectively executed
   by a network of mutually untrusted nodes. Smart contracts handle and
   transfer assets of values, offering strong incentives for malicious
   attacks. Intrusion attacks are a popular type of malicious attacks. In
   this article, we propose ContractGuard, the first intrusion detection
   system (IDS) to defend Ethereum smart contracts against such attacks.
   Like IDSs for conventional programs, ContractGuard detects intrusion
   attempts as abnormal control flow. However, existing IDS
   techniques/tools are inapplicable to Ethereum smart contracts due to
   Ethereum's decentralized nature and its highly restrictive execution
   environment. To address these issues, we design ContractGuard by
   embedding it in the contracts to profile context-tagged acyclic paths,
   and optimizing it under the Ethereum gas-oriented performance model. The
   main goal is to minimize the overheads, to which the users will be
   extremely sensitive since the cost needs to be paid upfront in digital
   concurrency. Empirical investigation using real-life contracts deployed
   in the Ethereum mainnet shows that on average, ContractGuard only adds
   to 36.14 percent of the deployment overhead and 28.27 percent of the
   runtime overhead. Furthermore, we conducted controlled experiments and
   show that ContractGuard successfully guard against attacks on all
   real-world vulnerabilities and 83 percent of the seeded vulnerabilities.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
	affiliation = {{Zhao, GS (Corresponding Author), South China Normal Univ, Sch Comp Sci, Zhongshan Rd 55, Guangzhou, Guangdong, Peoples R China. Cheung, SC (Corresponding Author), Hong Kong Univ Sci \& Technol, Dept Comp Sci \& Engn, Kowloon, Clear Water Bay, Hong Kong, Peoples R China. Wang, Xinming, Lakala Grp, Bldg D1,Beiqing Rd, Beijing, Peoples R China. He, Jiahao; Xie, Zhijian; Zhao, Gansen, South China Normal Univ, Sch Comp Sci, Zhongshan Rd 55, Guangzhou, Guangdong, Peoples R China. Cheung, Shing-Chi, Hong Kong Univ Sci \& Technol, Dept Comp Sci \& Engn, Kowloon, Clear Water Bay, Hong Kong, Peoples R China.}},
	author = {Wang, Xinming and He, Jiahao and Xie, Zhijian and Zhao, Gansen and Cheung, Shing-Chi},
	author-email = {{wangxinming@lakala.com hejiahao@m.scnu.edu.cn xiezhijian@m.scnu.edu.cn gzhao@m.scnu.edu.cn scc@cse.ust.hk}},
	bdsk-color = {3},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:51:29 +0100},
	doc-delivery-number = {{LH2NS}},
	doi = {{10.1109/TSC.2019.2949561}},
	funding-acknowledgement = {{HKSAR RGC/GRFHong Kong Research Grants Council {[}16202917]; National Key R\&D Program of China {[}2018YFB1404402]; Key R\&D Program for Guangdong {[}2019B010137003]; Science and Technology Planning Project of Guangdong {[}2016B030305006, 2018A07071702, 201804010314, 2012224-12]}},
	funding-text = {{This work was supported in part by HKSAR RGC/GRF 16202917, National Key R\&D Program of China 2018YFB1404402, the Key R\&D Program for Guangdong (2019B010137003), the Science and Technology Planning Project of Guangdong (2016B030305006, 2018A07071702, 201804010314, 2012224-12).}},
	issn = {{1939-1374}},
	journal = {{IEEE TRANSACTIONS ON SERVICES COMPUTING}},
	journal-iso = {{IEEE Trans. Serv. Comput.}},
	keywords = {{Smart contracts; Blockchain; Intrusion detection; Peer-to-peer computing; Context modeling; Runtime; Blockchain; ethereum smart contract; intrusion detection system; anomaly detection}},
	language = {{English}},
	month = {{MAR-APR}},
	number = {{2}},
	number-of-cited-references = {{43}},
	oa = {{Green Submitted, Green Published}},
	orcid-numbers = {{He, Jiahao/0000-0002-6837-2682 Cheung, Shing Chi/0000-0002-3508-7172}},
	pages = {{314-328}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{He, Jiahao/AAO-7588-2020 Cheung, Shing Chi/U-5882-2018}},
	times-cited = {{5}},
	title = {{ContractGuard: Defend Ethereum Smart Contracts with Embedded Intrusion Detection}},
	type = {{Article}},
	unique-id = {{WOS:000528625100011}},
	usage-count-last-180-days = {{3}},
	usage-count-since-2013 = {{5}},
	volume = {{13}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1109/TSC.2019.2949561}}

@inproceedings{WOS:000569720900052,
	abstract = {{In recent years we have seen a great deal of attention to the topic of
   security analysis in smart contracts, especially those developed for the
   Ethereum blockchain. As a result, there seems to be an ever-growing
   demand for secure smart contracts to protect what could potentially be
   worth billions. In this paper, we introduce Etherolic as a robust,
   scalable and efficient fuzzing tool based on concolic testing for
   performing security analysis on smart contracts. Our approach works
   based on a successful combination of dynamic taint tracking (DTA) and
   concolic testing that allows users to analyze the bytecode of smart
   contracts being run on the Ethereum Virtual Machine. Moreover, Etherolic
   is not only able to identify a wide spectrum of recent vulnerabilities
   in smart contracts, but also it generates exploits to trigger unknown
   errors in the code. In order to demonstrate the usefulness of our
   approach, we evaluated Etherolic on a crafted benchmark suite,
   comprising several real-world and synthetic smart contracts along with
   98 safety features. The result of our preliminary evaluation reveals 204
   security violations in the benchmarks.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Ashouri, M (Corresponding Author), Univ Potsdam, Potsdam, Germany. Ashouri, Mohammadreza, Univ Potsdam, Potsdam, Germany.}},
	author = {Ashouri, Mohammadreza},
	author-email = {{ashouri@uni-potsdam.de}},
	bdsk-color = {7},
	book-group-author = {{ACM}},
	booktitle = {{PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:48 +0100},
	doc-delivery-number = {{BP9ND}},
	doi = {{10.1145/3341105.3374226}},
	isbn = {{978-1-4503-6866-7}},
	keywords = {{Ethereum; Security Analysis; Smart Contract; Concolic Testing; Taint Analysis}},
	language = {{English}},
	note = {{35th Annual ACM Symposium on Applied Computing (SAC), Czech Tech Univ, ELECTR NETWORK, MAR 30-APR 03, 2020}},
	number-of-cited-references = {{16}},
	organization = {{ACM; Masaryk Univ Czechia; Microsoft Res; ACM Special Interest Grp Appl Comp; Natl Inst Technol Calicut}},
	pages = {{353-356}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Etherolic: A Practical Security Analyzer for Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000569720900052}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Artificial Intelligence; Computer Science, Information Systems; Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3341105.3374226}}

@inproceedings{WOS:000503498000039,
	abstract = {{Ethereum smart contracts are public, immutable and distributed and, as
   such, they are prone to vulnerabilities sourcing from programming
   mistakes of developers. This paper presents SAFEVM, a verification tool
   for Ethereum smart contracts that makes use of state-of-the-art
   verification engines for C programs. SAFEVM takes as input an Ethereum
   smart contract (provided either in Solidity source code, or in compiled
   EVM bytecode), optionally with assert and require verification
   annotations, and produces in the output a report with the verification
   results. Besides general safety annotations, SAFEVM handles the
   verification of array accesses: it automatically generates SV-COMP
   verification assertions such that C verification engines can prove
   safety of array accesses. Our experimental evaluation has been
   undertaken on all contracts pulled from etherscan.io (more than 24,000)
   by using as back-end verifiers CPAchecker, SeaHorn and VeryMax.}},
	address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
	affiliation = {{Albert, E (Corresponding Author), Univ Complutense Madrid, Madrid, Spain. Albert, Elvira; Correas, Jesus; Gordillo, Pablo; Rubio, Albert, Univ Complutense Madrid, Madrid, Spain. Roman-Diez, Guillermo, Univ Politecn Madrid, Madrid, Spain.}},
	author = {Albert, Elvira and Correas, Jesus and Gordillo, Pablo and Roman-Diez, Guillermo and Rubio, Albert},
	bdsk-color = {5},
	booktitle = {{PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA `19)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 01:29:55 +0100},
	doc-delivery-number = {{BO1ZS}},
	doi = {{10.1145/3293882.3338999}},
	editor = {{Zhang, DM and Moller, A}},
	funding-acknowledgement = {{Spanish MINECO {[}TIN2015-69175-C4-2-R]; MINECO/FEDER, UE {[}TIN2015-69175-C4-3-R]; Spanish MICINN/FEDERSpanish GovernmentEuropean Commission {[}RTI2018-094403-B-C31, RTI2018-094403-B-C33, S2018/-TCS-4314, S2018/TCS-4339]; EIE Funds of the European Union; UCM {[}CT27/16-CT28/16]}},
	funding-text = {{This work was funded partially by the Spanish MINECO project TIN2015-69175-C4-2-R and MINECO/FEDER, UE project TIN2015-69175-C4-3-R, by Spanish MICINN/FEDER, UE projects RTI2018-094403-B-C31 and RTI2018-094403-B-C33, by the CM projects S2018/-TCS-4314 and S2018/TCS-4339, co-funded by EIE Funds of the European Union, and by the UCM CT27/16-CT28/16 grant.}},
	isbn = {{978-1-4503-6224-5}},
	keywords = {{Smart contracts; Ethereum blockchain; Safety verification}},
	language = {{English}},
	note = {{28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), Beijing, PEOPLES R CHINA, JUL 15-19, 2019}},
	number-of-cited-references = {{20}},
	oa = {{Green Submitted}},
	orcid-numbers = {{Correas, Jesus/0000-0002-3219-0799 Gordillo, Pablo/0000-0001-6189-4667 Roman-Diez, Guillermo/0000-0002-5427-8855}},
	organization = {{Assoc Comp Machinery; ACM SIGSOFT; Microsoft Res; DiDi; Google; Huawei; MoocTest; Facebook; Fujitsu; Sourcebrella; UCLouvain}},
	pages = {{386-389}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	read = {1},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Correas, Jesus/AAG-4430-2020 Roman-Diez, Guillermo/AAS-4445-2020 Gordillo, Pablo/X-4552-2018 }},
	times-cited = {{1}},
	title = {{SAFEVM: A Safety Verifier for Ethereum Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000503498000039}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{2}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1145/3293882.3338999},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAcYXJ0aWNsZXMvMzI5Mzg4Mi4zMzM4OTk5LnBkZk8RAc4AAAAAAc4AAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xMzMjkzODgyLjMzMzg5OTkucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAwAACiBjdQAAAAAAAAAAAAAAAAAIYXJ0aWNsZXMAAgBmLzpVc2VyczphbmRyZXN0b3JoYXVnOlByb2dyYW1taW5nOlByb2plY3RzOm1hc3Rlci1wcmVsaW1pbmFyeS1yZXBvcnQ6ZGF0YTphcnRpY2xlczozMjkzODgyLjMzMzg5OTkucGRmAA4AKAATADMAMgA5ADMAOAA4ADIALgAzADMAMwA4ADkAOQA5AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBkVXNlcnMvYW5kcmVzdG9yaGF1Zy9Qcm9ncmFtbWluZy9Qcm9qZWN0cy9tYXN0ZXItcHJlbGltaW5hcnktcmVwb3J0L2RhdGEvYXJ0aWNsZXMvMzI5Mzg4Mi4zMzM4OTk5LnBkZgATAAEvAAAVAAIAFP//AAAACAANABoAJABDAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAhU=}}

@article{WOS:000616307600013,
	abstract = {{Smart contract vulnerabilities have attracted lots of concerns due to
   the resultant financial losses. Matching-based detection methods
   extrapolating known vulnerabilities to unknown have proven to be
   effective in other platforms. However, directly adopting the technique
   to smart contracts is obstructed by two issues, i.e., diversity of
   bytecode generation resulting from the rapid evolution of compilers and
   interference of noise code easily caused by the homogeneous business
   logics. To address the problems, we propose contract bytecode-oriented
   normalization and slicing techniques to augment bytecode matching.
   Specifically, we conduct data- and instruction-level normalizations to
   uniform the bytecode generated by different compilers, and enforce
   contract-specific slicing by tracking data- and control-flows with
   simulated bytecode executions to prune the noise code as far as
   possible. Based on the above techniques, we design an unsupervised graph
   embedding algorithm to encode the code graphs into quantitatively
   comparable vectors. The potentially vulnerable smart contracts can be
   identified by measuring the similarities between their vectors and known
   vulnerable ones. Our evaluations have shown the efficiency (0.47 seconds
   per contract on average), effectiveness (160 verified true positives)
   and high precision (91.95\% for top-ranked). It is worth noting that, we
   also identify dozens of honeypot contracts, further demonstrating the
   capability of our method.}},
	address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
	affiliation = {{Liang, B (Corresponding Author), Renmin Univ China, Sch Informat, Beijing 100872, Peoples R China. Huang, Jianjun; Han, Songming; You, Wei; Shi, Wenchang; Liang, Bin, Renmin Univ China, Sch Informat, Beijing 100872, Peoples R China. Huang, Jianjun; Han, Songming; You, Wei; Shi, Wenchang; Liang, Bin, Renmin Univ China, Key Lab DEKE, Minist Educ, Beijing 100872, Peoples R China. Wu, Jingzheng; Wu, Yanjun, Chinese Acad Sci, Inst Software, Beijing 100190, Peoples R China.}},
	author = {Huang, Jianjun and Han, Songming and You, Wei and Shi, Wenchang and Liang, Bin and Wu, Jingzheng and Wu, Yanjun},
	author-email = {{hjj@ruc.edu.cn 2013202516@ruc.edu.cn youwei@ruc.edu.cn wenchang@ruc.edu.cn liangb@ruc.edu.cn jingzheng08@iscas.ac.cn yanjun@iscas.ac.cn}},
	bdsk-color = {2},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:16:19 +0100},
	doc-delivery-number = {{QE6HW}},
	doi = {{10.1109/TIFS.2021.3050051}},
	eissn = {{1556-6021}},
	funding-acknowledgement = {{National Natural Science Foundation of China (NSFC)National Natural Science Foundation of China (NSFC) {[}U1836209, 61802413]; Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities; Research Funds of Renmin University of China {[}19XNLG02, 20XNLG03]}},
	funding-text = {{This work was supported in part by the National Natural Science Foundation of China (NSFC) under Grant U1836209 and Grant 61802413, in part by the Fundamental Research Funds for the Central Universities, and in part by the Research Funds of Renmin University of China under Grant 19XNLG02 and Grant 20XNLG03.}},
	issn = {{1556-6013}},
	journal = {{IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY}},
	journal-iso = {{IEEE Trans. Inf. Forensic Secur.}},
	keywords = {{Smart contracts; Task analysis; Interference; Blockchain; Prototypes; Business; Virtual machining; Vulnerable smart contracts; graph embedding; bytecode matching}},
	language = {{English}},
	number-of-cited-references = {{37}},
	pages = {{2144-2156}},
	publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
	research-areas = {{Computer Science; Engineering}},
	times-cited = {{0}},
	title = {{Hunting Vulnerable Smart Contracts via Graph Embedding Based Bytecode Matching}},
	type = {{Article}},
	unique-id = {{WOS:000616307600013}},
	usage-count-last-180-days = {{4}},
	usage-count-since-2013 = {{11}},
	volume = {{16}},
	web-of-science-categories = {{Computer Science, Theory \& Methods; Engineering, Electrical \& Electronic}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/TIFS.2021.3050051}}

@inproceedings{WOS:000693398800014,
	abstract = {{Motivated by the immutable nature of Ethereum smart contracts and of
   their transactions, quite many approaches have been proposed to detect
   defects and security problems before smart contracts become persistent
   in the blockchain and they are granted control on substantial financial
   value.
   Because smart contracts source code might not be available, static
   analysis approaches mostly face the challenge of analysing compiled
   Ethereum bytecode, that is available directly from the official
   blockchain. However, due to the intrinsic complexity of Ethereum
   bytecode (especially in jump resolution), static analysis encounters
   significant obstacles that reduce the accuracy of exiting automated
   tools.
   This paper presents a novel static analysis algorithm based on the
   symbolic execution of the Ethereum operand stack that allows us to
   resolve jumps in Ethereum bytecode and to construct an accurate
   control-flow graph (CFG) of the compiled smart contracts. EtherSolve is
   a prototype implementation of our approach. Experimental results on a
   significant set of real world Ethereum smart contracts show that
   EtherSolve improves the accuracy of the execrated CFGs with respect to
   the state of the art available approaches.
   Many static analysis techniques are based on the CFG representation of
   the code and would therefore benefit from the accurate extraction of the
   CFG. For example, we implemented a simple extension of EtherSolve that
   allows to detect instances of the re-entrancy vulnerability.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Contro, F (Corresponding Author), Univ Verona, Comp Sci Dept, Verona, Italy. Contro, Filippo; Crosara, Marco; Ceccato, Mariano; Dalla Preda, Mila, Univ Verona, Comp Sci Dept, Verona, Italy.}},
	author = {Contro, Filippo and Crosara, Marco and Ceccato, Mariano and Dalla Preda, Mila},
	author-email = {{filippo.contro\_01@studenti.univr.it marco.crosara@studenti.univr.it mariano.ceccato@univr.it mila.dallapreda@univr.it}},
	bdsk-color = {5},
	book-group-author = {{IEEE COMP SOC}},
	booktitle = {{2021 IEEE/ACM 29TH INTERNATIONAL CONFERENCE ON PROGRAM COMPREHENSION (ICPC 2021)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-10 18:29:29 +0100},
	doc-delivery-number = {{BS1MQ}},
	doi = {{10.1109/ICPC52881.2021.00021}},
	funding-acknowledgement = {{project MIUR 2018-2022 ``Dipartimenti di Eccellenza{''}}},
	funding-text = {{This paper has been partially supported by project MIUR 2018-2022 ``Dipartimenti di Eccellenza{''}.}},
	isbn = {{978-1-6654-1403-6}},
	issn = {{1092-8138}},
	keywords = {{Reverse engineering; Static analysis; Smart contract; Ethereum}},
	language = {{English}},
	note = {{29th IEEE/ACM International Conference on Program Comprehension (ICPC) / 18th IEEE/ACM International Conference on Mining Software Repositories (MSR), ELECTR NETWORK, MAY 22-30, 2021}},
	number-of-cited-references = {{36}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; IEEE Tech Council Software Engn; ACM Special Interest Grp Software Engn}},
	pages = {{127-137}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	series = {{International Conference on Program Comprehension}},
	times-cited = {{0}},
	title = {{EtherSolve: Computing an Accurate Control-Flow Graph from Ethereum Bytecode}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000693398800014}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.1109/ICPC52881.2021.00021}}

@inproceedings{WOS:000503272600010,
	abstract = {{While Ethereum smart contracts enabled a wide range of blockchain
   applications, they are extremely vulnerable to different forms of
   security attacks. Due to the fact that transactions to smart contracts
   commonly involve cryptocurrency transfer, any successful attacks can
   lead to money loss or even financial disorder. In this paper, we focus
   on the overflow attacks in Ethereum, mainly because they widely rooted
   in many smart contracts and comparatively easy to exploit. We have
   developed EASYFLOW, an overflow detector at Ethereum Virtual Machine
   level. The key insight behind EASYFLOW is a taint analysis based
   tracking technique to analyze the propagation of involved taints.
   Specifically, EASYFLOW can not only divide smart contracts into safe
   contracts, manifested overflows, well-protected overflows and potential
   overflows, but also automatically generate transactions to trigger
   potential overflows. In our preliminary evaluation, EASYFLOW managed to
   find potentially vulnerable Ethereum contracts with little runtime
   overhead.}},
	address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
	affiliation = {{Guan, Z (Corresponding Author), Peking Univ, Natl Engn Res Ctr Software Engn, Beijing, Peoples R China. Gao, Jianbo; Liu, Chao; Li, Qingshan; Chen, Zhong, Peking Univ, Sch EECS, Beijing, Peoples R China. Liu, Han, Tsinghua Univ, Sch Software, Beijing, Peoples R China. Guan, Zhi, Peking Univ, Natl Engn Res Ctr Software Engn, Beijing, Peoples R China.}},
	author = {Gao, Jianbo and Liu, Han and Liu, Chao and Li, Qingshan and Guan, Zhi and Chen, Zhong},
	author-email = {{gaojianbo@pku.edu.cn liuhan2017@tsinghua.edu.cn liuchao\_cs@pku.edu.cn liqs@pku.edu.cn guan@pku.edu.cn zhongchen@pku.edu.cn}},
	book-group-author = {{IEEE}},
	booktitle = {{2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019)}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BO1YR}},
	doi = {{10.1109/ICSE-Companion.2019.00029}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61672060, 61802223]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation {[}2017M620785]}},
	funding-text = {{This work is supported by National Natural Science Foundation of China under the grant No.: 61672060, 61802223 and China Postdoctoral Science Foundation under Grant No.: 2017M620785.}},
	isbn = {{978-1-7281-1764-5}},
	keywords = {{Ethereum; Overflow Vulnerability; Taint Analysis; Smart Contract}},
	language = {{English}},
	note = {{IEEE/ACM 41st International Conference on Software Engineering - Software Engineering in Practice (ICSE-SEIP), Montreal, CANADA, MAY 25-31, 2019}},
	number-of-cited-references = {{12}},
	oa = {{Green Submitted}},
	organization = {{IEEE; Assoc Comp Machinery; IEEE Comp Soc; Special Interest Grp Software Engn; Tech Council Software Engn}},
	pages = {{23-26}},
	publisher = {{IEEE}},
	research-areas = {{Computer Science}},
	times-cited = {{6}},
	title = {{EASYFLOW : Keep Ethereum Away From Overflow}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000503272600010}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/ICSE-Companion.2019.00029}}

@inproceedings{WOS:000680821200003,
	abstract = {{Smart contracts have become lucrative and profitable targets for
   attackers because they can hold a great amount of money. Unfortunately,
   existing offline approaches for discovering the vulnerabilities in smart
   contracts or checking the correctness of smart contracts cannot conduct
   online detection of attacking transactions. Besides, existing online
   approaches only focus on specific attacks and cannot be easily extended
   to detect other attacks. Moreover, developing a new online detection
   system for smart contracts from scratch is time-consuming and requires
   deep understanding of blockchain internals, thus making it difficult to
   quickly implement and deploy mechanisms to detect new attacks. In this
   paper, we propose a novel generic online detection framework named SODA
   for smart contracts on any blockchains that support Ethereum virtual
   machine (EVM). SODA distinguishes itself from existing online approaches
   through its capability, efficiency, and compatibility. First, SODA
   empowers users to easily develop apps for detecting various attacks
   online (i.e., when attacks happen) by separating information collection
   and attack detection with layered design. At the higher layer, SODA
   provides unified interfaces to develop detection apps against various
   attacks. At the lower layer, SODA instruments EVM to collect all
   primitive information necessary to detect various attacks and constructs
   11 kinds of structural information for the ease of developing apps.
   Based on SODA, users can develop new apps in a few lines of code without
   modifying EVM. Second, SODA is efficient, because we design on-demand
   information retrieval to reduce the overhead of information collection
   and adopt dynamic linking to eliminate the overhead of inter-process
   communication. Such design allows users to develop detection apps using
   any programming languages that can generate dynamic link libraries.
   Third, since more and more blockchains adopt EVM as smart contract
   runtime, SODA can be easily migrated to such blockchains without
   modifying apps. Based on SODA, we develop 8 detection apps to detect the
   attacks exploiting major vulnerabilities in smart contracts, and
   integrate SODA (including all apps) into 3 popular blockchains:
   Ethereum, Expanse and Wanchain. The extensive experimental results
   demonstrate the effectiveness and efficiency of SODA and our detection
   apps.}},
	address = {{1775 WIEHLE AVE, STE 201, RESTON, VA, UNITED STATES}},
	affiliation = {{Luo, XP (Corresponding Author), Hong Kong Polytech Univ, Hong Kong, Peoples R China. Chen, Ting; Cao, Rong; Li, Ting; Zhang, Yufei; Liao, Zhou; Zhu, Hang; He, Zheyuan; Tang, Yuxing; Zhang, Xiaosong, Univ Elect Sci \& Technol China, Ctr Cybersecur, Chengdu, Peoples R China. Luo, Xiapu, Hong Kong Polytech Univ, Hong Kong, Peoples R China. Gu, Guofei, Texas A\&M Univ, SUCCESS Lab, College Stn, TX 77843 USA. Chen, Gang, Chengdu Kongdi Technol Inc, Chengdu, Peoples R China. Lin, Xiaodong, Univ Guelph, Guelph, ON, Canada.}},
	author = {Chen, Ting and Cao, Rong and Li, Ting and Luo, Xiapu and Gu, Guofei and Zhang, Yufei and Liao, Zhou and Zhu, Hang and Chen, Gang and He, Zheyuan and Tang, Yuxing and Lin, Xiaodong and Zhang, Xiaosong},
	author-email = {{brokendragon@uestc.edu.cn daniel.xiapu.luo@polyu.edu.hk guofei@cse.tamu.edu 975868494@qq.com xlin08@uoguelph.ca}},
	bdsk-color = {2},
	book-group-author = {{Internet Soc}},
	booktitle = {{28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-12 21:17:50 +0100},
	doc-delivery-number = {{BS0BG}},
	doi = {{10.14722/ndss.2020.24449}},
	funding-acknowledgement = {{National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) {[}61872057]; National Key R\&D Program of China {[}2018YFB0804100]; Hong Kong RGC Project {[}152193/19E]; US National Science FoundationNational Science Foundation (NSF) {[}1617985, 1700544]}},
	funding-text = {{Ting Chen is partially supported by National Natural Science Foundation of China (61872057) and National Key R\&D Program of China (2018YFB0804100). Xiapu Luo is partially supported by Hong Kong RGC Project (No. 152193/19E). Guofei Gu is partially supported by the US National Science Foundation (No. 1617985 and No. 1700544).}},
	isbn = {{1-891562-66-5}},
	language = {{English}},
	note = {{28th Annual Network and Distributed System Security Symposium (NDSS), ELECTR NETWORK, FEB 21-25, 2021}},
	number-of-cited-references = {{72}},
	oa = {{Bronze}},
	publisher = {{INTERNET SOC}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{SODA: A Generic Online Detection Framework for Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000680821200003}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	web-of-science-categories = {{Computer Science, Information Systems; Computer Science, Theory \& Methods}},
	year = {{2021}},
	bdsk-url-1 = {https://doi.org/10.14722/ndss.2020.24449}}

@inproceedings{WOS:000546326300007,
	abstract = {{Reasoning about commutativity between data-structure operations is an
   important problem with applications including parallelizing compilers,
   optimistic parallelization and, more recently, Ethereum smart contracts.
   There have been research results on automatic generation of
   commutativity conditions, yet we are unaware of any fully automated
   technique to generate conditions that are both sound and effective.
   We have designed such a technique, driven by an algorithm that
   iteratively refines a conservative approximation of the commutativity
   (and non-commutativity) condition for a pair of methods into an
   increasingly precise version. The algorithm terminates if/when the
   entire state space has been considered, and can be aborted at any time
   to obtain a partial yet sound commutativity condition. We have
   generalized our work to left-/right-movers {[}27] and proved relative
   completeness. We describe aspects of our technique that lead to useful
   commutativity conditions, including how predicates are selected during
   refinement and heuristics that impact the output shape of the condition.
   We have implemented our technique in a prototype open-source tool
   SERVOIS. Our algorithm produces quantifier-free queries that are
   dispatched to a back-end SMT solver. We evaluate SERVOIS through two
   case studies: (i) We synthesize commutativity conditions for a range of
   data structures including Set, HashTable, Accumulator, Counter, and
   Stack. (ii) We consider an Ethereum smart contract called BlockKing, and
   show that SERVOIS can detect serious concurrency-related vulnerabilities
   and guide developers to construct robust and efficient implementations.}},
	address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
	affiliation = {{Bansal, K (Corresponding Author), Google Inc, New York, NY 10011 USA. Bansal, Kshitij; Tripp, Omer, Google Inc, New York, NY 10011 USA. Koskinen, Eric, Stevens Inst Technol, Hoboken, NJ 07030 USA.}},
	author = {Bansal, Kshitij and Koskinen, Eric and Tripp, Omer},
	author-email = {{kbk@google.com eric.koskinen@stevens.edu trippo@google.com}},
	booktitle = {{TOOLS AND ALGORITHMS FOR THE CONSTRUCTION AND ANALYSIS OF SYSTEMS, TACAS 2018, PT I}},
	da = {{2021-11-07}},
	doc-delivery-number = {{BP3FE}},
	doi = {{10.1007/978-3-319-89960-2\_7}},
	editor = {{Beyer, D and Huisman, M}},
	eissn = {{1611-3349}},
	funding-acknowledgement = {{NSFNational Science Foundation (NSF) {[}1228768]; NSF CCF Award {[}1421126, 1618542]}},
	funding-text = {{K. Bansal-This work was partially supported by NSF award \#1228768. Author was at New York University when part of the work was completed.; E. Koskinen-Support in part by NSF CCF Award \#1421126, and CCF Award \#1618542. Some of the research was done while author was at IBM Research.}},
	isbn = {{978-3-319-89960-2; 978-3-319-89959-6}},
	issn = {{0302-9743}},
	language = {{English}},
	note = {{24th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS) Held as Part of the 21st European Joint Conferences on Theory and Practice of Software (ETAPS), Thessaloniki, GREECE, APR 14-20, 2018}},
	number = {{I}},
	number-of-cited-references = {{33}},
	organization = {{Aristotle Univ Thessaloniki, Dept Informat}},
	pages = {{115-132}},
	publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
	research-areas = {{Computer Science}},
	series = {{Lecture Notes in Computer Science}},
	times-cited = {{1}},
	title = {{Automatic Generation of Precise and Useful Commutativity Conditions}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000546326300007}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{10805}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2018}},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-89960-2%5C_7}}

@inproceedings{WOS:000587590500069,
	abstract = {{The popularity of blockchain technology encourages organizations to use
   more blockchain features in mission critical processes such as trading,
   access control and computational public safety. Automation of processes
   with smart contracts is one of these features that significantly enlarge
   the scope of a blockchain implementation. Smart contracts help automate
   business processes by modeling business activities on the distributed
   ledger. Smart contracts are significantly different from other programs
   from a defect fixing and security issue handling perspective. The
   opportunity of fixing such issues is only available in the narrow window
   before registering the contract on to the blockchain. After a smart
   contract becomes a part of the chain, it is not possible to update or
   fix any issues. This distinct nature of smart contracts makes it
   essential to detect the program issues early on by paying attention to
   security smells. Security smells are clues that point to a deeper
   problem in the programming space.
   In this study, we review the literature and identify vulnerabilities
   that programmers and beneficiaries of smart contracts must avoid. We
   explain these security smells and categorize them based on their nature.
   We also review the applications that detect these vulnerabilities and
   provide information about their approach and coverage. Our main
   contribution is the evaluation of smart contracts as a platform or aid
   for mission critical applications such as access control platforms. We
   conducted this evaluation by identifying the issues related to smart
   contracts and informing the reader about the problem, challenges, and
   techniques. We conclude by defining future directions for our research.}},
	address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
	affiliation = {{Demir, M (Corresponding Author), Ryerson Univ, Dept Comp Sci, Toronto, ON, Canada. Demir, Mehmet; Alalfi, Manar; Ferworn, Alexander, Ryerson Univ, Dept Comp Sci, Toronto, ON, Canada. Turetken, Ozgur, Ryerson Univ, Ted Rogers Sch Informat Technol Management, Toronto, ON, Canada.}},
	author = {Demir, Mehmet and Alalfi, Manar and Turetken, Ozgur and Ferworn, Alexander},
	author-email = {{mehmet.demir@ryerson.ca manar.alalfi@ryerson.ca turetken@ryerson.ca aferworn@ryerson.ca}},
	bdsk-color = {2},
	book-group-author = {{IEEE}},
	booktitle = {{2019 COMPANION OF THE 19TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS-C 2019)}},
	da = {{2021-11-07}},
	date-modified = {2021-11-15 20:14:03 +0100},
	doc-delivery-number = {{BQ3OW}},
	doi = {{10.1109/QRS-C.2019.00086}},
	isbn = {{978-1-7281-3925-8}},
	keywords = {{security smells; program analysis; blockchain; smart contracts}},
	language = {{English}},
	note = {{19th IEEE International Conference on Software Quality, Reliability and Security (QRS), Sofia, BULGARIA, JUL 22-26, 2019}},
	number-of-cited-references = {{16}},
	organization = {{IEEE; IEEE Comp Soc; IEEE Reliabil Soc}},
	pages = {{442-449}},
	publisher = {{IEEE COMPUTER SOC}},
	research-areas = {{Computer Science}},
	researcherid-numbers = {{Alalfi, Manar/AAT-3091-2021 Turetken, Ozgur/P-2482-2017}},
	times-cited = {{0}},
	title = {{Security Smells in Smart Contracts}},
	type = {{Proceedings Paper}},
	unique-id = {{WOS:000587590500069}},
	usage-count-last-180-days = {{1}},
	usage-count-since-2013 = {{1}},
	web-of-science-categories = {{Computer Science, Software Engineering; Computer Science, Theory \& Methods}},
	year = {{2019}},
	bdsk-url-1 = {https://doi.org/10.1109/QRS-C.2019.00086}}

@article{WOS:000685203900086,
	abstract = {{Callbacks are an effective programming discipline for implementing
   event-driven programming, especially in environments like Ethereum which
   forbid shared global state and concurrency. Callbacks allow a callee to
   delegate the execution back to the caller. Though effective, they can
   lead to subtle mistakes principally in open environments where callbacks
   can be added in a new code. Indeed, several high profile bugs in smart
   contracts exploit callbacks. We present the first static technique
   ensuring modularity in the presence of callbacks and apply it to verify
   prominent smart contracts. Modularity ensures that external calls to
   other contracts cannot affect the behavior of the contract. Importantly,
   modularity is guaranteed without restricting programming.
   In general, checking modularity is undecidable -even for programs
   without loops. This paper describes an effective technique for soundly
   ensuring modularity harnessing SMT solvers. The main idea is to define a
   constructive version of modularity using commutativity and projection
   operations on program segments. We believe that this approach is also
   accessible to programmers, since counterexamples to modularity can be
   generated automatically by the SMT solvers, allowing programmers to
   understand and fix the error.
   We implemented our approach in order to demonstrate the precision of the
   modularity analysis and applied it to real smart contracts, including a
   subset of the 150 most active contracts in Ethereum. Our implementation
   decompiles bytecode programs into an intermediate representation and
   then implements the modularity checking using SMT queries. Overall, we
   argue that our experimental results indicate that the method can be
   applied to many realistic contracts, and that it is able to prove
   modularity where other methods fail.}},
	address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
	affiliation = {{Albert, E (Corresponding Author), Univ Complutense Madrid, Madrid, Spain. Albert, E (Corresponding Author), Inst Knowledge Technol, Valencia, Spain. Albert, Elvira; Rodriguez-Nunez, Clara; Rubio, Albert, Univ Complutense Madrid, Madrid, Spain. Albert, Elvira; Rubio, Albert, Inst Knowledge Technol, Valencia, Spain. Grossman, Shelly; Rinetzky, Noam; Sagiv, Mooly, Tel Aviv Univ, Tel Aviv, Israel.}},
	article-number = {{209}},
	author = {Albert, Elvira and Grossman, Shelly and Rinetzky, Noam and Rodriguez-Nunez, Clara and Rubio, Albert and Sagiv, Mooly},
	author-email = {{elvira@sip.ucm.es shellygr@mail.tau.ac.il maon@post.tau.ac.il clarrodr@ucm.es alberu04@ucm.es msagiv@acm.org}},
	da = {{2021-11-07}},
	doc-delivery-number = {{UA5LT}},
	doi = {{10.1145/3428277}},
	eissn = {{2475-1421}},
	funding-acknowledgement = {{Spanish MCIU; AEI; FEDER (EU)European Commission {[}RTI2018-094403-B-C31, RTI2018-094403-B-C33, S2018/TCS-4314]; Israeli Science Foundation (ISF)Israel Science Foundation {[}1810/18]; United States-Israel Binational Science Foundation (BSF)US-Israel Binational Science Foundation {[}2016260]; Blavatnik Interdisciplinary Cyber Research Center, Tel Aviv University; Pazy Foundation {[}347853669]; Israel Science Foundation (ISF)Israel Science Foundation {[}1996/18]}},
	funding-text = {{We would like to thank the anonymous referees for their comments that have helped improve the presentation and contents of this paper. This work was funded partially by the Spanish MCIU, AEI and FEDER (EU) projects RTI2018-094403-B-C31 and RTI2018-094403-B-C33, and by the CM project S2018/TCS-4314. This research was partially supported by the Israeli Science Foundation (ISF) grant No. 1810/18. This material is based upon work supported by the United States-Israel Binational Science Foundation (BSF) grant No. 2016260. The research was supported in part by the Blavatnik Interdisciplinary Cyber Research Center, Tel Aviv University, and Pazy Foundation grant No. 347853669; The Israel Science Foundation (ISF) grant No. 1996/18.}},
	journal = {{PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL}},
	journal-iso = {{P. ACM Program. Lang.}},
	keywords = {{program verification; program analysis; invariants; logic and verification; blockchain; smart contracts}},
	language = {{English}},
	month = {{NOV}},
	number-of-cited-references = {{46}},
	oa = {{gold}},
	publisher = {{ASSOC COMPUTING MACHINERY}},
	research-areas = {{Computer Science}},
	times-cited = {{0}},
	title = {{Taming Callbacks for Smart Contract Modularity}},
	type = {{Article}},
	unique-id = {{WOS:000685203900086}},
	usage-count-last-180-days = {{0}},
	usage-count-since-2013 = {{0}},
	volume = {{4}},
	web-of-science-categories = {{Computer Science, Software Engineering}},
	year = {{2020}},
	bdsk-url-1 = {https://doi.org/10.1145/3428277}}

@comment{BibDesk Static Groups{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>group name</key>
		<string>Dynamic analysis</string>
		<key>keys</key>
		<string>WOS:000450109000017,WOS:000517102200060,WOS:000553784500027,WOS:000569720900052,WOS:000614622300031</string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Fixing</string>
		<key>keys</key>
		<string></string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Hybrid analysis</string>
		<key>keys</key>
		<string>WOS:000517102200060,WOS:000542117600042</string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Machine Learning</string>
		<key>keys</key>
		<string>WOS:000525389200002,WOS:000546538400002,WOS:000561703600033,WOS:000651313500158,WOS:000680892400029,WOS:000687462200004,WOS:000689112100048,WOS:000691552500001</string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Other</string>
		<key>keys</key>
		<string>WOS:000510400600001,WOS:000528625100011,WOS:000540656400028,WOS:000546326300007,WOS:000587590500069,WOS:000616307600013,WOS:000680821200003,WOS:000685204500074</string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Other chains</string>
		<key>keys</key>
		<string></string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Preventative</string>
		<key>keys</key>
		<string>WOS:000445805600011</string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Scams</string>
		<key>keys</key>
		<string></string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Secondary</string>
		<key>keys</key>
		<string></string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Static analysis</string>
		<key>keys</key>
		<string>WOS:000387820900011,WOS:000448864200073,WOS:000454741800002,WOS:000469455400001,WOS:000484100100001,WOS:000637244600080,WOS:000647642100039,WOS:000688034000010,WOS:000693398800014,WOS:000703327100001</string>
	</dict>
	<dict>
		<key>group name</key>
		<string>Verification</string>
		<key>keys</key>
		<string>WOS:000503498000039,WOS:000538781300092</string>
	</dict>
</array>
</plist>
}}

@comment{BibDesk Smart Groups{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>conditions</key>
		<array>
			<dict>
				<key>comparison</key>
				<integer>2</integer>
				<key>key</key>
				<string>Type</string>
				<key>value</key>
				<string>Review</string>
				<key>version</key>
				<string>1</string>
			</dict>
		</array>
		<key>conjunction</key>
		<integer>0</integer>
		<key>group name</key>
		<string>Smart Group</string>
	</dict>
</array>
</plist>
}}
