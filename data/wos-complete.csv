Publication Type;Authors;Book Authors;Book Editors;Book Group Authors;Author Full Names;Book Author Full Names;Group Authors;Article Title;Source Title;Book Series Title;Book Series Subtitle;Language;Document Type;Conference Title;Conference Date;Conference Location;Conference Sponsor;Conference Host;Author Keywords;Keywords Plus;Abstract;Addresses;Reprint Addresses;Email Addresses;Researcher Ids;ORCIDs;Funding Orgs;Funding Text;Cited References;Cited Reference Count;Times Cited, WoS Core;Times Cited, All Databases;180 Day Usage Count;Since 2013 Usage Count;Publisher;Publisher City;Publisher Address;ISSN;eISSN;ISBN;Journal Abbreviation;Journal ISO Abbreviation;Publication Date;Publication Year;Volume;Issue;Part Number;Supplement;Special Issue;Meeting Abstract;Start Page;End Page;Article Number;DOI;Book DOI;Early Access Date;Number of Pages;WoS Categories;Research Areas;IDS Number;UT (Unique WOS ID);Pubmed Id;Open Access Designations;Highly Cited Status;Hot Paper Status;Date of Export;
J;"Qian, P; Liu, ZG; He, QM; Zimmermann, R; Wang, X";;;;"Qian, Peng; Liu, Zhenguang; He, Qinming; Zimmermann, Roger; Wang, Xun";;;Towards Automated Reentrancy Detection for Smart Contracts Based on Sequential Models;IEEE ACCESS;;;English;Article;;;;;;"Blockchain; smart contract; deep learning; sequential models; vulnerability detection";;In the last decade, smart contract security issues lead to tremendous losses, which has attracted increasing public attention both in industry and in academia. Researchers have embarked on efforts with logic rules, symbolic analysis, and formal analysis to achieve encouraging results in smart contract vulnerability detection tasks. However, the existing detection tools are far from satisfactory. In this paper, we attempt to utilize the deep learning-based approach, namely bidirectional long-short term memory with attention mechanism (BLSTM-ATT), aiming to precisely detect reentrancy bugs. Furthermore, we propose contract snippet representations for smart contracts, which contributes to capturing essential semantic information and control flow dependencies. Our extensive experimental studies on over 42,000 real-world smart contracts show that our proposed model and contract snippet representations significantly outperform state-of-the-art methods. In addition, this work proves that it is practical to apply deep learning-based technology on smart contract vulnerability detection, which is able to promote future research towards this area.;"[Qian, Peng; Liu, Zhenguang; Wang, Xun] Zhejiang Gongshang Univ, Sch Comp & Informat Engn, Hangzhou 310018, Peoples R China; [He, Qinming] Zhejiang Univ, Dept Comp Sci, Hangzhou 310027, Peoples R China; [Zimmermann, Roger] Natl Univ Singapore, Sch Comp, Singapore 117417, Singapore";Liu, ZG (corresponding author), Zhejiang Gongshang Univ, Sch Comp & Informat Engn, Hangzhou 310018, Peoples R China.;lzg@zjgsu.edu.cn;;Qian, Peng/0000-0003-4934-5811;"National Key Research and Development Program of China [2017YFB1401300, 2017YFB1401304]; National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) [61902348]; Natural Science Foundation of Zhejiang Province, ChinaNatural Science Foundation of Zhejiang Province [LQ19F020001]; Science and Technology Innovation Program of Zhejiang Province, China [2019R408070]; General Scienti~c Research Projects of Zhejiang Provincial Department of Education, China [Y201942758]";This work was supported in part by the National Key Research and Development Program of China under Grant 2017YFB1401300 and Grant 2017YFB1401304, in part by the National Natural Science Foundation of China Grant 61902348, in part by the Natural Science Foundation of Zhejiang Province, China, Grant LQ19F020001, in part by the Science and Technology Innovation Program of Zhejiang Province, China, under Grant 2019R408070, and in part by the General Scienti~c Research Projects of Zhejiang Provincial Department of Education, China, under Grant Y201942758.;;40;7;7;0;6;IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC;PISCATAWAY;445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA;2169-3536;;;IEEE ACCESS;IEEE Access;;2020;8;;;;;;19685;19695;;10.1109/ACCESS.2020.2969429;;;11;"Computer Science, Information Systems; Engineering, Electrical & Electronic; Telecommunications";"Computer Science; Engineering; Telecommunications";LC5SE;WOS:000525389200002;;gold;;;2021-11-07;
C;"Ye, JM; Ma, ML; Lin, Y; Sui, YL; Xue, YX";;;IEEE;"Ye, Jiaming; Ma, Mingliang; Lin, Yun; Sui, Yulei; Xue, Yinxing";;;Clairvoyance: Cross-contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts;2020 ACM/IEEE 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2020);International Conference on Software Engineering;;English;Proceedings Paper;42nd ACM/IEEE International Conference on Software Engineering - Companion Proceedings (ICSE-Companion);JUN 27-JUL 19, 2020;ELECTR NETWORK;Assoc Comp Machinery, IEEE, IEEE Comp Soc, IEEE Comp Soc Tech Comm Software Engn, ACM Special Interest Grp Software Engn, Korean Inst Informat Scientists & Engineers, Natl Sci Fdn, Facebook, N Carolina State Univ, Microsoft, Samsung, LG Elect, KAIST, SK Hynix, NAVER, Suresoft, HITACHI, Google;;"reentrancy detection; path feasibility analysis; cross contract analysis; smart contract security";;Reentrancy bugs in smart contracts caused a devastating financial loss in 2016, considered as one of the most severe vulnerabilities in smart contracts. Most of the existing general-purpose security tools for smart contracts have claimed to be able to detect reentrancy bugs. In this paper, we present Clairvoyance, a cross-function and cross-contract static analysis by identifying infeasible paths to detect reentrancy vulnerabilities in smart contracts. To reduce FPs, we have summarized five major path protective techniques (PPTs) to support fast yet precise path feasibility checking. We have implemented our approach and compared Clairvoyance with three state-of-the-art tools on 17770 real-worlds contracts. The results show that Clairvoyance yields the best detection accuracy among all the tools.;"[Ye, Jiaming; Ma, Mingliang; Xue, Yinxing] Univ Sci & Technol China, Hefei, Anhui, Peoples R China; [Lin, Yun] Natl Univ Singapore, Singapore, Singapore; [Sui, Yulei] Univ Technol Sydney, Sydney, NSW, Australia";Ye, JM (corresponding author), Univ Sci & Technol China, Hefei, Anhui, Peoples R China.;"sa517462@mail.ustc.edu.cn; sa517245@mail.ustc.edu.cn; llmhyy@gmail.com; yulei.sui@uts.edu.au; yxxue@ustc.edu.cn";Ye, Jiaming/AAX-4088-2021;;;;;2;0;0;4;4;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;0270-5257;;;PROC INT CONF SOFTW;;;2020;;;;;;;274;275;;10.1145/3377812.3390908;;;2;Computer Science, Software Engineering;Computer Science;BR2CT;WOS:000637244600080;;Green Published;;;2021-11-07;
C;"Liu, C; Liu, H; Cao, Z; Chen, Z; Chen, BD; Roscoe, B";;;IEEE;"Liu, Chao; Liu, Han; Cao, Zhao; Chen, Zhong; Chen, Bangdao; Roscoe, Bill";;;ReGuard: Finding Reentrancy Bugs in Smart Contracts;PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING - COMPANION (ICSE-COMPANION;Proceedings of the IEEE-ACM International Conference on Software Engineering Companion;;English;Proceedings Paper;40th ACM/IEEE International Conference on Software Engineering (ICSE);MAY 27-JUN 03, 2018;Gothenburg, SWEDEN;IEEE, Assoc Comp Machinery, IEEE Comp Soc, Microsoft Res;;"Smart contract; reentrancy bug; dynamic analysis";;Smart contracts enabled a new way to perform cryptocurrency transactions over blockchains. While this emerging technique introduces free-of-conflicts and transparency, smart contract itself is vulnerable. As a special form of computer program, smart contract can hardly get rid of bugs. Even worse, an exploitable security bug can lead to catastrophic consequences, e.g., loss of cryptocurrency/money. In this demo paper, we focus on the most common type of security bugs in smart contracts, i.e., reentrancy bug, which caused the famous DAO attack with a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based analyzer to automatically detect reentrancy bugs in Ethereum smart contracts. Specifically, ReGuard performs fuzz testing on smart contracts by iteratively generating random but diverse transactions. Based on the runtime traces, ReGuard further dynamically identifies reentrancy vulnerabilities. In the preliminary evaluation, we have analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7 previously unreported reentrancy bugs. A demo video of ReGuard is at https://youtu.be/XxJ3_-cmUiY.;"[Liu, Chao; Chen, Zhong] Peking Univ, Beijing, Peoples R China; [Liu, Han; Cao, Zhao; Chen, Bangdao; Roscoe, Bill] Chieftin Lab, Shenzhen, Peoples R China; [Liu, Han] Tsinghua Univ, Beijing, Peoples R China; [Roscoe, Bill] Univ Oxford, Oxford, England";Chen, Z (corresponding author), Peking Univ, Beijing, Peoples R China.;"liuchao_cs@pku.edu.cn; liuhan2017@mail.tsinghua.edu.cn; zhongchen@pku.edu.cn";Sanchez-Gomez, Nicolas/K-3758-2014;;"National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) [61672060]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation [2017M620785]";The authors would like to thank Thomas Gibson-Robinson, Philippa J. Hopcroft and Youcheng Sun for their help in preparing the tool. This work is supported by National Natural Science Foundation of China under the grant No.: 61672060 and China Postdoctoral Science Foundation under the grant No.: 2017M620785.;;12;41;41;1;11;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;2574-1926;;978-1-4503-5663-3;PROC IEEE ACM INT C;;;2018;;;;;;;65;68;;10.1145/3183440.3183495;;;4;Computer Science, Software Engineering;Computer Science;BL3YB;WOS:000450109000017;;;;;2021-11-07;
C;"Ma, R; Jian, ZF; Chen, GY; Ma, K; Chen, YJ";;"Han, W; Zhu, L; Yan, F";;"Ma, Rui; Jian, Zefeng; Chen, Guangyuan; Ma, Ke; Chen, Yujia";;;ReJection: A AST-Based Reentrancy Vulnerability Detection Method;TRUSTED COMPUTING AND INFORMATION SECURITY, CTCIS 2019;Communications in Computer and Information Science;;English;Proceedings Paper;13th Chinese Conference on Trusted Computing and Information Security (CTCIS);OCT 24-27, 2019;Shanghai, PEOPLES R CHINA;China Comp Federat, Fudan Univ;;"Vulnerability detection; Smart contract; Abstract syntax tree; Reentrancy vulnerability";;Blockchain is deeply integrated into the vertical industry, and gradually forms an application ecosphere of blockchain in various industries. However, the security incidents of blockchain occur frequently, and especially smart contracts have become the badly-disastered area. So avoiding security incidents caused by smart contracts has become an essential topic for blockchain developing. Up to now, there is not generic method for the security auditing of smart contracts and most researchers have to use existing vulnerability detection technology. To reduce the high false rate of smart contract vulnerability detection, we use ReJection, a detection method based on abstract syntax tree (AST), to focus on the reentrancy vulnerability with obvious harm and features in smart contracts. ReJection consists of four steps. Firstly, ReJection obtains the AST corresponding to the contract by the smart contract compiler solc. Then, AST is preprocessed to eliminate redundant information. Thirdly, ReJection traverses the nodes of the AST and records the notations related to reentrancy vulnerabilities during the traversal, such as Danger-Transfer function, Checks-Effects-Interactions pattern and mutex mechanism. Finally, ReJection uses record information and predefined rules to determine whether the reentrancy vulnerability is occurred. ReJection is implemented based on Slither, which is an open-source smart contract vulnerability detection tool. Furthermore, we also use the open-source smart contract code as the test program to compare experimental results to verify the effects with the ReJection and Slither. The result highlights that the ReJection has higher detection accuracy for reentrancy vulnerability.;"[Ma, Rui; Jian, Zefeng; Chen, Guangyuan; Chen, Yujia] Beijing Inst Technol, Sch Comp Sci & Technol, Beijing 100081, Peoples R China; [Ma, Ke] China Acad Informat & Commun Technol, Internet Ctr, Inst Technol & Stand Res, Beijing 100191, Peoples R China";Ma, K (corresponding author), China Acad Informat & Commun Technol, Internet Ctr, Inst Technol & Stand Res, Beijing 100191, Peoples R China.;make@caict.ac.cn;;;;;;10;0;0;0;0;SPRINGER-VERLAG SINGAPORE PTE LTD;SINGAPORE;152 BEACH ROAD, #21-01/04 GATEWAY EAST, SINGAPORE, 189721, SINGAPORE;1865-0929;1865-0937;"978-981-15-3418-8; 978-981-15-3417-1";COMM COM INF SC;;;2020;1149;;;;;;58;71;;10.1007/978-981-15-3418-8_5;;;14;"Computer Science, Information Systems; Computer Science, Theory & Methods";Computer Science;BR6PS;WOS:000662832600005;OK;;;;2021-11-07;
C;"Tikhomirov, S; Voskresenskaya, E; Ivanitskiy, I; Takhaviev, R; Marchenko, E; Alexandrov, Y";;;IEEE;"Tikhomirov, Sergei; Voskresenskaya, Ekaterina; Ivanitskiy, Ivan; Takhaviev, Ramil; Marchenko, Evgeny; Alexandrov, Yaroslav";;;SmartCheck: Static Analysis of Ethereum Smart Contracts;2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB);;;English;Proceedings Paper;1st ACM/IEEE International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB);MAY 27-JUN 03, 2018;Gothenburg, SWEDEN;Assoc Comp Machinery, IEEE Comp Soc, Assoc Comp Machinery Special Interest Grp Software Engn, IEEE Tech Council Software Engn, IEEE;;"Ethereum; Solidity; smart contracts; static analysis; bug detection";;Ethereum is a major blockchain-based platform for smart contracts - Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being The DAO, broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area. We provide a comprehensive classification of code issues in Solidity and implement SmartCheck - an extensible static analysis tool that detects them(1). SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world contracts and compared the results with manual audit on three contracts. Our tool reflects the current state of knowledge on Solidity vulnerabilities and shows significant improvements over alternatives. SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit. We believe though that a static analyzer should be an essential part of contract developers' toolbox, letting them fix simple bugs fast and allocate more effort to complex issues.;"[Tikhomirov, Sergei] Univ Luxembourg, SnT, Esch Sur Alzette, Luxembourg; [Voskresenskaya, Ekaterina; Ivanitskiy, Ivan; Takhaviev, Ramil; Marchenko, Evgeny; Alexandrov, Yaroslav] SmartDec, Moscow, Russia";Tikhomirov, S (corresponding author), Univ Luxembourg, SnT, Esch Sur Alzette, Luxembourg.;"sergey.s.tikhomirov@gmail.com; voskresenskaya@smartdec.net; ivanitskiy@smartdec.net; tahaviev@smartdec.net; marchenko@smartdec.net; alexandrov@smartdec.net";Sanchez-Gomez, Nicolas/K-3758-2014;;;;;33;72;75;3;14;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;;;978-1-4503-5726-5;;;;2018;;;;;;;9;16;;10.1145/3194113.3194115;;;8;Computer Science, Software Engineering;Computer Science;BL6YE;WOS:000454741800002;OK;;;;2021-11-07;
C;"Zhang, W; Ganesh, V; Banescu, S; Pasos, L; Stewart, S";;"Wolter, K; Schieferdecker, I; Gallina, B; Cukier, M; Natella, R; Ivaki, N; Laranjeiro, N";;"Zhang, William; Ganesh, Vijay; Banescu, Sebastian; Pasos, Leodardo; Stewart, Steven";;;MPro: Combining Static and Symbolic Analysis for Scalable Testing of Smart Contract;2019 IEEE 30TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE);Proceedings International Symposium on Software Reliability Engineering;;English;Proceedings Paper;30th IEEE International Symposium on Software Reliability Engineering (ISSRE);OCT 28-31, 2019;Berlin, GERMANY;IEEE, IEEE Comp Soc, Bosch, Concordia, iRights Lab, German Testing Board e V, Verteilte Intelligente Systeme e V, IEEE Reliablil Soc;;"Blockchain; Smart Contract; Symbolic Execution; Static Analysis";;Smart contracts are executable programs that enable the building of a programmable trust mechanism between multiple entities without the need of a trusted third-party. At the time of this writing, there were over 10 million smart contracts deployed on the Ethereum networks and this number continues to grow at a rapid pace. Smart contracts are often written in a Turing-complete programming language called Solidity, which is not easy to audit for subtle errors. Further, since smart contracts are immutable, errors have led to attacks resulting in losses of cryptocurrency worth 100s of millions of USD and reputational damage. Unfortunately, manual security analyses do not scale with size and number of smart contracts. Automated and scalable mechanisms are essential if smart contracts are to gain main-stream acceptance. Researchers have developed several security scanners in the past couple of years. However, many of these analyzer either do not scale well, or if they do, produce many false positives. This issue is exacerbated when bugs are triggered only after a series of interactions with the functions of the contractunder-test. A depth-n vulnerability, refers to a vulnerability that requires invoking a specific sequence of n functions to trigger. Depth-n vulnerabilities are time-consuming to detect by existing automated analyzers, because of the combinatorial explosion of sequences of functions that could be executed on smart contracts. In this paper, we present a technique to analyze depth-n vulnerabilities in an efficient and scalable way by combining symbolic execution and data dependency analysis. A significant advantage of combining symbolic with static analysis is that it scales much better than symbolic alone and does not have the problem of false positive that static analysis tools typically have. We have implemented our technique in a tool called MPro, a scalable and automated smart contract analyzer based on the existing symbolic analysis tool Mythril-Classic and the static analysis tool Slither. We analyzed 100 randomly chosen smart contracts on MPro and our evaluation shows that MPro is about n-times faster than Mythril-Classic for detecting depth-n vulnerabilities, while preserving all the detection capabilities of Mythril-Classic.;"[Zhang, William; Ganesh, Vijay] Univ Waterloo, Waterloo, ON, Canada; [Banescu, Sebastian; Pasos, Leodardo; Stewart, Steven] Quantstamp Inc, Blockchain Dev Labs, San Francisco, CA USA";Zhang, W (corresponding author), Univ Waterloo, Waterloo, ON, Canada.;"william.zhang@waterloo.ca; vijay.ganesh@waterloo.ca; sebi@quatnstamp.com; leo@quatnstamp.com; steven@quatnstamp.com";;Ganesh, Vijay/0000-0002-6029-2047;;;;18;1;1;0;1;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;1071-9458;;978-1-7281-4982-0;PROC INT SYMP SOFTW;;;2019;;;;;;;456;462;;10.1109/ISSRE.2019.00052;;;7;"Computer Science, Software Engineering; Engineering, Electrical & Electronic";"Computer Science; Engineering";BP2EH;WOS:000542117600042;OK;Green Submitted;;;2021-11-07;
J;"Xing, CP; Chen, ZR; Chen, LX; Guo, XJ; Zheng, ZB; Li, J";;;;"Xing, Cipai; Chen, Zhuorong; Chen, Lexin; Guo, Xiaojie; Zheng, Zibin; Li, Jin";;;A new scheme of vulnerability analysis in smart contract with machine learning;WIRELESS NETWORKS;;;English;"Article; Early Access";;;;;;"Smart contract; Slice matrix; Vulnerability; Multi-label classification; Ethereum";;The smart contracts deployed in Ethereum carry huge amounts of virtual coins. However, there are vulnerabilities in some of these smart contracts, which makes them vulnerable to malicious attacks. Due to the characteristics of blockchain, such vulnerable contracts are difficult to be revoked. In order to prevent vulnerable contracts, it is very important to detect the loopholes in these contracts before their deployment. In this paper, we focus on three vulnerabilities of smart contract:has_short_address,has_flowsandis_greedy. For the three kinds of vulnerabilities, we propose slicing matrix, a new method to extract vulnerability feature, and construct three vulnerability detection models for comparison. The experimental results show that the detection accuracy based on neural network and slice matrix is better than that based on neural network and opcode features. In other words, slice matrix can improve the accuracy of vulnerable contract detection. Among our three detection models, the model based on random forest and opcode features performs best.;"[Xing, Cipai; Chen, Zhuorong; Chen, Lexin; Li, Jin] Guangzhou Univ, Coll Comp Sci & Network Engn, Guangzhou, Peoples R China; [Guo, Xiaojie] Nankai Univ, Coll Comp Sci, Tianjin, Peoples R China; [Zheng, Zibin] Sun Yat Sen Univ, Sch Data & Comp Sci, Guangzhou, Peoples R China";Li, J (corresponding author), Guangzhou Univ, Coll Comp Sci & Network Engn, Guangzhou, Peoples R China.;lijin@gzhu.edu.cn;;;;;;30;2;2;15;21;SPRINGER;DORDRECHT;VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS;1022-0038;1572-8196;;WIREL NETW;Wirel. Netw.;;;;;;;;;;;;10.1007/s11276-020-02379-z;;JUL 2020;10;"Computer Science, Information Systems; Engineering, Electrical & Electronic; Telecommunications";"Computer Science; Engineering; Telecommunications";MH2BY;WOS:000546538400002;;;;;2021-11-07;
J;"Lu, N; Wang, B; Zhang, YX; Shi, WB; Esposito, C";;;;"Lu, Ning; Wang, Bin; Zhang, Yongxin; Shi, Wenbo; Esposito, Christian";;;NeuCheck: A more practical Ethereum smart contract security analysis tool;SOFTWARE-PRACTICE & EXPERIENCE;;;English;Article;;;;;;"blockchain; Ethereum; security analysis; smart contract";;"Ethereum is one of the currently popular trading platform, where any one can exchange, buy, or sell cryptocurrencies. Smart contract, a computer program, can help Ethereum to encode rules or scripts for processing transactions. Because the smart contract usually handles large number of cryptocurrencies worth billions of dollars apiece, its security has gained considerable attention. In this paper, we first investigate the security of smart contracts running on the Ethereum and introduce several new security vulnerabilities that allow adversaries to exploit and gain financial benefits. Then, we propose a more practical smart contract analysis tool termed NeuCheck, in which we introduce the syntax tree in the syntactical analyzer to complete the transformation from source code to intermediate representation, and then adopt the open source library working with XML to analyze such tree. We have built a prototype of NeuCheck for Ethereum and evaluate it with over 52 000 existing Ethereum smart contracts. The results show that (1) our new documented vulnerabilities are prevalent; (2) NeuCheck improves the analysis speed by at least 17.2 times compared to other popular analysis tools (eg, Securify and Mythril; and (3) allows for cross-platform deployment.";"[Lu, Ning; Wang, Bin; Zhang, Yongxin; Shi, Wenbo] Northeastern Univ, Coll Comp Sci & Engn, Shenyang, Liaoning, Peoples R China; [Lu, Ning] Xidian Univ, Sch Comp Sci & Technol, Xian, Shaanxi, Peoples R China; [Esposito, Christian] Univ Salerno, Dept Comp Sci, Fisciano, Italy";Shi, WB (corresponding author), Northeastern Univ, Coll Comp Sci & Engn, Shenyang, Liaoning, Peoples R China.;shiwb@neuq.edu.cn;ESPOSITO, Christiancarmine/AAI-4626-2020;"ESPOSITO, Christiancarmine/0000-0002-0085-0748; Lu, ning/0000-0001-7325-7307";"National Nature Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) [61601107, U1708262, 61472074]; Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities [N172304023]; China Postdoctoral Science FoundationChina Postdoctoral Science Foundation [2019M653568]";"National Nature Science Foundation of China, Grant/Award Number: 61601107, U1708262 and 61472074; Fundamental Research Funds for the Central Universities, Grant/Award Number: N172304023; China Postdoctoral Science Foundation, Grant/Award Number: 2019M653568";;33;2;2;3;18;WILEY;HOBOKEN;111 RIVER ST, HOBOKEN 07030-5774, NJ USA;0038-0644;1097-024X;;SOFTWARE PRACT EXPER;Softw.-Pract. Exp.;OCT;2021;51;10;;;SI;;2065;2084;;10.1002/spe.2745;;AUG 2019;20;Computer Science, Software Engineering;Computer Science;UN1VW;WOS:000484100100001;OK;;;;2021-11-07;
C;"Zhou, E; Hua, S; Pi, BF; Sun, J; Nomura, Y; Yamashita, K; Kurihara, H";;;IEEE;"Zhou, Ence; Hua, Song; Pi, Bingfeng; Sun, Jun; Nomura, Yashihide; Yamashita, Kazuhiro; Kurihara, Hidetoshi";;;Security Assurance for Smart Contract;2018 9TH IFIP INTERNATIONAL CONFERENCE ON NEW TECHNOLOGIES, MOBILITY AND SECURITY (NTMS);International Conference on New Technologies Mobility and Security;;English;Proceedings Paper;9th IFIP International Conference on New Technologies, Mobility and Security (NTMS);FEB 26-28, 2018;Paris, FRANCE;IFIP TC6 5 Working Grp, IEEE, System X Inst Rech Technologique, LiP6, CNRS, TELECOM ParisTech, IEEE Commun Soc;;"ethereum blockchain; smart contract; topological analysis; logic risk location; security assurance";;"Currently, Bitcoin and Ethereum are the two most popular cryptocurrency systems, especially Ethereum. It permits complex financial transactions or rules through scripts, which is called smart contracts. Since Ethereum smart contracts hold millions of dollars, their execution correctness is crucial against attacks which aim at stealing the assets. In this paper, we proposed a security assurance method for smart contract source code to find potential security risks. It contains two main functions, the first is syntax topological analysis of smart contract invocation relationship, to help developers to understand their code structure clearly; the second is logic risk (which may lead to vulnerabilities) detection and location, and label results on topology diagram. For developers' convenience, we have built a static analysis tool called SASC to generate topology diagram of invocation relationship and to find potential logic risks. We have made an evaluation on 2,952 smart contracts, experiment results proved that our method is intuitive and effective.";"[Zhou, Ence; Hua, Song; Pi, Bingfeng] Fujitsu Res & Dev Ctr, Informat Technol Lab, Suzhou, Peoples R China; [Sun, Jun] Fujitsu Res & Dev Ctr, Informat Technol Lab, Beijing, Peoples R China; [Nomura, Yashihide; Yamashita, Kazuhiro; Kurihara, Hidetoshi] Fujitsu Labs Ltd, Informat Syst Technol Lab, Kawasaki, Kanagawa, Japan";Zhou, E (corresponding author), Fujitsu Res & Dev Ctr, Informat Technol Lab, Suzhou, Peoples R China.;"zhouence@cn.fujitsu.com; huasong@cn.fujitsu.com; winter.pi@cn.fujitsu.com; sunjun@cn.fujitsu.com; y.nomura@jp.fujitsu.com; y-kazuhiro@jp.fujitsu.com; kurihara.hide@jp.fujitsu.com";Sanchez-Gomez, Nicolas/K-3758-2014;;;;;6;3;3;0;0;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;2157-4952;;978-1-5386-3662-6;INT CONF NEW TECHNOL;;;2018;;;;;;;;;;;;;5;"Computer Science, Theory & Methods; Engineering, Electrical & Electronic; Telecommunications";"Computer Science; Engineering; Telecommunications";BL2CQ;WOS:000448864200073;OK;;;;2021-11-07;
C;"Zhao, H; Su, P; Wei, YH; Gai, KK; Qiu, MK";;"Qiu, H; Zhang, C; Fei, Z; Qiu, M; Kung, SY";;"Zhao, Hui; Su, Peng; Wei, Yihang; Gai, Keke; Qiu, Meikang";;;GAN-Enabled Code Embedding for Reentrant Vulnerabilities Detection;KNOWLEDGE SCIENCE, ENGINEERING AND MANAGEMENT, PT III;Lecture Notes in Artificial Intelligence;;English;Proceedings Paper;14th International Conference on Knowledge Science, Engineering, and Management (KSEM);AUG 14-16, 2021;Tokyo, JAPAN;Springer LNCS, Waseda Univ, N Amer Chinese Talents Assoc, Longxiang High Tech Grp Inc;;"Blockchain; Smart contract; Reentrant attack; Vulnerability detection; Generative adversarial networks";;"As one of the key components of blockchain, smart contract is playing a vital role in achieving auto-functions; however, reentrant attacks are threatening the implementation of smart contracts, which limits the adoption of blockchain systems in various scenarios. To address this issue, we propose a reentrant vulnerability detection model based on word embedding, similarity detection, and Generative Adversarial Networks (GAN). Additionally, we provide a new approach for dynamically preventing reentrant attacks. We also implement experiments to evaluate our model and results show our scheme achieves 92% detecting accuracy for reentrant attack detection.";"[Zhao, Hui; Su, Peng] Henan Univ, Sch Software, Kaifeng 475000, Peoples R China; [Wei, Yihang] Beijing Inst Technol, Sch Comp Sci & Technol, Beijing 100081, Peoples R China; [Gai, Keke] Beijing Inst Technol, Sch Cyberspace Sci & Technol, Beijing 100081, Peoples R China; [Qiu, Meikang] Texas A&M Univ Commerce, Commerce, TX 75428 USA";Gai, KK (corresponding author), Beijing Inst Technol, Sch Cyberspace Sci & Technol, Beijing 100081, Peoples R China.;"zhh@henu.edu.cn; 3120201079@bit.edu.cn; gaikeke@bit.edu.cn; qiumeikang@ieee.org";Gai, Keke/M-4857-2017;Gai, Keke/0000-0001-6784-0221;"National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) [61972034]; Natural Science Foundation of Beijing MunicipalityBeijing Natural Science Foundation [4202068]; Natural Science Foundation of Shandong ProvinceNatural Science Foundation of Shandong Province [ZR2019ZD10, ZR2020ZD01]";This work is partially supported by National Natural Science Foundation of China (Grant No. 61972034), Natural Science Foundation of Beijing Municipality (Grant No. 4202068), Natural Science Foundation of Shandong Province (Grant No. ZR2019ZD10, ZR2020ZD01).;;21;0;0;0;0;SPRINGER INTERNATIONAL PUBLISHING AG;CHAM;GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND;0302-9743;1611-3349;"978-3-030-82153-1; 978-3-030-82152-4";LECT NOTES ARTIF INT;;;2021;12817;;;;;;585;597;;10.1007/978-3-030-82153-1_48;;;13;Computer Science, Artificial Intelligence;Computer Science;BS1GM;WOS:000689112100048;;;;;2021-11-07;
J;"Xu, YJ; Hu, GR; You, L; Cao, CT";;;;"Xu, Yingjie; Hu, Gengran; You, Lin; Cao, Chengtang";;;A Novel Machine Learning-Based Analysis Model for Smart Contract Vulnerability;SECURITY AND COMMUNICATION NETWORKS;;;English;Article;;;;;;;;In recent years, a lot of vulnerabilities of smart contracts have been found. Hackers used these vulnerabilities to attack the corresponding contracts developed in the blockchain system such as Ethereum, and it has caused lots of economic losses. Therefore, it is very important to find out the potential problems of the smart contracts and develop more secure smart contracts. As blockchain security events have raised more important issues, more and more smart contract security analysis methods have been developed. Most of these methods are based on traditional static analysis or dynamic analysis methods. There are only a few methods that use emerging technologies, such as machine learning. Some models that use machine learning to detect smart contract vulnerabilities cost much time in extracting features manually. In this paper, we introduce a novel machine learning-based analysis model by introducing the shared child nodes for smart contract vulnerabilities. We build the Abstract-Syntax-Tree (AST) for smart contracts with some vulnerabilities from two data sets including SmartBugs and SolidiFI-benchmark. Then, we build the Abstract-Syntax-Tree (AST) of the labeled smart contract for data sets named Smartbugs-wilds. Next, we get the shared child nodes from both of the ASTs to obtain the structural similarity, and then, we construct a feature vector composed of the values that measure structural similarity automatically to build our machine learning model. Finally, we get a KNN model that can predict eight types of vulnerabilities including Re-entrancy, Arithmetic, Access Control, Denial of Service, Unchecked Low Level Calls, Bad Randomness, Front Running, and Denial of Service. The accuracy, recall, and precision of our KNN model are all higher than 90%. In addition, compared with some other analysis tools including Oyente and SmartCheck, our model has higher accuracy. In addition, we spent less time for training .;"[Xu, Yingjie; Hu, Gengran; You, Lin; Cao, Chengtang] Hangzhou Dianzi Univ, Sch Cyberspace, Hangzhou, Peoples R China";"Hu, GR; You, L (corresponding author), Hangzhou Dianzi Univ, Sch Cyberspace, Hangzhou, Peoples R China.";"gengran.hu@gmail.com; mryoulin@gmail.com";;"YOU, LIN/0000-0003-2049-8961; Hu, Gengran/0000-0002-3061-2388";"Key Program of the National Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) [61772166]; Natural Science Foundation of Zhejiang Province of ChinaNatural Science Foundation of Zhejiang Province [LZ17F020002]";This research was partially supported by the Key Program of the National Natural Science Foundation of China (no. 61772166) and the Natural Science Foundation of Zhejiang Province of China (no. LZ17F020002).;;23;0;0;3;3;WILEY-HINDAWI;LONDON;ADAM HOUSE, 3RD FL, 1 FITZROY SQ, LONDON, WIT 5HE, ENGLAND;1939-0114;1939-0122;;SECUR COMMUN NETW;Secur. Commun. Netw.;AUG 15;2021;2021;;;;;;;;5798033;10.1155/2021/5798033;;;12;"Computer Science, Information Systems; Telecommunications";"Computer Science; Telecommunications";UD8OM;WOS:000687462200004;;gold;;;2021-11-07;
C;"Akca, S; Rajan, A; Peng, C";;;IEEE;"Akca, Sefa; Rajan, Ajitha; Peng, Chao";;;SolAnalyser: A Framework for Analysing and Testing Smart Contracts;2019 26TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC);Asia-Pacific Software Engineering Conference;;English;Proceedings Paper;26th Asia-Pacific Software Engineering Conference (APSEC);DEC 02-05, 2019;Putrajaya, MALAYSIA;Univ Sains Malaysia, Univ Putra Malaysia, Univ Malaysia Terengganu, Malaysian Software Engn Interest Grp, Univ Teknologi Malaysia;;"blockchain; smart contract; testing; static analysis; assertions; fault seeding";;Executing, verifying and enforcing credible transactions on permissionless blockchains is done using smart contracts. A key challenge with smart contracts is ensuring their correctness and security. To address this challenge, we present a fully automated technique, SolAnalyser, for vulnerability detection over Solidity smart contracts that uses both static and dynamic analysis. Analysis techniques in the literature rely on static analysis with a high rate of false positives or lack support for vulnerabilities like out of gas, unchecked send, timestamp dependency. Our tool, SolAnalyser, supports automated detection of 8 different vulnerability types that currently lack wide support in existing tools, and can easily be extended to support other types. We also implemented a fault seeding tool that injects different types of vulnerabilities in smart contracts. We use the mutated contracts for assessing the effectiveness of different analysis tools. Our experiment uses 1838 real contracts from which we generate 12866 mutated contracts by artificially seeding 8 different vulnerability types. We evaluate the effectiveness of our technique in revealing the seeded vulnerabilities and compare against five existing popular analysis tools - Oyente, Securify, Maian, SmartCheck and Mythril. This is the first large scale evaluation of existing tools that compares their effectiveness by running them on a common set of contracts. We find that our technique outperforms all five existing tools in supporting detection of all 8 vulnerability types and in achieving higher precision and recall rate. SolAnalyser was also faster in analysing the different vulnerabilities than any of the existing tools in our experiment.;"[Akca, Sefa; Rajan, Ajitha; Peng, Chao] Univ Edinburgh, Edinburgh, Midlothian, Scotland";Akca, S (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.;"s.akca@sms.ed.ac.uk; arajan@ed.ac.uk; chao.peng@ed.ac.uk";;;Huawei Innovation Research ProgramHuawei Technologies;This work was supported in part by a grant from Huawei Innovation Research Program.;;27;2;2;0;3;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;1530-1362;;978-1-7281-4648-5;ASIA PAC SOFWR ENG;;;2019;;;;;;;482;489;;10.1109/APSEC48747.2019.00071;;;8;"Computer Science, Software Engineering; Engineering, Electrical & Electronic";"Computer Science; Engineering";BO5CH;WOS:000517102200060;OK;Green Submitted;;;2021-11-07;
C;"Mi, F; Wang, ZY; Zhao, C; Guo, JH; Ahmed, F; Khan, L";;;IEEE;"Mi, Feng; Wang, Zhuoyi; Zhao, Chen; Guo, Jinghui; Ahmed, Fawaz; Khan, Latifur";;;VSCL: Automating Vulnerability Detection in Smart Contracts with Deep Learning;2021 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN AND CRYPTOCURRENCY (ICBC);;;English;Proceedings Paper;3rd IEEE International Conference on Blockchain and Cryptocurrency (IEEE ICBC);MAY 03-06, 2021;ELECTR NETWORK;IEEE, IEEE Commun Soc, IBM, CSIRO, Data61;;"Smart Contract; Vulnerability Detection; Metric Learning; Blockchain";;With the increase of the adoption of blockchain technology in providing decentralized solutions to various problems, smart contracts have become more popular to the point that billions of US Dollars are currently exchanged every day through such technology. Meanwhile, various vulnerabilities in smart contracts have been exploited by attackers to steal cryptocurrencies worth millions of dollars. The automatic detection of smart contract vulnerabilities therefore is an essential research problem. Existing solutions to this problem particularly rely on human experts to define f eatures o r d ifferent r ules t o detect vulnerabilities. However, this often causes many vulnerabilities to be ignored, and they are inefficient in detecting new vulnerabilities. In this study, to overcome such challenges, we propose the VSCL framework to automatically detect vulnerabilities in smart contracts on the blockchain. More specifically, first, we utilize novel feature vector generation techniques from bytecode of smart contract since the source code of smart contracts are rarely available in public. Next, the collected vectors are fed into our novel metric learning-based deep neural network(DNN) to get the detection result. We conduct comprehensive experiments on a large-scale benchmark, and the quantitative results demonstrate the effectiveness and efficiency of our approach.;"[Mi, Feng; Wang, Zhuoyi; Zhao, Chen; Guo, Jinghui; Ahmed, Fawaz; Khan, Latifur] Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA";Mi, F (corresponding author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.;"Feng.Mi@utdallas.edu; zxw151030@utdallas.edu; Chen.Zhao@utdallas.edu; Jinghui.Guo@utdallas.edu; Fawaz.Ahmed@utdallas.edu; lkhan@utdallas.edu";;;"NSFNational Science Foundation (NSF) [DMS-1737978, DGE-2039542, OAC-1828467, OAC1931541, DGE-1906630]; IBM faculty awardInternational Business Machines (IBM)";This material is based upon work supported by NSF awards DMS-1737978, DGE-2039542, OAC-1828467, OAC1931541, DGE-1906630, and an IBM faculty award (Research).;;29;0;0;4;4;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;;;978-1-6654-3578-9;;;;2021;;;;;;;;;;10.1109/ICBC51069.2021.9461050;;;9;"Computer Science, Information Systems; Computer Science, Interdisciplinary Applications";Computer Science;BS1IM;WOS:000691552500001;;;;;2021-11-07;
J;"Ali, A; Ul Abideen, Z; Ullah, K";;;;"Ali, Amir; Ul Abideen, Zain; Ullah, Kalim";;;SESCon: Secure Ethereum Smart Contracts by Vulnerable Patterns' Detection;SECURITY AND COMMUNICATION NETWORKS;;;English;Article;;;;;;;;Ethereum smart contracts have been gaining popularity toward the automation of so many domains, i.e., FinTech, IoT, and supply chain, which are based on blockchain technology. The most critical domain, e.g., FinTech, has been targeted by so many successful attacks due to its financial worth of billions of dollars. In all attacks, the vulnerability in the source code of smart contracts is being exploited and causes the steal of millions of dollars. To find the vulnerability in the source code of smart contracts written in Solidity language, a state-of-the-art work provides a lot of solutions based on dynamic or static analysis. However, these tools have shown a lot of false positives/negatives against the smart contracts having complex logic. Furthermore, the output of these tools is not reported in a standard way with their actual vulnerability names as per standards defined by the Ethereum community. To solve these problems, we have introduced a static analysis tool, SESCon (secure Ethereum smart contract), applying the taint analysis techniques with XPath queries. Our tool outperforms other analyzers and detected up to 90% of the known vulnerability patterns. SESCon also reports the detected vulnerabilities with their titles, descriptions, and remediations as per defined standards by the Ethereum community. SESCon will serve as a foundation for the standardization of vulnerability detection.;"[Ali, Amir] Xi An Jiao Tong Univ, Sch Cyber Sci & Engn, Xian 710049, Shaanxi, Peoples R China; [Ul Abideen, Zain] Xi An Jiao Tong Univ, Dept Comp Sci, Xian 710049, Shaanxi, Peoples R China; [Ullah, Kalim] CECOS Univ IT & Emerging Sci, Dept Comp Sci, Peshawar, Pakistan";Ali, A (corresponding author), Xi An Jiao Tong Univ, Sch Cyber Sci & Engn, Xian 710049, Shaanxi, Peoples R China.;amir.ali@stu.xjtu.edu.cn;;;;;;31;0;0;1;1;WILEY-HINDAWI;LONDON;ADAM HOUSE, 3RD FL, 1 FITZROY SQ, LONDON, WIT 5HE, ENGLAND;1939-0114;1939-0122;;SECUR COMMUN NETW;Secur. Commun. Netw.;SEP 21;2021;2021;;;;;;;;2897565;10.1155/2021/2897565;;;14;"Computer Science, Information Systems; Telecommunications";"Computer Science; Telecommunications";WB1GG;WOS:000703327100001;;gold;;;2021-11-07;
C;"Jiang, B; Liu, Y; Chan, WC";;"Huchard, M; Kastner, C; Fraser, G";;"Jiang, Bo; Liu, Ye; Chan, W. C.";;;ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection;PROCEEDINGS OF THE 2018 33RD IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMTED SOFTWARE ENGINEERING (ASE' 18);IEEE ACM International Conference on Automated Software Engineering;;English;Proceedings Paper;33rd IEEE/ACM International Conference on Automated Software Engineering (ASE);SEP 03-07, 2018;Montpellier, FRANCE;IEEE, Assoc Comp Machinery, ACM SIGSOFT, ACM SIGAI, CNRS, IEEE CS, Huawei, Berger Levrault, Mobioos, Toyota InfoTechnol Ctr, Reg Occitanie, Inria, LIRMM, Univ Montpellier, Inst Mines Telecom Ecole Mines Telecom, Montpellier Univ Excellence, Investissements DAvenir;;"Fuzzing; Fuzzer; Smart contract; Vulnerability; Test oracle; Ethereum; Blockchain";;Decentralized cryptocurrencies feature the use of blockchain to transfer values among peers on networks without central agency. Smart contracts are programs running on top of the blockchain consensus protocol to enable people make agreements while minimizing trusts. Millions of smart contracts have been deployed in various decentralized applications. The security vulnerabilities within those smart contracts pose significant threats to their applications. Indeed, many critical security vulnerabilities within smart contracts on Ethereum platform have caused huge financial losses to their users. In this work, we present ContractFuzzer, a novel fuzzer to test Ethereum smart contracts for security vulnerabilities. ContractFuzzer generates fuzzing inputs based on the ABI specifications of smart contracts, defines test oracles to detect security vulnerabilities, instruments the EVM to log smart contracts runtime behaviors, and analyzes these logs to report security vulnerabilities. Our fuzzing of 6991 smart contracts has flagged more than 459 vulnerabilities with high precision. In particular, our fuzzing tool successfully detects the vulnerability of the DAO contract that leads to $60 million loss and the vulnerabilities of Parity Wallet that have led to the loss of $30 million and the freezing of $150 million worth of Ether.;"[Jiang, Bo; Liu, Ye] Beihang Univ, Sch Comp Sci & Engn, Beijing, Peoples R China; [Chan, W. C.] City Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China";Jiang, B (corresponding author), Beihang Univ, Sch Comp Sci & Engn, Beijing, Peoples R China.;"jiangbo@buaa.edu.cn; franklin@buaa.edu.cn; wkchan@city.edu.hk";;;"NSFCNational Natural Science Foundation of China (NSFC) [61772056]; MITT of China [MJ-Y-2012-07]; GRF of Research Grants Council [11214116, 11200015, 11201114]; State Key Laboratory of Virtual Reality Technology and Systems";This research is supported in part by NSFC (project no. 61772056), the Research Fund of the MITT of China (project no. MJ-Y-2012-07), the GRF of Research Grants Council (project no. 11214116, 11200015, and 11201114), and the State Key Laboratory of Virtual Reality Technology and Systems.;;15;56;61;7;10;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;1527-1366;;978-1-4503-5937-5;IEEE INT CONF AUTOM;;;2018;;;;;;;259;269;;10.1145/3238147.3238177;;;11;"Computer Science, Software Engineering; Computer Science, Theory & Methods";Computer Science;BP4SF;WOS:000553784500027;;Green Submitted;;;2021-11-07;
C;"Luu, L; Chu, DH; Olickel, H; Saxena, P; Hobor, A";;;ACM;"Luu, Loi; Chu, Duc-Hiep; Olickel, Hrishi; Saxena, Prateek; Hobor, Aquinas";;;Making Smart Contracts Smarter;CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY;;;English;Proceedings Paper;23rd ACM Conference on Computer and Communications Security (CCS);OCT 24-28, 2016;Vienna, AUSTRIA;Assoc Comp Machinery, ACM Special Interest Grp Secur Audit & Control;;;;"Cryptocurrencies record transactions in a decentralized data structure called a blockchain. Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the feature to encode rules or scripts for processing transactions. This feature has evolved to give practical shape to the ideas of smart contracts, or full-fledged programs that are run on blockchains. Recently, Ethereum's smart contract system has seen steady adoption, supporting tens of thousands of contracts, holding millions dollars worth of virtual coins. In this paper, we investigate the security of running smart contracts based on Ethereum in an open distributed network like those of cryptocurrencies. We introduce several new security problems in which an adversary can manipulate smart contract execution to gain pro fit. These bugs suggest subtle gaps in the understanding of the distributed semantics of the underlying platform. As a refinement, we propose ways to enhance the operational semantics of Ethereum to make contracts less vulnerable. For developers writing contracts for the existing Ethereum system, we build a symbolic execution tool called OYENTE to find potential security bugs. Among 19; 366 existing Ethereum contracts, OYENTE flags 8; 833 of them as vulnerable, including the TheDAO bug which led to a 60 million US dollar loss in June 2016. We also discuss the severity of other attacks for several case studies which have source code available and confirm the attacks (which target only our accounts) in the main Ethereum network.";"[Luu, Loi; Chu, Duc-Hiep; Saxena, Prateek; Hobor, Aquinas] Natl Univ Singapore, Singapore 117548, Singapore; [Olickel, Hrishi; Hobor, Aquinas] Yale NUS Coll, Singapore, Singapore";Luu, L (corresponding author), Natl Univ Singapore, Singapore 117548, Singapore.;"loiluu@comp.nus.edu.sg; hiepcd@comp.nus.edu.sg; hrishi.olickel@yale-nus.edu.sg; prateeks@comp.nus.edu.sg; hobor@comp.nus.edu.sg";Sanchez-Gomez, Nicolas/K-3758-2014;;;;;28;395;434;11;132;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-4503-4139-4;;;;2016;;;;;;;254;269;;10.1145/2976749.2978309;;;16;"Computer Science, Information Systems; Telecommunications";"Computer Science; Telecommunications";BG2ZW;WOS:000387820900011;OK;;;;2021-11-07;
C;"Momeni, P; Wang, Y; Samavi, R";;"Ghorbani, A; Ray, I; Lashkari, AH; Zhang, J; Lu, R";;"Momeni, Pouyan; Wang, Yu; Samavi, Reza";;;Machine Learning Model for Smart Contracts Security Analysis;2019 17TH INTERNATIONAL CONFERENCE ON PRIVACY, SECURITY AND TRUST (PST);Annual Conference on Privacy Security and Trust-PST;;English;Proceedings Paper;17th International Conference on Privacy, Security and Trust (PST);AUG 26-28, 2019;Fredericton, CANADA;IEEE, Atlantic Canada Opportunities Agcy, TD Bank, IEEE New Brunswick Sect, CyberNB, Ignite Fredericton, ARMIS;;"blockchain; smart contract; security vulnerability; machine learning; code analysis; software testing";;In this paper, we introduce a machine learning predictive model that detects patterns of security vulnerabilities in smart contracts. We adapted two static code analyzers to label more than 1000 smart contracts that were verified and used on the Ethereum platform. Our model predicted a number of major software vulnerabilities with the average accuracy of 95 percent. The model currently supports smart contracts developed in Solidity, however, the approach described in this paper can be applied to other languages and blockchain platforms.;"[Momeni, Pouyan; Wang, Yu; Samavi, Reza] McMaster Univ, Hamilton, ON, Canada";Momeni, P (corresponding author), McMaster Univ, Hamilton, ON, Canada.;"momenip@mcmaster.ca; wang873@mcmaster.ca; samavir@mcmaster.ca";;;"NSERCNatural Sciences and Engineering Research Council of Canada (NSERC); MITACS";Supports from NSERC, MITACS and Vector Institute for Artificial Intelligence are acknowledged.;;25;0;0;2;2;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;1712-364X;;978-1-7281-3265-5;ANN CONF PRIV SECUR;;;2019;;;;;;;272;277;;;;;6;"Computer Science, Information Systems; Computer Science, Theory & Methods";Computer Science;BP7DZ;WOS:000561703600033;;;;;2021-11-07;
J;"Grech, N; Kong, M; Jurisevic, A; Brent, L; Scholz, B; Smaragdakis, Y";;;;"Grech, Neville; Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard; Smaragdakis, Yannis";;;MadMax: Analyzing the Out-of-Gas World of Smart Contracts;COMMUNICATIONS OF THE ACM;;;English;Article;;;;;;;;Ethereum is a distributed blockchain platform, serving as an ecosystem for smart contracts: full-fledged intercommunicating programs that capture the transaction logic of an account. A gas limit caps the execution of an Ethereum smart contract: instructions, when executed, consume gas, and the execution proceeds as long as gas is available. Gas-focused vulnerabilities permit an attacker to force key contract functionality to run out of gas-effectively performing a permanent denial-of-service attack on the contract. Such vulnerabilities are among the hardest for programmers to protect against, as out-of-gas behavior may be uncommon in nonattack scenarios and reasoning about these vulnerabilities is nontrivial. In this paper, we identify gas-focused vulnerabilities and present MadMax: a static program analysis technique that automatically detects gas-focused vulnerabilities with very high confidence. MadMax combines a smart contract decompiler and semantic queries in Datalog. Our approach captures high-level program modeling concepts (such as dynamic data structure storage and safely resumable loops) and delivers high precision and scalability. MadMax analyzes the entirety of smart contracts in the Ethereum blockchain in just 10 hours and flags vulnerabilities in contracts with a monetary value in billions of dollars. Manual inspection of a sample of flagged contracts shows that 81% of the sampled warnings do indeed lead to vulnerabilities.;"[Grech, Neville; Smaragdakis, Yannis] Univ Athens, Athens, Greece; [Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard] Univ Sydney, Sydney, NSW, Australia";Grech, N (corresponding author), Univ Athens, Athens, Greece.;"me@nevillegrech.com; mkon1090@uni.sydney.edu; ajur4521@uni.sydney.edu; lexi.brent@sydney.edu.au; bernhard.scholz@sydney.edu.au; smaragd@di.uoa.gr";Smaragdakis, Yannis/AAM-2851-2021;;"Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC) [DP180104030]; European Research CouncilEuropean Research Council (ERC)European Commission [307334, 790340]; REACH HIGH Scholars Programme; European Union, Operational Program II, Cohesion Policy";This research was supported partially by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). We gratefully acknowledge funding by the European Research Council, grants 307334 and 790340. In addition, the research work disclosed is partially funded by the REACH HIGH Scholars Programme -Post-Doctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the well-being of society - European Social Fund).;;17;2;2;3;4;ASSOC COMPUTING MACHINERY;NEW YORK;2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA;0001-0782;1557-7317;;COMMUN ACM;Commun. ACM;OCT;2020;63;10;;;;;87;95;;10.1145/3416262;;;9;"Computer Science, Hardware & Architecture; Computer Science, Software Engineering; Computer Science, Theory & Methods";Computer Science;NX1ZP;WOS:000575515300019;;;;;2021-11-07;
J;"Wang, W; Song, JJ; Xu, GQ; Li, YD; Wang, H; Su, CH";;;;"Wang, Wei; Song, Jingjing; Xu, Guangquan; Li, Yidong; Wang, Hao; Su, Chunhua";;;ContractWard: Automated Vulnerability Detection Models for Ethereum Smart Contracts;IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING;;;English;Article;;;;;;"Blockchain; machine learning; smart contracts; vulnerability detection";"BEHAVIOR; APPS";Smart contracts are decentralized applications running on Blockchain. A very large number of smart contracts has been deployed on Ethereum. Meanwhile, security flaws of contracts have led to huge pecuniary losses and destroyed the ecological stability of contract layer on Blockchain. It is thus an emerging yet crucial issue to effectively and efficiently detect vulnerabilities in contracts. Existing detection methods like Oyente and Securify are mainly based on symbolic execution or analysis. These methods are very time-consuming, as the symbolic execution requires the exploration of all executable paths or the analysis of dependency graphs in a contract. In this work, we propose ContractWard to detect vulnerabilities in smart contracts with machine learning techniques. First, we extract bigram features from simplified operation codes of smart contracts. Second, we employ five machine learning algorithms and two sampling algorithms to build the models. ContractWard is evaluated with 49502 real-world smart contracts running on Ethereum. The experimental results demonstrate the effectiveness and efficiency of ContractWard. The predictive Micro-F1 and Macro-F1 of ContractWard are over 96% and the average detection time is 4 seconds on each smart contract when we use XGBoost for training the models andSMOTETomek for balancing the training sets.;"[Wang, Wei; Song, Jingjing; Li, Yidong] Beijing Jiaotong Univ, Beijing Key Lab Secur & Privacy Intelligent Trans, Beijing 100044, Peoples R China; [Wang, Wei] King Abdullah Univ Sci & Technol KAUST, Div Comp Elect & Math Sci & Engn CEMSE, Thuwal 239556900, Saudi Arabia; [Xu, Guangquan] Tianjin Univ, Coll Intelligence & Comp, Tianjin Key Lab Adv Networking, Tianjin 300350, Peoples R China; [Wang, Hao] Norwegian Univ Sci & Technol, Dept Comp Sci, N-2815 Gjovik, Norway; [Su, Chunhua] Univ Aizu, Div Comp Sci, Aizu Wakamatsu, Fukushima 9658580, Japan";"Li, YD (corresponding author), Beijing Jiaotong Univ, Beijing Key Lab Secur & Privacy Intelligent Trans, Beijing 100044, Peoples R China.; Xu, GQ (corresponding author), Tianjin Univ, Coll Intelligence & Comp, Tianjin Key Lab Adv Networking, Tianjin 300350, Peoples R China.";"wangwei1@bjtu.edu.cn; 17120479@bjtu.edu.cn; losin@tju.edu.cn; ydli@bjtu.edu.cn; hawa@ntnu.no; suchunhua@gmail.com";"; Wang, Hao/B-3650-2019";"WANG, WEI/0000-0002-5974-1589; Wang, Hao/0000-0001-9301-5989";"Natural Science Foundation of ChinaNational Natural Science Foundation of China (NSFC) [U1736114]; National Key R&D Program of China [2017YFB0802805]; JSPS Kiban(B) [18H03240]; JSPS Kiban(C) [18K11298]";The work reported in this paper was supported in part by the Natural Science Foundation of China under Grant U1736114 and in part by the National Key R&D Program of China under Grant 2017YFB0802805. Chunhua Su was supported in part by JSPS Kiban(B) 18H03240 and in part by JSPS Kiban(C) 18K11298.;;51;12;12;11;14;IEEE COMPUTER SOC;LOS ALAMITOS;10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA;2327-4697;;;IEEE T NETW SCI ENG;IEEE Trans. Netw. Sci. Eng.;APR-JUN;2021;8;2;;;;;1133;1144;;10.1109/TNSE.2020.2968505;;;12;"Engineering, Multidisciplinary; Mathematics, Interdisciplinary Applications";"Engineering; Mathematics";TU2SY;WOS:000680892400029;32075472;Green Submitted;;;2021-11-07;
C;"Brent, L; Grech, N; Lagouvardos, S; Scholz, B; Smaragdakis, Y";;"Donaldson, AF; Torlak, E";;"Brent, Lexi; Grech, Neville; Lagouvardos, Sifis; Scholz, Bernhard; Smaragdakis, Yannis";;;Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities;PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20);;;English;Proceedings Paper;41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI);JUN 15-20, 2020;ELECTR NETWORK;Assoc Comp Machinery, ACM SIGPLAN;;"static analysis; information flow; smart contracts";;Smart contracts on permissionless blockchains are exposed to inherent security risks due to interactions with untrusted entities. Static analyzers are essential for identifying security risks and avoiding millions of dollars worth of damage. We introduce Ethainter, a security analyzer checking information flow with data sanitization in smart contracts. Ethainter identifies composite attacks that involve an escalation of tainted information, through multiple transactions, leading to severe violations. The analysis scales to the entire blockchain, consisting of hundreds of thousands of unique smart contracts, deployed over millions of accounts. Ethainter is more precise than previous approaches, as we confirm by automatic exploit generation (e.g., destroying over 800 contracts on the Ropsten network) and by manual inspection, showing a very high precision of 82.5% valid warnings for end-to-end vulnerabilities. Ethainter's balance of precision and completeness offers significant advantages over other tools such as Securify, Securify2, and teEther.;"[Brent, Lexi] Intl Comp Sci Inst, Berkeley, CA 94704 USA; [Grech, Neville; Lagouvardos, Sifis; Smaragdakis, Yannis] Univ Athens, Athens, Greece; [Brent, Lexi; Scholz, Bernhard] Univ Sydney, Sydney, NSW, Australia";Brent, L (corresponding author), Intl Comp Sci Inst, Berkeley, CA 94704 USA.;"lexi@icsi.berkeley.edu; me@nevillegrech.com; sifis.lag@di.uoa.gr; bernhard.scholz@sydney.edu.au; yannis@smaragd.org";Smaragdakis, Yannis/AAM-2851-2021;;"European Research CouncilEuropean Research Council (ERC)European Commission [790340]; Hellenic Foundation for Research and Innovation (project DEAN-BLOCK); Australian Government through the Australian Research CouncilAustralian Research Council [ARC DP180104030]; REACH HIGH Scholars Programs-Post-Doctoral Grants; European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of societysEuropean Social Fund)";We thank the anonymous reviewers for their valuable suggestions. We gratefully acknowledge funding by the European Research Council, grant 790340 (PARSE), and by the Hellenic Foundation for Research and Innovation (project DEAN-BLOCK). This research was partially supported by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). In addition, the researchwork disclosed is partially funded by the REACH HIGH Scholars ProgramsPostDoctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of societysEuropean Social Fund).;;43;0;0;2;4;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-4503-7613-6;;;;2020;;;;;;;454;469;;10.1145/3385412.3385990;;;16;"Computer Science, Software Engineering; Computer Science, Theory & Methods";Computer Science;BQ7DO;WOS:000614622300031;;;;;2021-11-07;
J;"Grech, N; Kong, M; Jurisevic, A; Brent, L; Scholz, B; Smaragdakis, Y";;;;"Grech, Neville; Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard; Smaragdakis, Yannis";;;MadMax: Surviving Out-of-Gas Conditions in Ethereum Smart Contracts;PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL;;;English;Article;;;;;;"Program Analysis; Smart Contracts; Security; Blockchain";;Ethereum is a distributed blockchain platform, serving as an ecosystem for smart contracts: full-fledged intercommunicating programs that capture the transaction logic of an account. Unlike programs in mainstream languages, a gas limit restricts the execution of an Ethereum smart contract: execution proceeds as long as gas is available. Thus, gas is a valuable resource that can be manipulated by an attacker to provoke unwanted behavior in a victim's smart contract (e.g., wasting or blocking funds of said victim). Gas-focused vulnerabilities exploit undesired behavior when a contract (directly or through other interacting contracts) runs out of gas. Such vulnerabilities are among the hardest for programmers to protect against, as out-of-gas behavior may be uncommon in non-attack scenarios and reasoning about it is far from trivial. In this paper, we classify and identify gas-focused vulnerabilities, and present MadMax: a static program analysis technique to automatically detect gas-focused vulnerabilities with very high confidence. Our approach combines a control-flow-analysis-based decompiler and declarative program-structure queries. The combined analysis captures high-level domain-specific concepts (such as dynamic data structure storage and safely resumable loops) and achieves high precision and scalability. MadMax analyzes the entirety of smart contracts in the Ethereum blockchain in just 10 hours (with decompilation timeouts in 8% of the cases) and flags contracts with a (highly volatile) monetary value of over $2.8B as vulnerable. Manual inspection of a sample of flagged contracts shows that 81% of the sampled warnings do indeed lead to vulnerabilities, which we report on in our experiment.;"[Grech, Neville; Smaragdakis, Yannis] Univ Athens, Athens, Greece; [Grech, Neville] Univ Malta, Msida, Malta; [Kong, Michael; Jurisevic, Anton; Brent, Lexi; Scholz, Bernhard] Univ Sydney, Sydney, NSW, Australia";"Grech, N (corresponding author), Univ Athens, Athens, Greece.; Grech, N (corresponding author), Univ Malta, Msida, Malta.";"me@nevillegrech.com; mkon1090@uni.sydney.edu.au; ajur4521@uni.sydney.edu.au; lexi.brent@sydney.edu.au; bernhard.scholz@sydney.edu.au; smaragd@di.uoa.gr";;;"Australian Government through the Australian Research CouncilAustralian Research Council [ARC DP180104030]; European Research CouncilEuropean Research Council (ERC)European Commission [307334, 790340]; REACH HIGH Scholars Program s Post-Doctoral Grants; European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of society -European Social Fund)";This research was supported partially by the Australian Government through the Australian Research Council's Discovery Projects funding scheme (project ARC DP180104030). We gratefully acknowledge funding by the European Research Council, grants 307334 and 790340. In addition, the research work disclosed is partially funded by the REACH HIGH Scholars Program s Post-Doctoral Grants. The grant is part-financed by the European Union, Operational Program II, Cohesion Policy 2014-2020 (Investing in human capital to create more opportunities and promote the wellbeing of society -European Social Fund).;;49;62;63;1;1;ASSOC COMPUTING MACHINERY;NEW YORK;2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA;;2475-1421;;P ACM PROGRAM LANG;P. ACM Program. Lang.;NOV;2018;2;;;;;;;;116;10.1145/3276486;;;27;Computer Science, Software Engineering;Computer Science;VK3YJ;WOS:000688034000010;;gold;;;2021-11-07;
C;"Chinen, Y; Yanai, N; Cruz, JP; Okamura, S";;;IEEE Comp Soc;"Chinen, Yuchiro; Yanai, Naoto; Cruz, Jason Paul; Okamura, Shingo";;;RA: Hunting for Re-Entrancy Attacks in Ethereum Smart Contracts via Static Analysis;2020 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2020);;;English;Proceedings Paper;3rd IEEE International Conference on Blockchain (Blockchain);NOV 02-06, 2020;ELECTR NETWORK;IEEE, IEEE Comp Soc, IEEE Tech Comm Scalable Comp;;"Ethereum; smart contracts; static analysis; EVM; symbolic execution; SMT solver";;Ethereum smart contracts are programs that are deployed and executed in a consensus-based blockchain managed by a peer-to-peer network. Several re-entrancy attacks that aim to steal Ether, the cryptocurrency used in Ethereum, stored in deployed smart contracts were found in the recent years. A countermeasure to such attacks is based on dynamic analysis that executes the smart contracts themselves, but it requires the spending of Ether and knowledge of attack patterns for analysis in advance. In this paper, we present a static analysis tool named RA (Re-entrancy Analyzer), a combination of symbolic execution and equivalence checking by a satisfiability modulo theories solver to analyze smart contract vulnerabilities against re-entrancy attacks. In contrast to existing tools, RA supports analysis of inter-contract behaviors by using only the Ethereum Virtual Machine bytecodes of target smart contracts, i.e., even without prior knowledge of attack patterns and without spending Ether. Furthermore, RA can verify existence of vulnerabilities against re-entrancy attacks without execution of smart contracts and it does not provide false positives and false negatives. We also present an implementation of RA to evaluate its performance in analyzing the vulnerability of deployed smart contracts against re-entrancy attacks and show that RA can precisely determine which smart contracts are vulnerable.;"[Chinen, Yuchiro; Yanai, Naoto; Cruz, Jason Paul] Osaka Univ, Grad Sch Informat Sci & Technol, Osaka, Japan; [Okamura, Shingo] Natl Inst Technol, Nara Coll, Dept Informat Engn, Nara, Japan";Chinen, Y (corresponding author), Osaka Univ, Grad Sch Informat Sci & Technol, Osaka, Japan.;"t-yuichiro@ist.osaka-u.ac.jp; yanai@ist.osaka-u.ac.jp; cruz@ist.osaka-u.ac.jp; okamura@info.nara-k.ac.jp";;;;;;26;1;1;0;0;IEEE COMPUTER SOC;LOS ALAMITOS;10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA;;;978-0-7381-0495-9;;;;2020;;;;;;;327;336;;10.1109/Blockchain50366.2020.00048;;;10;"Computer Science, Information Systems; Computer Science, Interdisciplinary Applications; Computer Science, Theory & Methods";Computer Science;BR3LS;WOS:000647642100039;OK;;;;2021-11-07;
C;"Albert, E; Correas, J; Gordillo, P; Roman-Diez, G; Rubio, A";;"Zhang, DM; Moller, A";;"Albert, Elvira; Correas, Jesus; Gordillo, Pablo; Roman-Diez, Guillermo; Rubio, Albert";;;SAFEVM: A Safety Verifier for Ethereum Smart Contracts;PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19);;;English;Proceedings Paper;28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA);JUL 15-19, 2019;Beijing, PEOPLES R CHINA;Assoc Comp Machinery, ACM SIGSOFT, Microsoft Res, DiDi, Google, Huawei, MoocTest, Facebook, Fujitsu, Sourcebrella, UCLouvain;;"Smart contracts; Ethereum blockchain; Safety verification";;Ethereum smart contracts are public, immutable and distributed and, as such, they are prone to vulnerabilities sourcing from programming mistakes of developers. This paper presents SAFEVM, a verification tool for Ethereum smart contracts that makes use of state-of-the-art verification engines for C programs. SAFEVM takes as input an Ethereum smart contract (provided either in Solidity source code, or in compiled EVM bytecode), optionally with assert and require verification annotations, and produces in the output a report with the verification results. Besides general safety annotations, SAFEVM handles the verification of array accesses: it automatically generates SV-COMP verification assertions such that C verification engines can prove safety of array accesses. Our experimental evaluation has been undertaken on all contracts pulled from etherscan.io (more than 24,000) by using as back-end verifiers CPAchecker, SeaHorn and VeryMax.;"[Albert, Elvira; Correas, Jesus; Gordillo, Pablo; Rubio, Albert] Univ Complutense Madrid, Madrid, Spain; [Roman-Diez, Guillermo] Univ Politecn Madrid, Madrid, Spain";Albert, E (corresponding author), Univ Complutense Madrid, Madrid, Spain.;;"Correas, Jesus/AAG-4430-2020; Roman-Diez, Guillermo/AAS-4445-2020; Gordillo, Pablo/X-4552-2018";"Correas, Jesus/0000-0002-3219-0799; Gordillo, Pablo/0000-0001-6189-4667; Roman-Diez, Guillermo/0000-0002-5427-8855";"Spanish MINECO [TIN2015-69175-C4-2-R]; MINECO/FEDER, UE [TIN2015-69175-C4-3-R]; Spanish MICINN/FEDERSpanish GovernmentEuropean Commission [RTI2018-094403-B-C31, RTI2018-094403-B-C33, S2018/-TCS-4314, S2018/TCS-4339]; EIE Funds of the European Union; UCM [CT27/16-CT28/16]";This work was funded partially by the Spanish MINECO project TIN2015-69175-C4-2-R and MINECO/FEDER, UE project TIN2015-69175-C4-3-R, by Spanish MICINN/FEDER, UE projects RTI2018-094403-B-C31 and RTI2018-094403-B-C33, by the CM projects S2018/-TCS-4314 and S2018/TCS-4339, co-funded by EIE Funds of the European Union, and by the UCM CT27/16-CT28/16 grant.;;20;1;1;0;2;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-4503-6224-5;;;;2019;;;;;;;386;389;;10.1145/3293882.3338999;;;4;"Computer Science, Software Engineering; Computer Science, Theory & Methods";Computer Science;BO1ZS;WOS:000503498000039;OK;Green Submitted;;;2021-11-07;
C;"Yamashita, K; Nomura, Y; Zhou, E; Pi, BF; Jun, S";;"Tonelli, R; Ducasse, S; Marchesi, M; Bracciali, A";;"Yamashita, Kazuhiro; Nomura, Yoshihide; Zhou, Ence; Pi, Bingfeng; Jun, Sun";;;Potential Risks of Hyperledger Fabric Smart Contracts;2019 IEEE 2ND INTERNATIONAL WORKSHOP ON BLOCKCHAIN ORIENTED SOFTWARE ENGINEERING (IWBOSE);;;English;Proceedings Paper;2nd IEEE International Workshop on Blockchain Oriented Software Engineering (IWBOSE);FEB 24, 2019;Hangzhou, PEOPLES R CHINA;IEEE, IEEE Comp Soc;;"Smart Contract; Validation Tool; Blockchain; Hyperledger Fabric";;Blockchain is a decentralized ledger technology, and it is the technology underlying Bitcoin and Ethereum. The interest in blockchain has been increasing since its emergence. Hyperledger Fabric is one of the permissioned blockchain frameworks. One of the characteristics of Hyperledger Fabric is it utilizes general-purpose programming languages, e.g., Go, Node.js, and Java, to implement smart contracts (called chaincode in Hyperledger Fabric). The advantages of utilizing these languages are already known to potential developers, and development tools might already exist. However, one of the disadvantages is that these languages were not originally designed for writing smart contracts. Hence, there may be risks that developers do not need to consider when using specific languages such as Solidity of Ethereum. Furthermore, even though development tools exist, how many risks are covered by the tools is an open question. In this paper, we focus on Go language and the tools. First, we surveyed what kind of risks are associated with chaincodes are developed using Go language and observed there are 14 potential risks. Then, we investigated how many risks can be covered by Go tools, e.g., golint and gosec, and a vulnerability detection tool for chaincodes called Chaincode Scanner. From our results, we observed that some risks are not covered by the existing tools. Hence, we develop a detection tool to cover risks by static analysis. Finally, in this paper, we describe how to find the risks with our tool and evaluate the usefulness.;"[Yamashita, Kazuhiro; Nomura, Yoshihide] Fujitsu Labs Ltd, Kawasaki, Kanagawa, Japan; [Zhou, Ence; Pi, Bingfeng; Jun, Sun] FUJITSU Res & Dev Ctr, Beijing, Peoples R China";Yamashita, K (corresponding author), Fujitsu Labs Ltd, Kawasaki, Kanagawa, Japan.;"y-kazuhiro@fujitsu.com; y.nomura@fujitsu.com; zhouence@cn.fujitsu.com; winter.pi@cn.fujitsu.com; sunjung@cn.fujitsu.com";;;;;;28;43;45;3;9;IEEE;NEW YORK;345 E 47TH ST, NEW YORK, NY 10017 USA;;;978-1-7281-1807-9;;;;2019;;;;;;;1;10;;;;;10;Computer Science, Software Engineering;Conference Proceedings Citation Index - Science (CPCI-S);Computer Science;WOS:000469455400001;;;;;2022-01-14;
C;"Nguyen, TD; Pham, LH; Sun, J; Lin, Y; Quang, RM";;;IEEE Comp Soc;"Nguyen, Tai D.; Pham, Long H.; Sun, Jun; Lin, Yun; Quang Tran Minh";;;sFuzz: An Efficient Adaptive Fuzzer for Solidity Smart Contracts;2020 ACM/IEEE 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2020);International Conference on Software Engineering;;English;Proceedings Paper;42nd ACM/IEEE International Conference on Software Engineering - Companion Proceedings (ICSE-Companion);JUN 27-JUL 19, 2020;ELECTR NETWORK;Assoc Comp Machinery, IEEE, IEEE Comp Soc, IEEE Comp Soc Tech Comm Software Engn, ACM Special Interest Grp Software Engn, Korean Inst Informat Scientists & Engineers, Natl Sci Fdn, Facebook, N Carolina State Univ, Microsoft, Samsung, LG Elect, KAIST, SK Hynix, NAVER, Suresoft, HITACHI, Google;;;GENERATION;"Smart contracts are Turing-complete programs that execute on the infrastructure of the blockchain, which often manage valuable digital assets. Solidity is one of the most popular programming languages for writing smart contracts on the Ethereum platform. Like traditional programs, smart contracts may contain vulnerabilities. Unlike traditional programs, smart contracts cannot be easily patched once they are deployed. It is thus important that smart contracts are tested thoroughly before deployment. In this work, we present an adaptive fuzzer for smart contracts on the Ethereum platform called sFuzz. Compared to existing Solidity fuzzers, sFuzz combines the strategy in the AFL fuzzer and an efficient lightweight multi-objective adaptive strategy targeting those hard-to-cover branches. sFuzz has been applied to more than 4 thousand smart contracts and the experimental results show that (1) sFuzz is efficient, e.g., two orders of magnitude faster than state-of-the-art tools; (2) sFuzz is effective in achieving high code coverage and discovering vulnerabilities; and (3) the different fuzzing strategies in sFuzz complement each other.";"[Nguyen, Tai D.; Pham, Long H.; Sun, Jun] Singapore Management Univ, Singapore, Singapore; [Lin, Yun] Natl Univ Singapore, Singapore, Singapore; [Quang Tran Minh] Ho Chi Minh City Univ Technol, Ho Chi Minh City, Vietnam";Nguyen, TD (corresponding author), Singapore Management Univ, Singapore, Singapore.;"dtnguyen.2019@smu.edu.sg; longph1989@gmail.com; sunjunhqq@gmail.com; llmhyy@gmail.com; quangtran@hcmut.edu.vn";;;Singapore Ministry of Education (MOE) Acemedic Research Fund (AcRF) Tier 1 grant;This research was supported by the Singapore Ministry of Education (MOE) Acemedic Research Fund (AcRF) Tier 1 grant.;;26;3;3;3;4;IEEE COMPUTER SOC;LOS ALAMITOS;10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA;0270-5257;;978-1-4503-7121-6;PROC INT CONF SOFTW;;;2020;;;;;;;778;788;;10.1145/3377811.3380334;;;11;Computer Science, Software Engineering;Computer Science;BR4RH;WOS:000652529800064;;Green Accepted;;;2021-12-22;
C;"Feist, J; Greico, G; Groce, A";;;ACM;"Feist, Josselin; Greico, Gustavo; Groce, Alex";;;Slither: A Static Analysis Framework For Smart Contracts;2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019);;;English;Proceedings Paper;IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB);MAY 27, 2019;Montreal, CANADA;IEEE, Assoc Comp Machinery, IEEE Comp Soc;;;;This paper describes Slither, a static analysis framework designed to provide rich information about Ethereum smart contracts. It works by converting Solidity smart contracts into an intermediate representation called SlithIR. SlithIR uses Static Single Assignment (SSA) form and a reduced instruction set to ease implementation of analyses while preserving semantic information that would be lost in transforming Solidity to bytecode. Slither allows for the application of commonly used program analysis techniques like dataflow and taint tracking. Our framework has four main use cases: (1) automated detection of vulnerabilities, (2) automated detection of code optimization opportunities, (3) improvement of the user's understanding of the contracts, and (4) assistance with code review. In this paper, we present an overview of Slither, detail the design of its intermediate representation, and evaluate its capabilities on real-world contracts. We show that Slither's bug detection is fast, accurate, and outperforms other static analysis tools at finding issues in Ethereum smart contracts in terms of speed, robustness, and balance of detection and false positives. We compared tools using a large dataset of smart contracts and manually reviewed results for 1000 of the most used contracts.;"[Feist, Josselin; Greico, Gustavo] Trail Bits, New York, NY 10003 USA; [Groce, Alex] No Arizona Univ, Flagstaff, AZ 86011 USA";Feist, J (corresponding author), Trail Bits, New York, NY 10003 USA.;"josselin@trailofbits.com; gustavo.grieco@trailofbits.com; agroce@gmail.com";;;;;;28;31;32;0;2;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-7281-2257-1;;;;2019;;;;;;;8;15;;10.1109/WETSEB.2019.00008;;;8;Computer Science, Software Engineering;Computer Science;BO2GT;WOS:000505681100002;;Green Submitted;;;2021-12-22;
C;"He, JX; Balunovic, M; Ambroladze, N; Tsankov, P; Vechev, M";;;ACM;"He, Jingxuan; Balunovic, Mislay; Ambroladze, Nodar; Tsankov, Petar; Vechev, Martin";;;Learning to Fuzz from Symbolic Execution with Application to Smart Contracts;PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19);;;English;Proceedings Paper;ACM SIGSAC Conference on Computer and Communications Security (CCS);NOV 11-15, 2019;London, ENGLAND;Assoc Comp Machinery, ACM SIGSAC;;"Fuzzing; Imitation learning; Symbolic execution; Smart contracts";;Fuzzing and symbolic execution are two complementary techniques for discovering software vulnerabilities. Fuzzing is fast and scalable, but can be ineffective when it fails to randomly select the right inputs. Symbolic execution is thorough but slow and often does not scale to deep program paths with complex path conditions. In this work, we propose to learn an effective and fast fuzzer from symbolic execution, by phrasing the learning task in the framework of imitation learning. During learning, a symbolic execution expert generates a large number of quality inputs improving coverage on thousands of programs. Then, a fuzzing policy, represented with a suitable architecture of neural networks, is trained on the generated dataset. The learned policy can then be used to fuzz new programs. We instantiate our approach to the problem of fuzzing smart contracts, a domain where contracts often implement similar functionality (facilitating learning) and security is of utmost importance. We present an end-to-end system, ILF (for Imitation Learning based Fuzzer), and an extensive evaluation over >18K contracts. Our results show that ILF is effective: (i) it is fast, generating 148 transactions per second, (ii) it outperforms existing fuzzers (e.g., achieving 33% more coverage), and (iii) it detects more vulnerabilities than existing fuzzing and symbolic execution tools for Ethereum.;"[He, Jingxuan; Balunovic, Mislay; Ambroladze, Nodar; Tsankov, Petar; Vechev, Martin] Swiss Fed Inst Technol, Zurich, Switzerland";He, JX (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.;"jingxuan.he@inf.ethz.ch; mislav.balunovic@inf.ethz.ch; anodar@ethz.ch; petar.tsankov@inf.ethz.ch; martin.vechev@inf.ethz.ch";;;;;;65;19;23;4;9;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-4503-6747-9;;;;2019;;;;;;;531;548;;10.1145/3319535.3363230;;;18;"Computer Science, Information Systems; Computer Science, Theory & Methods; Telecommunications";"Computer Science; Telecommunications";BO2ZY;WOS:000509760700033;;;;;2021-12-22;
C;"Mossberg, M; Manzano, F; Hennenfent, E; Groce, A; Grieco, G; Feist, J; Brunson, T; Dinaburg, A";;;IEEE;"Mossberg, Mark; Manzano, Felipe; Hennenfent, Eric; Groce, Alex; Grieco, Gustavo; Feist, Josselin; Brunson, Trent; Dinaburg, Artem";;;Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts;34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019);;;English;Proceedings Paper;34th IEEE/ACM International Conference on Automated Software Engineering (ASE);NOV 10-11, 2019;San Diego, CA;IEEE, Assoc Comp Machinery, IEEE Comp Soc, IEEE Comp Soc Tech Council Software Engn, ACM Special Interest Grp Artificial Intelligence, ACM Special Interest Grp Software Engn;;;;An effective way to maximize code coverage in software tests is through dynamic symbolic execution a technique that uses constraint solving to systematically explore a program's state space. We introduce an open-source dynamic symbolic execution framework called Manticore for analyzing binaries and Ethereum smart contracts. Manticore's flexible architecture allows it to support both traditional and exotic execution environments, and its API allows users to customize their analysis. Here, we discuss Manticore's architecture and demonstrate the capabilities we have used to find bugs and verify the correctness of code for our commercial clients.;"[Mossberg, Mark; Manzano, Felipe; Hennenfent, Eric; Groce, Alex; Grieco, Gustavo; Feist, Josselin; Brunson, Trent; Dinaburg, Artem] Trail Of Bits, New York, NY 10003 USA";Mossberg, M (corresponding author), Trail Of Bits, New York, NY 10003 USA.;"mark@trailofbits.com; felipe@trailofbits.com; eric.hennenfent@trailofbits.com; alex.groce@trailofbits.com; gustavo.grieco@trailofbits.com; josselin@trailofbits.com; trent.brunson@trailofbits.com; artem@trailofbits.com";;;;;;17;14;16;1;1;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-7281-2508-4;;;;2019;;;;;;;1186;1189;;10.1109/ASE.2019.00133;;;4;"Automation & Control Systems; Computer Science, Software Engineering; Engineering, Electrical & Electronic";"Automation & Control Systems; Computer Science; Engineering";BO9YQ;WOS:000533303400126;OK;Green Submitted;;;2021-12-22;
C;"Albert, E; Gordillo, P; Livshits, B; Rubio, A; Sergey, I";;"Lahiri, SK; Wang, C";;"Albert, Elvira; Gordillo, Pablo; Livshits, Benjamin; Rubio, Albert; Sergey, Ilya";;;ETHIR: A Framework for High-Level Analysis of Ethereum Bytecode;AUTOMATED TECHNOLOGY FOR VERIFICATION AND ANALYSIS (ATVA 2018);Lecture Notes in Computer Science;;English;Proceedings Paper;16th International Symposium on Automated Technology for Verification and Analysis (ATVA);OCT 07-10, 2018;Los Angeles, CA;Microsoft, Springer;;;;"Analyzing Ethereum bytecode, rather than the source code from which it was generated, is a necessity when: (1) the source code is not available (e.g., the blockchain only stores the bytecode), (2) the information to be gathered in the analysis is only visible at the level of bytecode (e.g., gas consumption is specified at the level of EVM instructions), (3) the analysis results may be affected by optimizations performed by the compiler (thus the analysis should be done ideally after compilation). This paper presents EthIR, a framework for analyzing Ethereum bytecode, which relies on (an extension of) Oyente, a tool that generates CFGs; EthIR produces from the CFGs, a rule-based representation (RBR) of the bytecode that enables the application of (existing) high-level analyses to infer properties of EVM code.";"[Albert, Elvira; Gordillo, Pablo] Univ Complutense Madrid, Madrid, Spain; [Livshits, Benjamin] Imperial Coll London, London, England; [Rubio, Albert] Univ Politecn Cataluna, Barcelona, Spain; [Sergey, Ilya] UCL, London, England";Gordillo, P (corresponding author), Univ Complutense Madrid, Madrid, Spain.;pabgordi@ucm.es;Gordillo, Pablo/X-4552-2018;"Gordillo, Pablo/0000-0001-6189-4667; Sergey, Ilya/0000-0003-4250-5392";"Spanish MECD Salvador de Madariaga Mobility Grants [PRX17/00297, PRX17/00303]; Spanish MINECOSpanish Government [TIN2015-69175-C4-2-R, TIN2015-69175-C4-3-R]; UCM [CT27/16-CT28/16]; CM project [S2013/ICE-3006]";This work was funded partially by the Spanish MECD Salvador de Madariaga Mobility Grants PRX17/00297 and PRX17/00303, the Spanish MINECO projects TIN2015-69175-C4-2-R and TIN2015-69175-C4-3-R, the CM project S2013/ICE-3006 and by the UCM CT27/16-CT28/16 grant. Sergey's research was supported by a generous gift from Google.;;12;15;15;0;0;SPRINGER INTERNATIONAL PUBLISHING AG;CHAM;GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND;0302-9743;1611-3349;"978-3-030-01090-4; 978-3-030-01089-8";LECT NOTES COMPUT SC;;;2018;11138;;;;;;513;520;;10.1007/978-3-030-01090-4_30;;;8;"Automation & Control Systems; Computer Science, Hardware & Architecture; Computer Science, Software Engineering; Computer Science, Theory & Methods";"Automation & Control Systems; Computer Science";BS4VZ;WOS:000723531300030;OK;Green Submitted;;;2021-12-22;
C;"Nikolic, I; Kolluri, A; Sergey, I; Saxena, P; Hobor, A";;;ACM;"Nikolic, Ivica; Kolluri, Aashish; Sergey, Ilya; Saxena, Prateek; Hobor, Aquinas";;;Finding The Greedy, Prodigal, and Suicidal Contracts at Scale;34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018);;;English;Proceedings Paper;34th Annual Computer Security Applications Conference (ACSAC);DEC 03-07, 2018;San Juan, PR;Appl Comp Secur Associates, Natl Sci Fdn, U S Dept Homeland Secur Sci & Technol Directorate, Charles Koch Inst;;;;Smart contracts-stateful executable objects hosted on blockchains like Ethereum-carry billions of dollars worth of coins and cannot be updated once deployed. We present a new systematic characterization of a class of trace vulnerabilities, which result from analyzing multiple invocations of a contract over its lifetime. We focus attention on three example properties of such trace vulnerabilities: finding contracts that either lock funds indefinitely, leak them carelessly to arbitrary users, or can be killed by anyone. We implemented Maian, the first tool for specifying and reasoning about trace properties, which employs inter-procedural symbolic analysis and concrete validator for exhibiting real exploits. Our analysis of nearly one million contracts flags 34, 200 (2, 365 distinct) contracts vulnerable, in 10 seconds per contract. On a subset of 3, 759 contracts which we sampled for concrete validation and manual analysis, we reproduce real exploits at a true positive rate of 89%, yielding exploits for 3, 686 contracts. Our tool finds exploits for the infamous Parity bug that indirectly locked $200 million US worth in Ether, which previous analyses failed to capture.;"[Nikolic, Ivica; Kolluri, Aashish; Saxena, Prateek] NUS, Sch Comp, Singapore, Singapore; [Sergey, Ilya] UCL, London, England; [Hobor, Aquinas] NUS, Sch Comp, Yale NUS Coll, Singapore, Singapore";Nikolic, I (corresponding author), NUS, Sch Comp, Singapore, Singapore.;;;Sergey, Ilya/0000-0003-4250-5392;"Ministry of Education, SingaporeMinistry of Education, Singapore [R-252-000-560-112]; Yale-NUS College grant [R-607-265-322-121]; Crystal center at the National University of SingaporeNational University of Singapore";We thank Shruti Tople, Loi Luu, Shweta Shinde, Muoi Tran, Andreea Costea, Teodora Baluta, and the anonymous reviewers of the paper for their feedback. Ivica Nikolic is supported by the Ministry of Education, Singapore under Grant No. R-252-000-560-112. Aquinas Hobor was partially supported by Yale-NUS College grant R-607-265-322-121. This work is supported in part by the Crystal center at the National University of Singapore.;;28;83;87;0;1;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-4503-6569-7;;;;2018;;;;;;;653;663;;10.1145/3274694.3274743;;;11;"Computer Science, Information Systems; Computer Science, Theory & Methods";Computer Science;BL7SC;WOS:000455393700053;OK;Green Submitted;;;2021-12-22;
C;"Tsankov, P; Dan, A; Drachsler-Cohen, D; Gervais, A; Bunzli, F; Vechev, M";;;ACM;"Tsankov, Petar; Dan, Andrei; Drachsler-Cohen, Dana; Gervais, Arthur; Bunzli, Florian; Vechev, Martin";;;SECURIFY: Practical Security Analysis of Smart Contracts;PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18);;;English;Proceedings Paper;ACM SIGSAC Conference on Computer and Communications Security (CCS);OCT 15-19, 2018;Toronto, CANADA;Assoc Comp Machinery, ACM SIGSAC, NSF, ANT Financil, Baidu, Cisco, Samsung Res, BlackBerry, Facebook, IBM Res, Ledger, SAP, Visa Res;;"Smart contracts; Security analysis; Stratified Datalog";;Permissionless blockchains allow the execution of arbitrary programs (called smart contracts), enabling mutually untrusted entities to interact without relying on trusted third parties. Despite their potential, repeated security concerns have shaken the trust in handling billions of USD by smart contracts. To address this problem, we present Securify, a security analyzer for Ethereum smart contracts that is scalable, fully automated, and able to prove contract behaviors as safe/unsafe with respect to a given property. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not. To enable extensibility, all patterns are specified in a designated domain-specific language. Securify is publicly released, it has analyzed > 18K contracts submitted by its users, and is regularly used to conduct security audits by experts. We present an extensive evaluation of Securify over real-world Ethereum smart contracts and demonstrate that it can effectively prove the correctness of smart contracts and discover critical violations.;"[Tsankov, Petar; Dan, Andrei; Drachsler-Cohen, Dana; Gervais, Arthur; Bunzli, Florian; Vechev, Martin] Swiss Fed Inst Technol, Zurich, Switzerland; [Gervais, Arthur] Imperial Coll London, London, England";Tsankov, P (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.;"petar.tsankov@inf.ethz.ch; andrei.dan@inf.ethz.ch; dana.drachsler@inf.ethz.ch; a.gervais@imperial.ac.uk; fbuenzli@student.ethz.ch; martin.vechev@inf.ethz.ch";;;ERC Starting Grant [680358];The research leading to these results was partially supported by an ERC Starting Grant 680358. We thank Hubert Ritzdorf and the ChainSecurity team for their valuable contributions to this project.;;51;124;132;6;10;ASSOC COMPUTING MACHINERY;NEW YORK;1515 BROADWAY, NEW YORK, NY 10036-9998 USA;;;978-1-4503-5693-0;;;;2018;;;;;;;67;82;;10.1145/3243734.3243780;;;16;"Computer Science, Theory & Methods; Engineering, Electrical & Electronic";"Computer Science; Engineering";BM2QN;WOS:000461315900006;OK;;;;2021-12-22;
C;;;;;Oliver Lutz and Huili Chen and Hossein Fereidooni and Christoph Sendner and Alexandra Dmitrienko and Ahmad Reza Sadeghi and Farinaz Koushanfar;;;ESCORT: Ethereum Smart COntRacTs Vulnerability Detection using Deep Neural Network and Transfer Learning;;;;English;Pre-print;;;;;;;;;;;;;;;;;;;;;;arXiv;;;;;;;;;2021;;;;;;;;;;;;;;;;;;;;;;2021-12-22;
C;;;;;Sukrit Kalra and Seep Goel and Mohan Dhawan and Subodh Sharma;;;ZEUS: Analyzing Safety of Smart Contracts;;;;English;Proceedings Paper;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2018;;;;;;;;;;;;;;;;;;;;;;2021-12-22;
C;;;;;Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex;;;Echidna: Effective, Usable, and Fast Fuzzing for Smart Contracts;;;;English;Proceedings Paper;;;;;;;;;;;;;;;;;;;;;;Association for Computing Machinery;;;;;9781450380089;;;;2020;;;;;;;;;;;;;;;;;;;;;;2021-12-22;
C;;;;;Mueller, Bernhard;;;MythX Tech: Behind the Scenes of Smart Contract Security Analysis;;;;English;Proceedings Paper;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2018;;;;;;;;;;;;;;;;;;OK;;;;2021-12-22;
C;;;;;TonTon Hsien-De Huang;;;Hunting the Ethereum Smart Contract: Color-inspired Inspection of Potential Attacks;;;;English;Pre-print;;;;;;;;;;;;;;;;;;;;;;arXiv;;;;;;;;;2018;;;;;;;;;;;;;;;;;;;;;;2021-12-22;
C;;;;;Ajay K. Gogineni and S. Swayamjyoti and Devadatta Sahoo and Kisor K. Sahu and Raj kishore;;;Multi-Class classification of vulnerabilities in Smart Contracts using AWD-LSTM, with pre-trained encoder inspired from natural language processing;;;;English;Pre-print;;;;;;;;;;;;;;;;;;;;;;arXiv;;;;;;;;;2020;;;;;;;;;;;;;;;;;;;;;;2021-12-22;
C;;;;;Zhuang, Yuan and Liu, Zhenguang and Qian, Peng and Liu, Qi and Wang, Xiang and He, Qinming;;;Smart Contract Vulnerability Detection using Graph Neural Network;;;;English;Proceedings Paper;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020;;;;;;;;;;;;;;;;;;;;;;2021-12-22;
C;;;;;Yang, Zhiqiang and Liu, Han and Li, Yue and Zheng, Huixuan and Wang, Lei and Chen, Bangdao;;;Seraph: Enabling Cross-Platform Security Analysis for EVM and WASM Smart Contracts;;;;English;Proceedings Paper;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020;;;;;;;;;;;;;;;;;;OK;;;;2021-12-22;
C;;;;;Lexi Brent and Anton Jurisevic and Michael Kong and Eric Liu and Francois Gauthier and Vincent Gramoli and Ralph Holz and Bernhard Scholz;;;Vandal: A Scalable Security Analysis Framework for Smart Contracts;;;;English;Pre-print;;;;;;;;;;;;;;;;;;;;;;arXiv;;;;;;;;;2018;;;;;;;;;;;;;;;;;;;;;;2021-12-22;